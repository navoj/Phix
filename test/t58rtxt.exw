--
-- t58rtxt.exw
--
--  A simple text mode file test.
--  write some text lines randomly, then read the file and check it got it right.
--
--with profile_time
--include builtins\pfileio.e
--include builtins\pfileio2.e --old style ilasm...
--include builtins\pfileio3.e

--constant newio = 0    -- asm
--constant newio = 1    -- first hll
--constant newio = 2    -- old style ilasm
--constant newio = 3    -- very latest

puts(1,"Started\n")

--DEV '\n', '\n'+0.1, {'x','\n'} etc
constant strset = { "",
                    "\n",
                    "to",
                    "tre",
                    "four",
                    "five\n",
                    "six\nsx",
                    "sev\nven",
                    "eeeiight",
                    "nine\nine",
                    "ten\nten\nt\n"}
                    
sequence written = {}
--  written = {10,7,11,3,8,8,7,10}--,6}--,10,1}
integer wi, ech, ach, wbytes, rbytes, r
string swi

procedure Abort(string msg)
    puts(1,msg)
    abort(1)
end procedure

constant  testname = "t58tmp.txt"
integer fn
atom t0, tp, tgc, tgs
    t0 = time()
    set_rand(0)
--  if newio=0 then
        fn = open(testname,"w")
--  elsif newio=1 then
--      fn = h_open(testname,"w")
--  elsif newio=2 then
----        fn = k_open(testname,"w")
--  elsif newio=3 then
--      fn = f_open(testname,"w")
--  else
--      ?9/0
--  end if
    if fn=-1 then Abort("error opening file") end if
    wbytes = 0
    for i=1 to 1000000 do
--  for i=1 to 8 do
        r = rand(length(strset))
--      r = written[i]
        swi = strset[r]
--      if newio=0 then
            puts(fn,swi)
----            ?where(fn)
--      elsif newio=1 then
--          h_puts(fn,swi)
----            ?h_where(fn)
--      elsif newio=2 then
--          k_puts(fn,swi)
----            ?k_where(fn)
--      else
--          ?9/0
--      end if
        written &= r
        wbytes += length(swi)
    end for
    tp = time()
--if newio=2 then k_diag(fn) end if
object line = -1
integer lidx
function getsch()
integer ch
    if atom(line) or lidx>length(line) then
--      if newio=0 then
            line = gets(fn)
--      elsif newio=1 then
--          line = h_gets(fn)
--      elsif newio=2 then
--          line = k_gets(fn)
--      else
--          ?9/0
--      end if
        if atom(line) then return -1 end if
        lidx = 1
    end if
    ch = line[lidx]
    lidx += 1
    return ch
end function

procedure mygetc(integer flag)
    if flag then
        ach = getsch()
--  elsif newio=0 then
    else
        ach = getc(fn)
--  elsif newio=1 then
--      ach = h_getc(fn)
--  elsif newio=2 then
--      ach = k_getc(fn)
--  else
--      ?9/0
    end if
end procedure

procedure readtest(integer flag)
--  if newio=0 then
        close(fn)
        fn = open(testname,"r")
--  elsif newio=1 then
--      h_close(fn)
--      fn = h_open(testname,"r")
--  elsif newio=2 then
--      k_close(fn)
--      fn = k_open(testname,"r")
--  else
--      ?9/0
--  end if
    rbytes = 0
    for i2=1 to length(written) do
        wi = written[i2]
        swi = strset[wi]
        for j=1 to length(swi) do
            ech = swi[j]
            mygetc(flag)
            if ach!=ech then ?9/0 end if
            rbytes += 1
        end for
    end for
    mygetc(flag)
    if ach!=-1 then ?9/0 end if
--  if newio=0 then
        close(fn)
--  elsif newio=1 then
--      h_close(fn)
--  elsif newio=2 then
--      k_close(fn)
--  else
--      ?9/0
--  end if
end procedure
    readtest(0) -- getc
    tgc = time()
    readtest(1) -- gets
    tgs = time()
    printf(1,"tests completed, %d bytes written, %d bytes read,\n",{wbytes,rbytes})
    printf(1," tp=%3.2f, tgc=%3.2f, tgs=%3.2f, total=%3.2f\n",{tp-t0,tgc-tp,tgs-tgc,tgs-t0})
--  if getc(0) then end if
