--
-- t37misc.exw Phix tests.
--
--/* Not required for Phix
include ..\builtins\misc.e      -- sprintf
include ..\builtins\wildcard.e  -- lower
include ..\builtins\machine.e   -- int_to_bytes
include ..\builtins\sort.e
include ..\builtins\file.e
type string(object s) return sequence(s) end type
--*/

--/**/  constant RDS=0  --/*
        constant RDS=1  --*/

constant showprogress=0

procedure Abort(string msg) puts(1,msg) if getc(0) then end if abort(1) end procedure

if showprogress then puts(1,"1\n") end if
if not equal(floor(-1/100),-1) then Abort("floor(-1/100)!=-1\n") end if
if not equal(floor(-1/-100),0) then Abort("floor(-1/-100)!=0\n") end if
if not equal(floor(1/-100),-1) then Abort("floor(1/-100)!=-1\n") end if
if not equal(floor(1/100),0) then Abort("floor(1/100)!=0\n") end if
if not equal(floor(-1.1/100),-1) then Abort("floor(-1.1/100)!=-1\n") end if
if not equal(floor(-1.1/-100),0) then Abort("floor(-1.1/-100)!=0\n") end if
if not equal(floor(1.1/-100),-1) then Abort("floor(1.1/-100)!=-1\n") end if
if not equal(floor(1.1/100),0) then Abort("floor(1.1/100)!=0\n") end if
--DEV (these get optimised away by the 32-bit compiler, may hit problems on the 64-bit compiler, as below:)
if not equal(floor(1/0.4),2) then Abort("not equal(floor(1/0.4),2)\n") end if
if not equal(floor(2/0.4),5) then Abort("not equal(floor(2/0.4),5)\n") end if
if not equal(floor(3/0.4),7) then Abort("not equal(floor(3/0.4),7)\n") end if
--DEV. 64-bit issues... use 0.375 as that can be held exactly.
----/**/    if not equal(sq_floor_div({1,2,3},0.4),{2,5,7}) then    --/* -- Phix
--      if not equal(floor({1,2,3}/0.4),{2,5,7}) then           --*/ -- RDS
--          Abort("not equal(floor({1,2,3}/0.4),{2,5,7})\n")
--      end if
----/**/    if not equal(sq_floor_div({1,2,3},-0.4),{-3,-5,-8}) then    --/* -- Phix
--      if not equal(floor({1,2,3}/-0.4),{-3,-5,-8}) then           --*/ -- RDS
----?sq_floor_div({1,2,3},-0.4)
--          Abort("not equal(floor({1,2,3}/-0.4),{-3,-5,-8})\n")
--      end if
--
--/**/  if not equal(sq_floor_div({1,2,3},0.375),{2,5,8}) then  --/* -- Phix
        if not equal(floor({1,2,3}/0.375),{2,5,8}) then         --*/ -- RDS
            Abort("not equal(floor({1,2,3}/0.375),{2,5,8})\n")
        end if
--/**/  if not equal(sq_floor_div({1,2,3},-0.375),{-3,-6,-8}) then  --/* -- Phix
        if not equal(floor({1,2,3}/-0.375),{-3,-6,-8}) then         --*/ -- RDS
--?sq_floor_div({1,2,3},-0.375)
            Abort("not equal(floor({1,2,3}/-0.375),{-3,-6,-8})\n")
        end if


if showprogress then puts(1,"2\n") end if

if not equal(sprint(power(2.3,4.7)),"50.13266932") then Abort("power(2.3,4.7))!=50.13266932\n") end if 
if power(2,3)!=8 then Abort("power(2,3)!=8\n") end if
--DEV opPow only supports atoms:
--if not equal(power({2,3,4},{4,5,6}),{16,243,4096}) then 
--   Abort("power({2,3,4},{4,5,6})!={16,243,4096}\n") abort(0) end if
if not equal(power(2,4),16) then Abort("power(2,4)!=16\n") end if
-- removed 10/1/16: exact on 32bit, ~+1e-17 out on 64bit, not important (comment below moved from pHeap.e).
--DEV test/fix this on 64-bit (hopefully not an issue) [still is 10/1/16, but removed from t37 anyway]
--  However while power(3,5) is exactly 243 in 64-bit mode, it is one bit 
--  adrift in 80-bit mode, so eg:
--          f=power(3,5)
--          ?{f=243,f+1=244}
--  may display {0,1}, and I can tell you it took me a fair while to track 
--  that little bugger down. (the bug being that 32bit opPower used 80-bit 
--  mode for no good reason?) The really confusing thing was of course the
--  way that 243.0 + 1 was getting stored as an integer... ie the _reload_
--  of 243.0 cleared bits 64..80 compared to when it was first stored.
--if not equal(power(3,5),243) then Abort("power(3,5)!=243\n") end if
if not equal(power(4,6),4096) then Abort("power(4,6)!=4096\n") end if
if showprogress then puts(1,"3\n") end if
if not equal(sprint(power(-0.8,-2)),"1.5625") then Abort("power(-0.8,-2)!=1.5625\n") end if
if not equal(sprint(power(-0.8,-3)),"-1.953125") then Abort("power(-0.8,-3)!=-1.953125\n") end if
--  a = power(-0.8,2.1) -- attempt to raise negative number to non-integer power (tick!)
if not equal(sprint(power(-0.8,2)),"0.64") then Abort("power(-0.8,2)!=0.64\n") end if
if not equal(sprint(power(-0.8,3)),"-0.512") then Abort("power(-0.8,3)!=-0.512\n") end if

if not equal(sprint(log(10)),"2.302585093") then Abort("sprint(log(10))!=2.302585093\n") end if

if showprogress then puts(1,"4\n") end if

--Warning: sprint shows strings when it can (in this case "ñpØ?"). [DEV use &0 to inhibit that]
-- [I'm confused here: {164,112,157,63} or {241,112,216,163}??]
--  if sprint(atom_to_float32(1.23))!="{164,112,157,63}" then Abort("atf32(1.23) error\n") end if
--?atom_to_float32(1.25)&-1
--?sprint({0,0,160,63})
--?sprint(atom_to_float32(1.25))
--if not equal(sprint(atom_to_float32(1.25)),"{0,0,160,63}") then Abort("atf32(1.25) error\n") end if
if not equal(sprint(atom_to_float32(1.25)&-1),"{0,0,160,63,-1}") then Abort("atf32(1.25) error\n") end if
if not equal(sprint(float32_to_atom({164,112,157,63})),"1.230000019") then Abort("f32ta1.23 error\n") end if
--Warning: sprint shows strings when it can (in this case "ú+Ùà¾¦ß").
--?atom_to_float64(1e308)&-1
--if not equal(sprint(atom_to_float64(1e308)&-1),
--           "{160,200,235,133,243,204,225,127,-1}") then
--           "{163,200,235,133,243,204,225,127,-1}") then
--  Abort("atf641e308 error\n")
--end if
--?atom_to_float64(1e307)&-1
--if not equal(sprint(atom_to_float64(1e307)&-1),
--           "{55,116,172,60,31,123,172,127,-1}") then
----             "{51,116,172,60,31,123,172,127,-1}") then
--  Abort("atf641e307 error\n")
--end if
--DEV: [FIXED 17/1/16]
--?atom_to_float64(#FFFFFFFF)&-1    -- 32:{0,0,224,255,255,255,239,65,-1}, 64: {0,0,0,0,0,0,240,191,-1}...
--?float64_to_atom(atom_to_float64(#FFFFFFFF))  -- 32: 4294967295, 64: -1...
if not equal(sprint(atom_to_float64(#FFFFFFFF)&-1),
             "{0,0,224,255,255,255,239,65,-1}") then
    Abort("atf64#FF error\n")
end if

if showprogress then puts(1,"5\n") end if

--?float64_to_atom({160,200,235,133,243,204,225,127})
if not equal(sprint(float64_to_atom({163,200,235,133,243,204,225,127})),"1e+308") then
    Abort("f64ta1e308 error\n")
end if

if showprogress then puts(1,"6\n") end if

atom a, b
integer ip
    a = allocate(12)
    poke(a,15)
    if peek(a)!=15 then Abort("peek(a)!=15\n") end if
    ip=peek(a)
    if ip!=15 then Abort("ip!=15\n") end if
    poke(a,{-1,0,255})
    if not equal(peek({a,3}),{255,0,255}) then Abort("peek({a,3})!={-1,0,255}\n") end if

if showprogress then puts(1,"7\n") end if

    mem_set(a,12,12)
    if not equal(peek({a,12}),repeat(12,12)) then Abort("not equal(peek({a,12}),repeat(12,12))\n") end if
    mem_set(a,4,4)
    if not equal(peek({a,5}),{4,4,4,4,12}) then Abort("not equal(peek({a,5}),{4,4,4,4,12})\n") end if
    mem_set(a,7,0)
    if not equal(peek({a,3}),{4,4,4}) then Abort("not equal(peek({a,3}),{4,4,4})\n") end if

if showprogress then puts(1,"8\n") end if

--atom aa
--  aa=allocate(4*16)
--constant fto0 ={#FFFFFFFF,#EEEEEEEE,#DDDDDDDD,#CCCCCCCC,#BBBBBBBB,#AAAAAAAA,#99999999,#88888888,
--              #77777777,#66666666,#55555555,#44444444,#33333333,#22222222,#11111111,#00000000},
--       fto0s={-#00000001,-#11111112,-#22222223,-#33333334,-#44444445,-#55555556,-#66666667,-#77777778,
--              #77777777,#66666666,#55555555,#44444444,#33333333,#22222222,#11111111,#00000000}
--  poke4(aa,fto0)
--if machine_bits()!=64 then
--  --DEV this does not work as the 32-bit Phix compiler creates floats for values > #3FFF_FFFF,
--  --      but at runtime #0000_0000_3FFF_FFFF..#3FFF_FFFF_FFFF_FFFF are integers, and hence
--  --      the old float!=int kicks in. Maybe we should have a t37misc64.exw for completeness,
--  --      that is only compiled/interpreted under machine_bits()=64 (and uses bigger values?).
--  if not equal(peek4u({aa,16}),fto0) then Abort("peek4u({aa,16}) error\n") end if
--  if not equal(peek4s({aa,16}),fto0s) then Abort("peek4s({aa,16}) error\n") end if
--end if

if showprogress then puts(1,"9\n") end if
--object o
--  o="7"
--  mem_set(a,o,0)  -- test error (as expected 11/8/07)
    b = allocate(4)
    mem_set(b,4,4)      -- b=4444
    mem_copy(a,b,4)     -- a=4444 (plus 8 bytes garbage)
    mem_set(b,3,4)      -- b=3333
    mem_copy(a,b,3)     -- a=3334
    mem_set(b,2,4)      -- b=2222
    mem_copy(a,b,2)     -- a=2234
    mem_set(b,1,4)      -- b=1111
    mem_copy(a,b,1)     -- a=1234
    mem_set(b,0,4)      -- b=0000
    mem_copy(a,b,0)     -- a unchanged
    if not equal(peek({a,4}),{1,2,3,4}) then Abort("not equal(peek({a,4}),{1,2,3,4})\n") end if
    free(a)
    free(b)

if showprogress then puts(1,"10\n") end if

if not equal(sprint(cos(99)),"0.03982088039") then Abort("cos(99) error\n") end if
if not equal(sprint(sin(99)),"-0.9992068342") then Abort("sin(99) error\n") end if
if not equal(sprint(sqrt(99)),"9.949874371") then Abort("sqrt(99) error\n") end if
if not equal(sprint(tan(99)),"-25.09253498") then Abort("tan(99) error\n") end if
if not equal(sprint(arctan(99)),"1.56069566") then Abort("arctan(99) error\n") end if
if not equal(int_to_bytes(104732),{28,153,1,0}) then Abort("int_to_bytes error\n") end if
if not equal(bytes_to_int({28,153,1,0}),104732) then Abort("bytes_to_int error\n") end if
if not equal(int_to_bits(177,8),{1,0,0,0,1,1,0,1}) then Abort("int_to_bits error\n") end if
if not equal(bits_to_int({1,0,0,0,1,1,0,1}),177) then Abort("bits_to_int error\n") end if

if showprogress then puts(1,"11\n") end if
if not RDS then -- standard RDS routines mangle atoms...
    if lower({74.5, 104.01})!={74.5,104.01} then Abort("leave lower alone! ;-))\n") end if
    if upper({74.5, 104.01})!={74.5,104.01} then Abort("leave upper alone! ;-))\n") end if
end if
if lower('@')!='@' then Abort("lower('@')!='@'\n") end if
if lower('A')!='a' then Abort("lower('A')!='a'\n") end if
if lower('Z')!='z' then Abort("lower('Z')!='a'\n") end if
if lower('[')!='[' then Abort("lower('[')!='['\n") end if
if upper('`')!='`' then Abort("upper('`')!='`'\n") end if
if upper('a')!='A' then Abort("upper('a')!='A'\n") end if
if upper('z')!='Z' then Abort("upper('z')!='Z'\n") end if
if upper('{')!='{' then Abort("upper('{')!='{'\n") end if
if not equal(lower("FRED"),"fred") then Abort("lower(FRED)!=fred\n") end if
if not equal(upper("fred"),"FRED") then Abort("upper(fred)!=FRED\n") end if
constant
   SPECIAL_UPPER = "ÄÖÜ",   -- {196,214,220}
   SPECIAL_LOWER = "äöü"    -- {228,246,252}
if not RDS then -- standard rds routines only deal with A..Z
--?SPECIAL_UPPER
--?SPECIAL_LOWER
--?upper(SPECIAL_LOWER)
--?lower(SPECIAL_UPPER)
if not equal(SPECIAL_UPPER,upper(SPECIAL_LOWER)) then Abort("upper(SPECIAL) error\n") trace(1) end if
if SPECIAL_UPPER!=upper(SPECIAL_LOWER) then Abort("upper(SPECIAL) error\n") trace(1) end if
if not equal(SPECIAL_LOWER,lower(SPECIAL_UPPER)) then Abort("lower(SPECIAL) error\n") trace(1) end if
if SPECIAL_LOWER!=lower(SPECIAL_UPPER) then Abort("lower(SPECIAL) error\n") trace(1) end if
end if
if showprogress then puts(1,"12\n") end if

integer i i=5
function f1() return i+1 end function
constant k=f1()
if k!=6 then Abort("k!=6\n") end if

if showprogress then puts(1,"13\n") end if

-- 1073741824 caused first an attempted sequence op [inside arwen]
--  and later an unassigned var (one of them _is_ #40000000). [both fixed]
atom result
sequence s
    s = {1073741824,268435456,0,65536}
    result = 0
    for idx = 1 to length(s) do
        result = or_bits(result, s[idx])
    end for
--DEV re-try this (2/2/16)
--if machine_bits()!=64 then --DEV as above
--  if result!=1342242816 then Abort("result!=1342242816\n") end if
--end if
    -- same, shown in hex:
    s = {#40000000,#10000000,0,#10000}
    result = 0
    for idx = 1 to length(s) do
        result = or_bits(result, s[idx])
    end for
--if machine_bits()!=64 then --DEV as above
--  if result!=#50010000 then Abort("result!=#50010000\n") end if
--end if
--? result
--machine_proc(60,1)    -- flush(1)
--if getc(0) then end if
if showprogress then puts(1,"14\n") end if

sequence charset
      charset=repeat(13,2)
      charset[1]=2          -- one of these (forget which)
      charset[1..1]=2       --  caused a memory leak.

if showprogress then puts(1,"15\n") end if

-- test forward function calls
function f(integer i)
    return i
end function
    if f(1)+f(2)+f(3) != 6 then Abort("f(1)+f(2)+f(3)!=6") end if
--/**/  if g(1)+g(2)+g(3) != 6 then Abort("g(1)+g(2)+g(3)!=6") end if
function g(integer i)
    return i
end function

if showprogress then puts(1,"16\n") end if

object d, e = iff(platform()=WINDOWS?"C:\\":"/usr/local")
    d=current_dir()
    if not chdir(e) then Abort(sprintf("not chdir(\"%s\")\n",{e})) end if
    if not equal(current_dir(),e) then Abort(sprintf("not equal(current_dir()[%s],\"%s\")\n",{current_dir(),e})) end if
    -- (hint: notice that the next two lines have no quotes and a full stop)
    if not chdir(d) then Abort(sprintf("not chdir(%s).\n",{d})) end if
    if not equal(current_dir(),d) then Abort(sprintf("not equal(current_dir()[%s],%s).\n",{current_dir(),d})) end if

if showprogress then puts(1,"17\n") end if

integer A A=0
if A or (A<1 and not A) then        -- opSnot test case
    A = 1
end if
if A!=1 then ?9/0 end if

if showprogress then puts(1,"18\n") end if

integer x, y
x=-#40000000
atom work
    work = 0-x
if work then x=0 end if
if x!=0 then ?9/0 end if

if showprogress then puts(1,"19\n") end if
atom z
procedure setYZ(object a, object b)
    y=a z=b
end procedure
setYZ(2,2.5)
    x = y*5         -- opMuli
if x!=10 then Abort("x!=10\n") end if
--  x = z*5         --   ""  error handling test 
    x = 8/2         -- opDivi2
if x!=4 then Abort("x!=4\n") end if
--  x = 7/2         --   ""  error handling test
    y = 8/4         -- opDiviii
if y!=2 then Abort("y!=2\n") end if
--  y = 7/3         --   ""  error handling test

if showprogress then puts(1,"20\n") end if
object o
    o=2
    x=14/o          -- opDivi
if x!=7 then Abort("x!=7\n") end if
--  x=14/17         --   ""  error handling test

if showprogress then puts(1,"21\n") end if
if not_bits(-1)!=0 then Abort("not_bits(-1)!=0\n") end if
if not_bits(0)!=-1 then Abort("not_bits(0)!=-1\n") end if
--if not equal(and_bits(not_bits({#0FFFFFFF, #7000, #05}), #0000FFFF),{#00000000, #00008FFF, #0000FFFA}) then Abort("?9/0(0)") end if
--/**/ o = sq_and_bits(sq_not_bits({#0FFFFFFF, #7000, #05}), #0000FFFF)     --/*
       o = and_bits(not_bits({#0FFFFFFF, #7000, #05}), #0000FFFF)           --*/
if not equal(o,{#00000000, #00008FFF, #0000FFFA}) then Abort("?9/0(1)\n") end if
if not equal(and_bits(not_bits(#0FFFFFFF), #0000FFFF),#00000000) then Abort("?9/0(2)\n") end if
if not equal(and_bits(not_bits(#7000), #0000FFFF),#00008FFF) then Abort("?9/0(3)\n") end if
if not equal(and_bits(not_bits(#05), #0000FFFF), #0000FFFA) then Abort("?9/0(4)\n") end if

if showprogress then puts(1,"22\n") end if
-- Number bases (not supported on RDS Eu!)
--/**/  if #f!=15 then ?9/0 end if
--/**/  if #ffffffff!=#FFFFFFFF then Abort("#ffffffff!=#FFFFFFFF") end if
--/**/  if 0(16)ffffffff!=#FFFFFFFF then Abort("?0(16)ffffffff!=#FFFFFFFF") end if
--/**/  if 0o37777777777!=#FFFFFFFF then Abort("?0o37777777777!=#FFFFFFFF") end if
--/**/  if 0(8)37777777777!=#FFFFFFFF then Abort("?0(8)37777777777!=#FFFFFFFF") end if
--/**/  if 0ob377377377377!=#FFFFFFFF then Abort("?0ob377377377377!=#FFFFFFFF") end if
--/**/  if 0b11111111111111111111111111111111!=#FFFFFFFF then Abort("?0b11111111111111111111111111111111!=#FFFFFFFF") end if
--/**/  if 0(2)11111111111111111111111111111111!=#FFFFFFFF then Abort("?0(2)11111111111111111111111111111111!=#FFFFFFFF") end if
--/**/  if 0b111!=7 then Abort("?0b111!=7") end if
--/**/  if 255!=255 then Abort("!=255") end if
--/**/  if #FF!=255 then Abort("#FF!=255") end if
--/**/  if 0xFF!=255 then Abort("0xFF!=255") end if
--/**/  if 0(16)FF!=255 then Abort("0(16)FF!=255") end if
--/**/  if 0b11111111!=255 then Abort("0b11111111!=255") end if
--/**/  if 0(2)11111111!=255 then Abort("0(2)11111111!=255") end if
--/**/  if 0o377!=255 then Abort("0o377!=255") end if
--/**/  if 0ob377!=255 then Abort("0ob377!=255") end if
--/**/  if 0(8)377!=255 then Abort("0(8)377!=255") end if
--/**/  if 0(10)255!=255 then Abort("0(10)255!=255") end if
--/**/  if 0d255!=255 then Abort("0d255!=255") end if
--/**/  if #ff!=255 then Abort("#ff!=255") end if
--/**/  if #fF!=255 then Abort("#fF!=255") end if
--/**/  if #Ff!=255 then Abort("#Ff!=255") end if
--/**/  if 0xff!=255 then Abort("0xff!=255") end if
--/**/  if 0xfF!=255 then Abort("0xfF!=255") end if
--/**/  if 0xFf!=255 then Abort("0xFf!=255") end if
--/**/  if 0(16)ff!=255 then Abort("0(16)ff!=255") end if
--/**/  if 0(16)fF!=255 then Abort("0(16)fF!=255") end if
--/**/  if 0(16)Ff!=255 then Abort("0(16)Ff!=255") end if
--/**/  --?0(1)10   -- not supported
if showprogress then puts(1,"23\n") end if

-- Given that I had to support base 2, 8, 10, and 16, it was just as easy to support everything inbetween.
-- Fair enough there is probably very limited use for ten of the bases, but who knows someone might have
-- a lock with 7 cylinders in a hotel with 5 stories.

--/**/  if 0(2)10!=2 then Abort("0(2)10!=2") end if
--/**/  if 0(3)10!=3 then Abort("0(3)10!=3") end if
--/**/  if 0(4)10!=4 then Abort("0(4)10!=4") end if
--/**/  if 0(5)10!=5 then Abort("0(5)10!=5") end if
--/**/  if 0(6)10!=6 then Abort("0(6)10!=6") end if
--/**/  if 0(7)10!=7 then Abort("0(7)10!=7") end if
--/**/  if 0(8)10!=8 then Abort("0(8)10!=8") end if
--/**/  if 0(9)10!=9 then Abort("0(9)10!=9") end if
--/**/  if 0(10)10!=10 then Abort("0(10)10!=10") end if
--/**/  if 0(11)10!=11 then Abort("0(11)10!=11") end if
--/**/  if 0(12)10!=12 then Abort("0(12)10!=12") end if
--/**/  if 0(13)10!=13 then Abort("0(13)10!=13") end if
--/**/  if 0(14)10!=14 then Abort("0(14)10!=14") end if
--/**/  if 0(15)10!=15 then Abort("0(15)10!=15") end if
--/**/  if 0(16)10!=16 then Abort("0(16)10!=16") end if
--/**/  if 0(2)11111111!=255 then Abort("0(2)11111111!=255") end if
--/**/  if 0(3)100110!=255 then Abort("0(3)100110!=255") end if
--/**/  if 0(4)3333!=255 then Abort("0(4)3333!=255") end if
--/**/  if 0(5)2010!=255 then Abort("0(5)2010!=255") end if
--/**/  if 0(6)1103!=255 then Abort("0(6)1103!=255") end if
--/**/  if 0(7)513!=255 then Abort("0(7)513!=255") end if
--/**/  if 0(8)377!=255 then Abort("0(8)377!=255") end if
--/**/  if 0(9)313!=255 then Abort("0(9)313!=255") end if
--/**/  if 0(10)255!=255 then Abort("0(10)255!=255") end if
--/**/  if 0(11)212!=255 then Abort("0(11)212!=255") end if
--/**/  if 0(12)193!=255 then Abort("0(12)193!=255") end if
--/**/  if 0(13)168!=255 then Abort("0(13)168!=255") end if
--/**/  if 0(14)143!=255 then Abort("0(14)143!=255") end if
--/**/  if 0(15)120!=255 then Abort("0(15)120!=255") end if
--/**/  if 0(16)FF!=255 then Abort("0(16)FF!=255") end if
--/**/  --?0(17)10  -- not supported
if showprogress then puts(1,"24\n") end if

-- embedded hex chars in strings (and not really necessary, squotes to match)
--/**/  if not equal("st\#72ing\n","string\n") then Abort("#72!=r") end if
--/**/  if not equal('\#62'&"e cool","be cool") then Abort("#62!=b") end if
if showprogress then puts(1,"25\n") end if


--Added 29/12/2011:
-- bugfix: getting "probable logic error" below, but only because the code is not
--         being emitted. Forget trying to reason about what the compiler knows of
--         the contents of flatsym; the problem is no code is emitted for the line
--         si = flatsym[2], hence the type system (pltype.e et al) still considers
--         si a sequence from the outer "if sequence(si) then", theoretically it
--         /may/ be correct, but the warning (under emitON=0) is plain wrong.
--         I do accept that in eg:
--              constant DEBUG=0
--              object s = "string"
--              if DEBUG then s=0 end if
--              if string(s) then
--         We still get the warning as emitON returns to 1 at the end if (of the
--          "if DEBUG" statement), but no simple test exists to avoid that, afaics.
sequence flatsym = {{},1}

object si
    si = flatsym[1]
    if sequence(si) then
        if 0 then
            si = flatsym[2]
            if not sequence(si) then ?9/0 end if
                --          ^ getting "probable logic error" here.
        end if
--      if not sequence(si) then ?9/0 end if -- (error here is ok/unavoidable)
    end if

-- Added 08/01/2012:
-- this got broke doing newParm:

sequence pkey

function look_for_gnidx(sequence name, integer node)
    if node=1 then
        pkey = name
        return 0
    end if
    return 1
end function
constant r_look_for_gnidx = routine_id("look_for_gnidx")
if r_look_for_gnidx then end if -- (suppress unused warning)

-- Added 29/01/2012
-- the linebreak mid-opMkSq saved eax after the opLnp
--  (DEV oops, broke -test (pie))
--with profile
with trace

atom xSystemTime

    xSystemTime = allocate(4)
    poke4(xSystemTime,2011)

--DEV... (compiler blow up without the X, with "type check failure, opcode is {213,..}")
function peek2uX(atom addr)
    return peek(addr)+peek(addr+1)*256
end function

sequence res

    res = {peek2uX(xSystemTime),
           peek2uX(xSystemTime)}
if res!={2011,2011} then ?9/0 end if
--without profile

--23/1/17 (from IDE.exw, crash in Or_K_ridt() when compiling[/interpreting] - the S_Slink
--         chains are "backwards" when called mid-target, so it (Or_K_ridt) now uses a 
--         modified scanning technique [+1 and ignore S_Slink!].)
atom r_click_OpenRecentFile
procedure click_OpenRecentFile(integer Self, integer Event)
    r_click_OpenRecentFile = routine_id("click_OpenRecentFile")
end procedure
click_OpenRecentFile(0, 0)
if r_click_OpenRecentFile!=routine_id("click_OpenRecentFile") then ?9/0 end if

--24/1/17:
include builtins\serialize.e
s = {"Pete",{1,0,-1},PI,-PI}
if s!= deserialize(serialize(s)) then ?9/0 end if

