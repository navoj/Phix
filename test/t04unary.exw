--
-- t04unary.exw
--
-- Phix tests for all aspects of unary op (-, not, and possibly +) handling.
--
-- See seqop.e for tests on strings and sequences
--
procedure Abort(sequence msg) puts(1,msg) if getc(0) then end if abort(1) end procedure

function uminus(atom o)
    return -o
end function

function unot(atom o)
    return not o
end function

integer i,j
atom n,m
atom a,b
--string s,t
--sequence p,q
object O,P
--integer RDS
--atom t0 t0=time()
--  RDS=1

    if (not 0)!=1 then Abort("(not 0)!=1") end if
    if (not 1)!=0 then Abort("(not 1)!=0") end if
    if (1=1)!=1 then Abort("(1=1)!=1") end if
    if (not (0=1))!=1 then Abort("(not (0=1))!=1") end if
    if (not 0=1)!=1 then Abort("(not 0=1)!=0") end if
    if ((not 0)=1)!=1 then Abort("((not 0)=1)!=0") end if   -- (same as prev line)
    if (not (1=1))!=0 then Abort("(not (1=1))!=0") end if
    if (not 1=1)!=0 then Abort("(not 1=1)!=0") end if
    if ((not 1)=1)!=0 then Abort("((not 1)=1)!=0") end if   -- (same as prev line)
    if (1=2)!=0 then Abort("(1=2)!=0") end if
    if (not (1=2))!=1 then Abort("(not (1=2))!=1") end if
    if (not 1=2)!=0 then Abort("(not 1=2)!=0") end if
    if ((not 1)=2)!=0 then Abort("((not 1)=2)!=0") end if   -- (same as prev line)
--for x=1 to 10000 do
    i=1
    j=-i
    if j!=uminus(i) then Abort("j!=uminus(i)\n") end if
    if uminus(i)!=j then Abort("uminus(i)!=j\n") end if
    if -j=uminus(i) then Abort("-j=uminus(i)\n") end if
    if uminus(i)=-j then Abort("uminus(i)=-j\n") end if
    if j!=-i then Abort("j!=-i\n") end if
    if -j!=i then Abort("j!=-i\n") end if

    n=1
--DEV
--  j=floor(-n)
--  j=-n
    if j!=uminus(n) then Abort("j!=uminus(n)\n") end if
    if -j=uminus(n) then Abort("-j=uminus(n)\n") end if
    if j!=-n then Abort("j!=-n\n") end if
    if -j!=n then Abort("-j!=n\n") end if
    if n!=-j then Abort("n!=-j\n") end if
    if -n!=j then Abort("-n!=j\n") end if

    n=1.5
    m=-n
    if m!=uminus(n) then Abort("m!=uminus(n)\n") end if
    if -m=uminus(n) then Abort("-m=uminus(n)\n") end if
    if m!=-n then Abort("j!=-n\n") end if

    a=1.0
    b=-1
    if a!=uminus(b) then Abort("a!=uminus(b)\n") end if
    if -b=uminus(a) then Abort("-b=uminus(a)\n") end if
    if a!=-b then Abort("a!=-b\n") end if

    O=i
    if j!=uminus(O) then Abort("j!=uminus(O)\n") end if
    if -j=uminus(O) then Abort("-j=uminus(O)\n") end if
    if j!=-O then Abort("j!=-O\n") end if

    O=n
    if m!=uminus(O) then Abort("m!=uminus(O)\n") end if
    if -m=uminus(O) then Abort("-m=uminus(O)\n") end if
    if m!=-O then Abort("m!=-O\n") end if

    P=m
    if P!=uminus(O) then Abort("P!=uminus(O)\n") end if
    if -P=uminus(O) then Abort("-P=uminus(O)\n") end if
    if P!=-O then Abort("P!=-O\n") end if
    if -P!=O then Abort("-P!=O\n") end if

    i=1
    j=not i -- 0
    if j!=unot(i) then Abort("j!=unot(i)\n") end if
    if unot(j)!=i then Abort("unot(j)!=i\n") end if
    if not (j=unot(i)) then Abort("not (j=unot(i))\n") end if
    if not j=unot(i) then Abort("not j=unot(i)\n") end if
    if (not j)=unot(i) then Abort("(not j)=unot(i)\n") end if   -- (same as prev line)
    if unot(i)=not j then Abort("unot(i)=not j\n") end if
    if j!=not i then Abort("j!=not i\n") end if
    if not (j!=i) then Abort("not (j!=i)\n") end if
    if not j!=i then Abort("not j!=i\n") end if
    if (not j)!=i then Abort("(not j)!=i\n") end if             -- (same as prev line)
    O=i
    if j!=unot(O) then Abort("j!=unot(O)\n") end if
    if not (j=unot(O)) then Abort("not (j=unot(O))\n") end if
    if not j=unot(O) then Abort("not j=unot(O)\n") end if
    if (not j)=unot(O) then Abort("(not j)=unot(O)\n") end if   -- (same as prev line)
    if j!=not O then Abort("j!=not O\n") end if

    i=0
    j=not i -- 1
    if j!=unot(i) then Abort("j!=unot(i)\n") end if
    if unot(j)!=i then Abort("unot(j)!=i\n") end if
    if not (j=unot(i)) then Abort("not (j=unot(i))\n") end if
    if not j=unot(i) then Abort("not j=unot(i)\n") end if
    if (not j)=unot(i) then Abort("(not j)=unot(i)\n") end if   -- (same as prev line)
    if unot(i)=not j then Abort("unot(i)=not j\n") end if
    if j!=not i then Abort("j!=not i\n") end if
    if not (j!=i) then Abort("not (j!=i)\n") end if
    if not j!=i then Abort("not j!=i\n") end if
    if (not j)!=i then Abort("(not j)!=i\n") end if             -- (same as prev line)
    O=i
    if j!=unot(O) then Abort("j!=unot(O)\n") end if
    if not (j=unot(O)) then Abort("not j=unot(O)\n") end if
    if not j=unot(O) then Abort("not j=unot(O)\n") end if
    if (not j)=unot(O) then Abort("(not j)=unot(O)\n") end if   -- (same as prev line)
    if j!=not O then Abort("j!=not O\n") end if

--end for


-- Added 08/06/2012: Inlining more maths (in Expr()) exposed a problem
--                   whereby -MININT was being left tagged an integer
--                   (when it is of course equal to MAXINT+1, an atom)

constant MAXINT = #3FFFFFFF,
         MININT = -MAXINT-1

integer dmax
    dmax = MININT
    dmax = dmax -- suppress unused warnings

atom p
procedure NewDoubleSym(atom d)
    p = d
end procedure

    NewDoubleSym(-MININT)


