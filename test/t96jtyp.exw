--
-- t96jtyp
--
-- See pilxl.e/opJtyp, specifically "if flag!=-1 then". This was designed 
--  to find a problem with that code, although in fact I was having trouble
--  with a bug in [gEtyp] settings. To see the potential optimising power 
--  that the new opJtyp handling has, run "p -dt96" and examine list.asm.
--
--  Note that while X,Y somewhat verify the correct result is obtained,
--	 they do not verify that only desired tests have been emitted;
--	 for that you need to check list.asm's binary vs the comments.
--	 (X,Y are a very weak test: in the and_bits(stype,T_integer) mods,
--	  I managed to get atom() upside down, but this sailed through,
--	  because it was either completely optimised out or was always
--	  doing the right thing but at exactly the wrong time...)
--
--  Tip: what you should see is full-on tests for b1111 (ie cmp h4 and,
--	 except for integer(), tests on the type byte) whereas eg
--	 string(b1001) can just test for "not integer" (cmp h4), and
--	 string(b1100) can just test for 0x82 (cmp h4 not needed), and
--	 string(b1000) as noted needs no test whatsoever, and lastly
--	 string(b0xxx), always false, gets completely optimised away.
--
--/**/with console

constant I=1, N=1.5, P={}, S="a"
--/* For testing on RDS Eu:
type string(object s)
    if not sequence(s) then return 0 end if
    return length(s)
end type
--*/
integer X,Y	-- 60 bits (30 each), to verify the right things got done.
	X=0 Y=0

procedure x(object b0001,   -- only ever passed I
	    object b0010,   -- only ever passed N
	    object b0011,   -- passed I and N
	    object b0100,   -- only ever passed P
	    object b0101,   -- passed P and I
	    object b0110,   -- passed P and N
	    object b0111,   -- passed P,N, and I
	    object b1000,   -- only ever passed S
	    object b1001,   -- passed S and I
	    object b1010,   -- passed S and N
	    object b1011,   -- passed S,N, and I
	    object b1100,   -- passed S and P
	    object b1101,   -- passed S,P, and I
	    object b1110,   -- passed S,P, and N
	    object b1111)   -- passed S,P,N, and I

    if	integer(b0001) then X=or_bits(X,#00000001) end if   -- no test, just code
    if	   atom(b0001) then X=or_bits(X,#00000002) end if   -- no test, just code
    if sequence(b0001) then X=or_bits(X,#00000004) end if   -- no test, no code
    if	 string(b0001) then X=or_bits(X,#00000008) end if   -- no test, no code

    if	integer(b0010) then X=or_bits(X,#00000010) end if   -- no test, no code
    if	   atom(b0010) then X=or_bits(X,#00000020) end if   -- no test, just code
    if sequence(b0010) then X=or_bits(X,#00000040) end if   -- no test, no code
    if	 string(b0010) then X=or_bits(X,#00000080) end if   -- no test, no code

    if	integer(b0011) then X=or_bits(X,#00000100) end if   -- test and code
    if	   atom(b0011) then X=or_bits(X,#00000200) end if   -- no test, just code
    if sequence(b0011) then X=or_bits(X,#00000400) end if   -- no test, no code
    if	 string(b0011) then X=or_bits(X,#00000800) end if   -- no test, no code

    if	integer(b0100) then X=or_bits(X,#00001000) end if   -- no test, no code
    if	   atom(b0100) then X=or_bits(X,#00002000) end if   -- no test, no code
    if sequence(b0100) then X=or_bits(X,#00004000) end if   -- no test, just code
    if	 string(b0100) then X=or_bits(X,#00008000) end if   -- no test, no code

    if	integer(b0101) then X=or_bits(X,#00010000) end if   -- test and code
    if	   atom(b0101) then X=or_bits(X,#00020000) end if   -- test and code
    if sequence(b0101) then X=or_bits(X,#00040000) end if   -- test and code
    if	 string(b0101) then X=or_bits(X,#00080000) end if   -- no test, no code

    if	integer(b0110) then X=or_bits(X,#00100000) end if   -- no test, no code
    if	   atom(b0110) then X=or_bits(X,#00200000) end if   -- test and code
    if sequence(b0110) then X=or_bits(X,#00400000) end if   -- test and code
    if	 string(b0110) then X=or_bits(X,#00800000) end if   -- no test, no code

    if	integer(b0111) then X=or_bits(X,#01000000) end if   -- test and code
    if	   atom(b0111) then X=or_bits(X,#02000000) end if   -- test and code
    if sequence(b0111) then X=or_bits(X,#04000000) end if   -- test and code
    if	 string(b0111) then X=or_bits(X,#08000000) end if   -- no test, no code

    if	integer(b1000) then Y=or_bits(Y,#00000001) end if   -- no test, no code
    if	   atom(b1000) then Y=or_bits(Y,#00000002) end if   -- no test, no code
    if sequence(b1000) then Y=or_bits(Y,#00000004) end if   -- no test, just code
    if	 string(b1000) then Y=or_bits(Y,#00000008) end if   -- no test, just code

    if	integer(b1001) then Y=or_bits(Y,#00000010) end if   -- test and code
    if	   atom(b1001) then Y=or_bits(Y,#00000020) end if   -- test and code
    if sequence(b1001) then Y=or_bits(Y,#00000040) end if   -- test and code
    if	 string(b1001) then Y=or_bits(Y,#00000080) end if   -- test and code

    if	integer(b1010) then Y=or_bits(Y,#00000100) end if   -- no test, no code
    if	   atom(b1010) then Y=or_bits(Y,#00000200) end if   -- test and code
    if sequence(b1010) then Y=or_bits(Y,#00000400) end if   -- test and code
    if	 string(b1010) then Y=or_bits(Y,#00000800) end if   -- test and code

    if	integer(b1011) then Y=or_bits(Y,#00001000) end if   -- test and code
    if	   atom(b1011) then Y=or_bits(Y,#00002000) end if   -- test and code
    if sequence(b1011) then Y=or_bits(Y,#00004000) end if   -- test and code
    if	 string(b1011) then Y=or_bits(Y,#00008000) end if   -- test and code

    if	integer(b1100) then Y=or_bits(Y,#00010000) end if   -- no test, no code
    if	   atom(b1100) then Y=or_bits(Y,#00020000) end if   -- no test, no code
    if sequence(b1100) then Y=or_bits(Y,#00040000) end if   -- no test, just code
    if	 string(b1100) then Y=or_bits(Y,#00080000) end if   -- test and code

    if	integer(b1101) then Y=or_bits(Y,#00100000) end if   -- test and code
    if	   atom(b1101) then Y=or_bits(Y,#00200000) end if   -- test and code
    if sequence(b1101) then Y=or_bits(Y,#00400000) end if   -- test and code
    if	 string(b1101) then Y=or_bits(Y,#00800000) end if   -- test and code

    if	integer(b1110) then Y=or_bits(Y,#01000000) end if   -- no test, no code
    if	   atom(b1110) then Y=or_bits(Y,#02000000) end if   -- test and code
    if sequence(b1110) then Y=or_bits(Y,#04000000) end if   -- test and code
    if	 string(b1110) then Y=or_bits(Y,#08000000) end if   -- test and code

    if	integer(b1111) then X=or_bits(X,#10000000) end if   -- test and code
    if	   atom(b1111) then X=or_bits(X,#20000000) end if   -- test and code
    if sequence(b1111) then Y=or_bits(Y,#10000000) end if   -- test and code
    if	 string(b1111) then Y=or_bits(Y,#20000000) end if   -- test and code

end procedure

--b0001,b0010,b0011,b0100,b0101,b0110,b0111,b1000,b1001,b1010,b1011,b1100,b1101,b1110,b1111
x(    I,   N ,	  I,  P  ,    I,   N ,	  I, S	 ,    I,   N ,	  I,  P  ,    I,   N ,	  I)
x(    I,   N ,	 N ,  P  ,  P  ,  P  ,	 N , S	 , S   , S   ,	 N , S	 ,  P  ,  P  ,	 N )
x(    I,   N ,	 N ,  P  ,  P  ,  P  ,	P  , S	 , S   , S   , S   , S	 , S   , S   ,	P  )
x(    I,   N ,	 N ,  P  ,  P  ,  P  ,	P  , S	 , S   , S   , S   , S	 , S   , S   , S   )
-- X8	 X7    X6    X5    X4	 X3    X2    Y8    Y7	 Y6    Y5    Y4    Y3	 Y2    X1Y1

procedure Abort(sequence msg) puts(1,msg) if getc(0) then end if abort(1) end procedure
-- if you want you can verify each digit by checking the appropriate group of 4/2 above,
--  or for each column above ask "is it ever int/atm/seq/str?", add up 1/2/4/8 and check
--  the digit (eg X3 means 3rd digit of X), or do what I did and print it first!
if X!=#37674323 then Abort("X!=#37674323\n") end if
if Y!=#3EFCFEFC then Abort("Y!=#3EFCFEFC\n") end if

--printf(1,"X=#%08x, Y=#%08x\n",{X,Y})
--if getc(0) then end if

