--
-- t22cmp.exw
--
-- Phix tests.
--
--/*
This will /not/ run on RDS Eu!
--*/

without warning
constant showprogress = 0

procedure Abort(string msg) puts(1,msg) if getc(0) then end if abort(1) end procedure

function sign(atom a)
--  return compare(a,0)
    if a<0 then return -1 end if
    if a=0 then return  0 end if
                return  1
end function

procedure test()
integer i,j, eflag
atom n,m
string s,t
sequence p,q
object O,P
--atom t0 t0=time() -- needs printf() anyways...

if showprogress then puts(1,"0\n") end if
    if "a" != "a" then Abort("\"a\"!=\"a\")") end if
    if "a" >= "aa" then Abort("\"a\" >= \"ab\"") end if
    if compare("a","b")!=-1 then Abort("compare(\"a\",\"b\")!=-1") end if
    if compare('a','b')!=-1 then Abort("compare(\'a\',\'b\')!=-1") end if
    if compare("b","a")!=1 then Abort("compare(\"b\",\"a\")!=1") end if
    if compare("aa","a")!=1 then Abort("compare(\"aa\",\"a\")!=1") end if
    if compare("aa","b")!=-1 then Abort("compare(\"aa\",\"b\")!=-1") end if
    if compare("a",{'a'})!=0 then Abort("error compare(\"a\",{\'a\'})!=0") end if
if showprogress then puts(1,"1\n") end if

    if not("a"<={'a'}) then Abort("error \"a\" not <= {\'a\'}") end if
    if not("a">={'a'}) then Abort("error \"a\" not >= {\'a\'}") end if
    if "a">{'a'} then Abort("error \"a\">{\'a\'}") end if
    if "a"<{'a'} then Abort("error \"a\"<{\'a\'}") end if
    if compare('a',"a")!=-1 then Abort("error compare(\'a\',\"a\")!=-1") end if     -- ple(0)
    if not('a'<'b') then Abort("error \'a\' not < \'a\'") end if
--  if not('a'<"a") then Abort("error \'a\' not < \"a\"") end if    -- type error (correct)
if showprogress then puts(1,"2\n") end if
    O='a'
    P="a"
    if not(O<P) then Abort("error \'a\' not < \"a\"") end if    -- Warning: type error (always false)
    eflag=1
    if O<P then eflag=0 end if                                  -- Warning: type error (always true)
    if eflag then Abort("error \'a\' < \"a\" does not clear eflag") end if
    if O>P then Abort("error \'a\' > \"a\"") end if             -- Warning: type error (always false)
--  if not("a">'a') then Abort("error \"a\" not > \'a\'") end if    -- type error (correct)
    if not(P>O) then Abort("error \"a\" not > \'a\'") end if    -- Warning: type error (always false)
    eflag=1
    if P>O then eflag=0 end if                      -- Warning: type error (always true)
    if eflag then Abort("error \"a\" > \'a\' does not clear eflag") end if
    if P<O then Abort("error \"a\" < \'a\'") end if -- Warning: type error (always false)
if showprogress then puts(1,"3\n") end if

--  if 'a'>="a" then Abort("error \'a\'>=\"a\"") end if             -- type error (correct)
    if O>=P then Abort("error \'a\'>=\"a\"") end if -- Warning: type error (always false)
    eflag=1
    if O<=P then eflag=0 end if                     -- Warning: type error (always true)
    if eflag then Abort("error \'a\' <= \"a\" does not clear eflag") end if
--  if "a"<='a' then Abort("error \"a\"<=\'a\'") end if             -- type error (correct)
    if P<=O then Abort("error \"a\"<=\'a\'") end if -- Warning: type error (always false)
    eflag=1
    if P>=O then eflag=0 end if                     -- Warning: type error (always true)
    if eflag then Abort("error \"a\" >= \'a\' does not clear eflag") end if
    if compare("a",'a')!=1 then Abort("error compare(\"a\",\'a\')!=1") end if       -- ple(0)
if showprogress then puts(1,"4\n") end if

    s="fred"
    if s[1]!='f' then Abort("error s[1]!=\'f\'") end if
    if compare(s[1],'f')!=0 then Abort("error compare(s[1],\'f\')!=0") end if
    if compare(s[1],'e')!=1 then Abort("error compare(s[1],\'e\')!=1") end if
    if compare(s[1],'g')!=-1 then Abort("error compare(s[1],\'g\')!=-1") end if

if showprogress then puts(1,"5\n") end if

    j=1
    i=-j
    if compare(1,1)!=0 then Abort("error compare(1,1)!=0\n") end if
    if compare(1,2)!=-1 then Abort("error compare(1,2)!=-1\n") end if
    if compare(1,1.0)!=0 then Abort("error compare(1,1.0)!=0\n") end if
    if compare(1,"fred")!=-1 then Abort("error compare(1,fred)!=-1\n") end if   -- ple(0)
    if compare("fred",1)!=1 then Abort("error compare(fred,1)!=1\n") end if     -- ple(0)
    if compare(1,{1,2,3})!=-1 then Abort("compare(1,{1,2,3})!=-1\n") end if     -- ple(0)
    if compare({1,2,3},1)!=1 then Abort("compare({1,2,3},1)!=1\n") end if       -- ple(0)
if showprogress then puts(1,"6\n") end if
    
    if compare(1.1,1.1)!=0 then Abort("error compare(1.1,1.1)!=0\n") end if
    if compare(1.1,1.2)!=-1 then Abort("error compare(1.1,1.2)!=-1\n") end if
    if compare(1.2,1.1)!=1 then Abort("error compare(1.2,1.1)!=1\n") end if
    if "fred"!="fred" then Abort("error \"fred\"!=\"fred\"") end if
    if compare("fred","fred")!=0 then Abort("error compare(fred,fred)!=0\n") end if

    if compare("fred","john")!=-1 then Abort("error compare(fred,john)!=-1\n") end if

if showprogress then puts(1,"7\n") end if

    p="fred"
    if p!="fred" then Abort("p!=fred\n") end if
    if compare(p,"fred")!=0 then Abort("compare(p,fred)!=0\n") end if

if showprogress then puts(1,"8\n") end if

    if compare({1,2,{3}},{1,2,{3}})!=0 then Abort("error compare({1,2,{3}},{1,2,{3}}!=0\n") end if
    if compare({1,2,{3}},{1,2,{4}})!=-1 then Abort("error compare({1,2,{3}},{1,2,{4}}!=-1\n") end if
    if compare({1,2,{4}},{1,2,{3}})!=1 then Abort("error compare({1,2,{4}},{1,2,{3}}!=1\n") end if

if showprogress then puts(1,"9\n") end if

    if compare({1},{{1}})=0 then Abort("error compare({1},{{1}})=0\n") end if
    i=1
    j=1
    if compare(i,j)!=0 then Abort("error compare(i,j)!=0 [1,1]\n") end if
    j=2
    if compare(i,j)!=-1 then Abort("error compare(i,j)!=-1 [1,2]\n") end if
    n=1.1
    m=1.1
    if compare(n,m)!=0 then Abort("error compare(n,m)!=0 [1.1,1.1]\n") end if
    m=1.2
    if compare(n,m)=0 then Abort("error compare(n,m)=0 [1.1,1.2]\n") end if

if showprogress then puts(1,"10\n") end if

    s="fred"
    if compare(s,"fred")!=0 then Abort("error compare(s,\"fred\")!=0 [fred]\n") end if
    if compare("fred",s)!=0 then Abort("error compare(\"fred\",s)!=0 [fred]\n") end if
    i=s[1]
    if compare(i,s[1])!=0 then Abort("error compare(i,s[1])!=0\n") end if
    if compare(s[1],i)!=0 then Abort("error compare(s[1],i)!=0\n") end if
    if compare('f',i)!=0 then Abort("error compare('f',i)!=0\n") end if
    if compare(i,'f')!=0 then Abort("error compare(i,'f')!=0\n") end if
    t="jo"
    if compare(s,t)=0 then Abort("error compare(s,t)=0 [fred,jo]\n") end if

if showprogress then puts(1,"11\n") end if

    p={}
    q={}
    if compare(p,q)!=0 then Abort("error compare(p,q)!=0 [{},{}]\n") end if
    p={1}
    if compare(p,q)=0 then Abort("error compare(p,q)=0 [{1},{}]\n") end if
    q={1,2}
    if compare(p,q)=0 then Abort("error compare(p,q)=0 [{1},{1,2}]\n") end if

if showprogress then puts(1,"12\n") end if

    O=1
    P=1
    if compare(O,P)!=0 then Abort("error compare(O,P)!=0 [1,1]\n") end if
    P=2
    if compare(O,P)=0 then Abort("error compare(O,P)=0 [1,2]\n") end if
    O=1.1
    P=1.1
    if compare(O,P)!=0 then Abort("error compare(O,P)!=0 [1.1,1.1]\n") end if
    P=1.2
    if compare(O,P)=0 then Abort("error compare(O,P)=0 [1.1,1.2]\n") end if

if showprogress then puts(1,"13\n") end if

    O="fred"
    P="fred"
    if compare(O,P)!=0 then Abort("error compare(O,P)!=0 [fred,fred]\n") end if
    P="jo"
    if compare(O,P)=0 then Abort("error compare(O,P)=0 [fred,jo]\n") end if
    O={}
    P={}
    if compare(O,P)!=0 then Abort("error compare(O,P)!=0 [{},{}]\n") end if
    O={1}
    if compare(O,P)=0 then Abort("error compare(O,P)=0 [{1},{}]\n") end if
    P={1,2}
    if compare(O,P)=0 then Abort("error compare(O,P)=0 [{1},{1,2}]\n") end if

if showprogress then puts(1,"14\n") end if

    if compare("x","")=0 then Abort("error compare(\"x\",\"\")=0\n") end if
    O="x"
    P=""
    if compare(O,P)=0 then Abort("error compare(O,P)=0 [\"x\",\"\"]\n") end if
    p={""}
    q={{{}}}
    O=p[1]
    P=q[1]
    if compare(O,P)=0 then Abort("error compare(O,P)=0 [\"\",{{}}]\n") end if
    if compare(p[1],q[1])=0 then Abort("error compare(p[1],q[1])=0 [\"\",{{}}]\n") end if

if showprogress then puts(1,"15\n") end if

    p={{{}}}
    q={""}
    O=p[1]
    P=q[1]
    if compare(O,P)=0 then Abort("error compare(O,P)=0 [{{}},\"\"]\n") end if
    if compare(p[1],q[1])=0 then Abort("error compare(p[1],q[1])=0 [{{}},\"\"]\n") end if
    p={-1,0.1,"",{{{}}}}
    q={-1,0.1,"",{{{}}}}

if showprogress then puts(1,"16\n") end if

    for sx=1 to 2 do
        for pi=4 to 4 do
            for qi=3 to 4 do
                O=p[pi]
                P=q[qi]
                if sx=1 and pi=qi then
                    if compare(O,P)!=0 then Abort("error27\n") end if
                    if compare(p[pi],q[qi])!=0 then Abort("error28\n") end if
                else
                    if compare(O,P)=0 then Abort("error29\n") end if
                    if compare(p[pi],q[qi])=0 then Abort("error30\n") end if
                end if
            end for
        end for
        q={2,-0.1,"x",{-1}}
    end for

if showprogress then puts(1,"17\n") end if

    p={1,"fred"}
    if compare("d",p[2][4])!=1 then Abort("error compare(\"d\",p[2][4])!=1 [p={1,fred}]\n") end if
    if compare('d',p[2][4])!=0 then Abort("error compare(\'d\',p[2][4])!=0 [p={1,fred}]\n") end if
    if compare(p[1],-1)!=1 then Abort("error compare(p[1],-1)!=1 [p={1,fred}]\n") end if
    if compare(p[2],"fred")!=0 then Abort("error compare(p[2],fred)!=0 [p={1,fred}]\n") end if

if showprogress then puts(1,"18\n") end if

    if sign(-5)!=-1 then Abort("error sign(-5)!=-1\n") end if
    if sign(-0.1)!=-1 then Abort("error sign(-0.1)!=-1\n") end if
    if sign(0)!=0 then Abort("error sign(0)!=0\n") end if
    if sign(0.1)!=1 then Abort("error sign(0.1)!=1\n") end if
    if sign(55)!=1 then Abort("error sign(55)!=1\n") end if

if showprogress then puts(1,"19\n") end if

--printf(1," rt:%3.2f",{time()-t0})
--if getc(0) then end if
end procedure

test()

-- Added 22/10/09:
--  (bugs in eg compare(a,b)>=3, ie <result of a compare> <relop> <constant not in -1/0/1>)

constant expected = {0,0,0,1,1,1,1,1,0,1,0,0,1,1,0,1,0,0,0,0,0,1,1,1}
without warning
function f(integer a, integer b)
    return {compare(a,b)<-2,
            compare(a,b)<=-2,
            compare(a,b)=-2,
            compare(a,b)!=-2,
            compare(a,b)>=-2,
            compare(a,b)>-2,

            compare(a,b)<2,
            compare(a,b)<=2,
            compare(a,b)=2,
            compare(a,b)!=2,
            compare(a,b)>=2,
            compare(a,b)>2,

            -2<compare(a,b),
            -2<=compare(a,b),
            -2=compare(a,b),
            -2!=compare(a,b),
            -2>=compare(a,b),
            -2>compare(a,b),

            2<compare(a,b),
            2<=compare(a,b),
            2=compare(a,b),
            2!=compare(a,b),
            2>=compare(a,b),
            2>compare(a,b)
           }
end function
with warning

if not equal(f(1,2),expected) then
    ?9/0
end if
if not equal(f(2,1),expected) then
    ?9/0
end if

function f2(integer a, integer b, integer c)
    return {compare(a,b)<c,
            compare(a,b)<=c,
            compare(a,b)=c,
            compare(a,b)!=c,
            compare(a,b)>=c,
            compare(a,b)>c,

            c<compare(a,b),
            c<=compare(a,b),
            c=compare(a,b),
            c!=compare(a,b),
            c>=compare(a,b),
            c>compare(a,b)
           }
end function

-- results from f2(-1/0/1,-1/0/1,-1/0/1); 27 in total:
constant expected2 = {  {0,0,0,1,1,1,1,1,0,1,0,0},
                        {0,1,1,0,1,0,0,1,1,0,1,0},
                        {1,1,0,1,0,0,0,0,0,1,1,1},
                        {0,1,1,0,1,0,0,1,1,0,1,0},
                        {1,1,0,1,0,0,0,0,0,1,1,1},
                        {1,1,0,1,0,0,0,0,0,1,1,1},
                        {0,1,1,0,1,0,0,1,1,0,1,0},
                        {1,1,0,1,0,0,0,0,0,1,1,1},
                        {1,1,0,1,0,0,0,0,0,1,1,1},
                        {0,0,0,1,1,1,1,1,0,1,0,0},
                        {0,0,0,1,1,1,1,1,0,1,0,0},
                        {0,1,1,0,1,0,0,1,1,0,1,0},
                        {0,0,0,1,1,1,1,1,0,1,0,0},
                        {0,1,1,0,1,0,0,1,1,0,1,0},
                        {1,1,0,1,0,0,0,0,0,1,1,1},
                        {0,1,1,0,1,0,0,1,1,0,1,0},
                        {1,1,0,1,0,0,0,0,0,1,1,1},
                        {1,1,0,1,0,0,0,0,0,1,1,1},
                        {0,0,0,1,1,1,1,1,0,1,0,0},
                        {0,0,0,1,1,1,1,1,0,1,0,0},
                        {0,1,1,0,1,0,0,1,1,0,1,0},
                        {0,0,0,1,1,1,1,1,0,1,0,0},
                        {0,0,0,1,1,1,1,1,0,1,0,0},
                        {0,1,1,0,1,0,0,1,1,0,1,0},
                        {0,0,0,1,1,1,1,1,0,1,0,0},
                        {0,1,1,0,1,0,0,1,1,0,1,0},
                        {1,1,0,1,0,0,0,0,0,1,1,1}  }
integer edone
        edone = 0
sequence result
for i=-1 to 1 do
    for j=-1 to 1 do
        for k=-1 to 1 do
            result = f2(i,j,k)
            edone += 1
            if edone>length(expected2)
            or not equal(result,expected2[edone]) then
--              ?edone
--              ?result
--              if getc(0) then end if
                ?9/0
            end if
        end for
    end for
end for
--puts(1,"done\n")
--if getc(0) then end if

