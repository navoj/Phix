--
-- t18equal.exw
--
-- Phix tests for equal().
--

--/* Not required for Phix:
type string(object s)
    if not sequence(s) then return 0 end if
    for i = 1 to length(s) do
        if not integer(s[i]) then return 0 end if
        if s[i] < 0 or s[i] > 255 then return 0 end if
    end for
    return 1
end type
--*/

procedure Abort(string msg) puts(1,msg) if getc(0) then end if abort(1) end procedure

integer RDS
--/**/  RDS=0   --/* Phix 
        RDS=1   --   RDS --*/

integer i,j
atom n,m
string s,t
sequence p,q
object O,P
--atom t0 t0=time()

--for x=1 to 1000000 do
--for x=1 to 10000 do


if not RDS then
    if {1,#7FFFFFFF}!={1,#7FFFFFFF} then Abort("{1,#7FFFFFFF}!={1,#7FFFFFFF}\n") end if
    if "a"!={'a'} then Abort("error \"a\"!={\'a\'}") end if
end if
    if not equal("a",{'a'}) then Abort("error not equal(\"a\",{\'a\'})") end if

    j=1
    i=-j
    if 1!=1 then Abort("error 1!=1\n") end if
    if not equal(1,1) then Abort("error not equal(1,1)\n") end if
    if 1=2 then Abort("error 1=2\n") end if
    if 1!=1.0 then Abort("error 1!=1.0\n") end if

    if 1=1.1 then Abort("error 1=1.1\n") end if
--  if 1!="fred" then Abort("error1\n") end if  -- Compiler issues Type error, naturally enough
--  if 1!={1,2,3} then Abort("error1\n") end if --  ""
    
    if equal(1,2) then Abort("error equal(1,2)\n") end if
    if not equal(1.1,1.1) then Abort("error not equal(1.1,1.1)\n") end if
    if equal(1.1,1.2) then Abort("error equal(1.1,1.2)\n") end if
if not RDS then
    if "fred"!="fred" then Abort("error \"fred\"!=\"fred\"") end if
end if
    if not equal("fred","fred") then Abort("error not equal(fred,fred)\n") end if

    if equal("fred","john") then Abort("error equal(fred,john)\n") end if

    p="fred"
if not RDS then
    if p!="fred" then Abort("p!=fred\n") end if
end if

    if not equal(p,"fred") then Abort("not equal(p,fred)\n") end if

    if not equal({1,2,{3}},{1,2,{3}}) then Abort("error not equal({1,2,{3}},{1,2,{3}}\n") end if
    if equal({1,2,{3}},{1,2,{4}}) then Abort("error equal({1,2,{3}},{1,2,{4}}\n") end if
    if equal({1},{{1}}) then Abort("error {1}={{1}}\n") end if

    i=1
    j=1
    if not equal(i,j) then Abort("error not equal(i,j) [1,1]\n") end if

    j=2
    if equal(i,j) then Abort("error equal(i,j) [1,2]\n") end if
    n=1.1
    m=1.1

    if not equal(n,m) then Abort("error not equal(n,m) [1.1,1.1]\n") end if
    m=1.2
    if equal(n,m) then Abort("error equal(n,m) [1.1,1.2]\n") end if
    s="fred"
    t="fred"
    if not equal(s,t) then Abort("error not equal(s,t) [fred,fred]\n") end if
--  if not RDS then
--      t=s[1]                              -- now (correctly) gives type error
--      if t!=s[1] then Abort("error t!=s[1]\n") end if     --""
--      if s[1]!=t then Abort("error s[1]!=t\n") end if     --""
--  end if
    t="jo"
    if equal(s,t) then Abort("error equal(s,t) [fred,jo]\n") end if
    p={}
    q={}
    if not equal(p,q) then Abort("error not equal(p,q) [{},{}]\n") end if
    p={1}
    if equal(p,q) then Abort("error equal(p,q) [(1),{}]\n") end if
    q={1,2}
    if equal(p,q) then Abort("error equal(p,q) [{1},{1,2}]\n") end if

    O=1
    P=1
    if not equal(O,P) then Abort("error not equal(O,P) [1,1]\n") end if
    P=2
    if equal(O,P) then Abort("error equal(O,P) [1,2]\n") end if
    O=1.1
    P=1.1
    if not equal(O,P) then Abort("error not equal(O,P) [1.1,1.1]\n") end if
    P=1.2
    if equal(O,P) then Abort("error equal(O,P) [1.1,1.2]\n") end if
    O="fred"
    P="fred"
    if not equal(O,P) then Abort("error not equal(O,P) [fred,fred]\n") end if
    P="jo"
    if equal(O,P) then Abort("error equal(O,P) [fred,jo]\n") end if
    O={}
    P={}
    if not equal(O,P) then Abort("error not equal(O,P) [{},{}]\n") end if
    O={1}
    if equal(O,P) then Abort("error equal(O,P) [{1},{}]\n") end if
    P={1,2}
    if equal(O,P) then Abort("error equal(O,P) [{1},{1,2}]\n") end if

    if equal("x","") then Abort("error \"x\"=\"\"\n") end if
    O="x"
    P=""
    if equal(O,P) then Abort("error equal(O,P) [\"x\",\"\"]\n") end if

    p={""}
    q={{{}}}
    O=p[1]
    P=q[1]
    if equal(O,P) then Abort("error equal(O,P) [\"\",{{}}]\n") end if
    if equal(p[1],q[1]) then Abort("error equal(p[1],q[1]) [\"\",{{{}}}]\n") end if
    p={{{}}}
    q={""}
    O=p[1]
    P=q[1]
    if equal(O,P) then Abort("error equal(O,P) [{{}},\"\"]\n") end if
    if equal(p[1],q[1]) then Abort("error equal(p[1],q[1]) [\"\",{{{}}}]\n") end if
    p={-1,0.1,"",{{{}}}}
    q={-1,0.1,"",{{{}}}}

    for pi=1 to 4 do
        for qi=1 to 4 do
            O=p[pi]
            P=q[qi] --BUG!
            if pi=qi then
                if not equal(O,P) then Abort("error27\n") end if
                if not equal(p[pi],q[qi]) then Abort("error28\n") end if
            else
                if equal(O,P) then Abort("error29\n") end if
--?{pi,qi}
                if equal(p[pi],q[qi]) then Abort("error30\n") end if
            end if
        end for
    end for

    if equal("","x") then Abort("equal(\"\",{-1})\n") end if

    q={2,-0.1,"x",{-1}} -- all change (all different)
    for pi=1 to 4 do
        for qi=1 to 4 do
            O=p[pi]
            P=q[qi]
            if equal(O,P) then Abort("error31\n") end if
            if equal(p[pi],q[qi]) then Abort("error32\n") end if
        end for
    end for
puts(1,"done\n")

--end for

--printf(1," rt:%3.2f\n",{time()-t0})
 
