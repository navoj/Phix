--
-- t25rmdr.exw
--
-- Phix tests for the remainder function.
--
--/**/with console
constant RDS=0
constant showprogress=0
--with trace
procedure Abort(string msg) puts(1,msg) if getc(0) then end if abort(1) end procedure

if showprogress then puts(1,"1\n") end if
if remainder(5,3)!=2 then Abort("remainder(5,3)!=2\n") end if
if remainder(9,4)!=1 then Abort("remainder(9,4)!=1\n") end if
if remainder(15,5)!=0 then Abort("remainder(15,5)!=0\n") end if
if remainder(-27,6)!=-3 then Abort("remainder(-27,6)!=-3\n") end if
if remainder(11.5,2)!=1.5 then Abort("remainder(11.5,2)!=1.5\n") end if
if remainder(-8.8,3.5)<-1.81 then Abort("remainder(-8.8,3.5)<-1.81\n") end if
if remainder(-8.8,3.5)>-1.79 then Abort("remainder(-8.8,3.5)>-1.79\n") end if
if remainder(3.5,-1.5)!=0.5 then Abort("remainder(3.5,-1.5)!=0.5\n") end if
if remainder(5.0,-100)!=5 then Abort("remainder(5.0,-100)!=5\n") end if

if remainder(10,7)!=3 then Abort("remainder(19,7)!=3\n") end if
--31/10/15 (subtle, due to change to ptok.e/completeFloat())
--if remainder(1.2,0.7345)!=0.4655 then Abort("remainder(1.2,0.7345)!=0.4655\n") end if
if sprint(remainder(1.2,0.7345))!="0.4655" then Abort("remainder(1.2,0.7345)!=0.4655\n") end if

if showprogress then puts(1,"2\n") end if
--DEV:
--printf(1,"%f\n",remainder(100,0.1))   -- gives 0.1    ;-((
--printf(1,"%f\n",remainder(100,0.01))  -- gives 0.01   ;-((
--printf(1,"%f\n",remainder(-2.4,1))
--if remainder(-2.4,1)!=-0.4 then Abort("remainder(-2.4,1)!=-0.4\n") end if
-- It won't be, |error| of <1e6 though...
--printf(1,"%f\n",remainder(-2.4,1))    -- -0.400000 (correct)
--
integer k
for i=132 to 7334 by 298 do
    k = remainder(i,16)     -- see list.asm, uses and reg,15 (tee hee!)
end for

--Test procedure
--type fraction(sequence f)
--  return length(f)=2 and atom(f[1]) and atom(f[2])
--end type

--global function f_to_atom(fraction f)
--global function f_to_atom(sequence f)
--  return f[1]/f[2]
--end function

integer prtlf prtlf=0
integer failcount failcount=0
--procedure f_testrem(fraction f1, fraction f2, object res)
procedure f_testrem(object f1, object f2, object res)
atom a1, a2, ares, actres
    if sequence(res) then ares=res[1]/res[2] else ares = res end if
    if sequence(f1) then a1 = f1[1]/f1[2] else a1 = f1 end if
    if sequence(f2) then a2 = f2[1]/f2[2] else a2 = f2 end if

    actres=remainder(a1,a2)
    if not equal(actres,ares) and abs(actres-ares)>1e-6 then
--      printf(1,"ratm(%f,%f) fail: %f not %f\n",{a1,a2,actres,ares})
        puts(1,"fail ")
        failcount+=1
    else
        puts(1,"ok ")
    end if

    prtlf+=1
    if prtlf=16 then
        puts(1,"\n")
        prtlf=0
    end if
--  --
--  -- No need for 1e-6 fudge here! 100% accuracy, all test cases!
--  --
--  if not equal(f_rem(f1,f2),gcd(res)) then ?9/0 end if
end procedure


if remainder(10,7)!=3 then Abort("remainder(10,7)!=3") end if
if not RDS then
-- These fail on Phix, too....
--f_testrem({39,10},{13,10},0)  -- RDS gives remainder(3.9,1.3)=1.3
--f_testrem({100,1},{1,10},0)   -- RDS gives remainder(100,0.1)=0.1
--f_testrem({100,1},{1,100},0)  -- RDS gives remainder(100,00.1)=0.01
--f_testrem({5,1},{2,10},0)     -- RDS gives remainder(5,0.2)=0.2
end if

-- Tests lifted from IBM hursley decimal test suite (remainder function only)

if showprogress then puts(1,"3\n") end if
f_testrem({1,1},{1,1},0)
f_testrem({2,1},{1,1},0)
f_testrem({1,1},{2,1},1)
f_testrem({2,1},{2,1},0)
f_testrem({0,1},{1,1},0)
f_testrem({0,1},{2,1},0)
f_testrem({1,1},{3,1},1)
f_testrem({2,1},{3,1},2)
f_testrem({3,1},{3,1},0)

if showprogress then puts(1,"4\n") end if
f_testrem({24,10},{1,1},{4,10})
f_testrem({24,10},{-1,1},{4,10})
f_testrem({-24,10},{1,1},{-4,10})   -- Is remainder(-2.4,1)=-0.4?
f_testrem({-24,10},{-1,1},{-4,10})
f_testrem({20,1},{20,1},0)
f_testrem({187,1},{187,1},0)

if showprogress then puts(1,"5\n") end if
f_testrem({5,1},{2,1},1)
f_testrem({1,1},{2,1},1)
f_testrem({1,1},{4,1},1)
f_testrem({1,1},{8,1},1)
f_testrem({1,1},{16,1},1)
f_testrem({1,1},{32,1},1)
f_testrem({1,1},{64,1},1)
f_testrem({1,1},{-2,1},1)
f_testrem({1,1},{-4,1},1)
f_testrem({1,1},{-8,1},1)
f_testrem({1,1},{-16,1},1)
f_testrem({1,1},{-32,1},1)

if showprogress then puts(1,"6\n") end if
f_testrem({1,1},{-64,1},1)
f_testrem({-1,1},{2,1},-1)
f_testrem({-1,1},{4,1},-1)
f_testrem({-1,1},{8,1},-1)
f_testrem({-1,1},{16,1},-1)
f_testrem({-1,1},{32,1},-1)
f_testrem({-1,1},{64,1},-1)
f_testrem({-1,1},{-2,1},-1)
f_testrem({-1,1},{-4,1},-1)
f_testrem({-1,1},{-8,1},-1)
f_testrem({-1,1},{-16,1},-1)
f_testrem({-1,1},{-32,1},-1)
f_testrem({-1,1},{-64,1},-1)

if showprogress then puts(1,"7\n") end if
f_testrem({999999999,1},{1,1},0)
f_testrem({9999999994,10},{1,1},{4,10})
f_testrem({9999999995,10},{1,1},{5,10})
f_testrem({9999999999,10},{1,1},{9,10})
f_testrem({999999999999,1000},{1,1},{999,1000})

if showprogress then puts(1,"8\n") end if
f_testrem({5,10},{2,1},{5,10})

f_testrem({5,10},{21,10},{5,10})
f_testrem({5,10},{201,100},{5,10})
f_testrem({5,10},{2001,1000},{5,10})

if showprogress then puts(1,"9\n") end if
f_testrem({1,1},{1,1},0)
f_testrem({1,1},{2,1},1)
f_testrem({1,1},{3,1},1)
f_testrem({1,1},{4,1},1)
f_testrem({1,1},{5,1},1)
f_testrem({1,1},{6,1},1)
f_testrem({1,1},{7,1},1)
f_testrem({1,1},{8,1},1)
f_testrem({1,1},{9,1},1)

if showprogress then puts(1,"10\n") end if
f_testrem({1,1},{10,1},1)
f_testrem({2,1},{1,1},0)
f_testrem({3,1},{1,1},0)
f_testrem({4,1},{1,1},0)
f_testrem({5,1},{1,1},0)
f_testrem({6,1},{1,1},0)
f_testrem({7,1},{1,1},0)
f_testrem({8,1},{1,1},0)
f_testrem({9,1},{1,1},0)
f_testrem({10,1},{1,1},0)

if showprogress then puts(1,"11\n") end if
f_testrem({4,10},{102,100},{4,10})
f_testrem({5,10},{102,100},{5,10})
f_testrem({51,100},{102,100},{51,100})
f_testrem({52,100},{102,100},{52,100})
f_testrem({6,10},{102,100},{6,10})

if showprogress then puts(1,"12\n") end if
f_testrem({-4,10},{102,100},{-4,10})
f_testrem({-5,10},{102,100},{-5,10})
f_testrem({-51,100},{102,100},{-51,100})
f_testrem({-52,100},{102,100},{-52,100})
f_testrem({-6,10},{102,100},{-6,10})

if showprogress then puts(1,"13\n") end if
f_testrem({1,1},{3,1},1)
f_testrem({5,1},{5,1},0)
f_testrem({13,1},{10,1},3)
f_testrem({13,1},{50,1},13)
f_testrem({13,1},{100,1},13)
f_testrem({13,1},{1000,1},13)
f_testrem({13,100},{1,1},{13,100})
f_testrem({133,1000},{1,1},{133,1000})
f_testrem({1033,10000},{1,1},{1033,10000})
f_testrem({1033,1000},{1,1},{33,1000})
f_testrem({1033,100},{1,1},{33,100})
f_testrem({1033,100},{10,1},{33,100})
f_testrem({1033,10},{1,1},{3,10})
f_testrem({133,1},{10,1},3)
f_testrem({1033,1},{10,1},3)
f_testrem({1033,1},{50,1},33)
f_testrem({101,1},{3,1},2)
f_testrem({102,1},{3,1},0)
f_testrem({103,1},{3,1},1)
f_testrem({24,10},{1,1},{4,10})
f_testrem({24,10},{2,1},{4,10})
f_testrem({1,1},{3,10},{1,10})
f_testrem({1,1},{3,10},{1,10})

if showprogress then puts(1,"14\n") end if
f_testrem({5,10},{  5000001,10000000},{5,10})
f_testrem({5,10},{  50000001,100000000},{5,10})
f_testrem({5,10},{  500000001,1000000000},{5,10})
f_testrem({5,10},{  5000000001,10000000000},{5,10})
f_testrem({5,10},{  50000000001,100000000000},{5,10})
f_testrem({5,10},{  4999999,10000000},{1,10000000})
f_testrem({5,10},{  49999999,100000000},{1,100000000})
f_testrem({5,10},{  499999999,1000000000},{1,1000000000})
f_testrem({5,10},{  4999999999,10000000000},{1,10000000000})
f_testrem({5,10},{  49999999999,100000000000},{1,100000000000})
f_testrem({5,10},{  499999999999,1000000000000},{1,1000000000000})

if showprogress then puts(1,"15\n") end if
f_testrem({3,100},{7,1},{3,100})
f_testrem({5,1},{2,1},1)
f_testrem({41,10},{2,1},{1,10})
f_testrem({401,100},{2,1},{1,100})
f_testrem({4001,1000},{2,1},{1,1000})
f_testrem({40001,10000},{2,1},{1,10000})
f_testrem({400001,100000},{2,1},{1,100000})
f_testrem({4000001,1000000},{2,1},{1,1000000})
f_testrem({40000001,10000000},{2,1},{1,10000000})

if showprogress then puts(1,"16\n") end if
f_testrem({12,10},{7345,10000},{4655,10000})        -- Is remainder(1.2,0.7345)=0.4655?
f_testrem({8,10},{12,1},{8,10})
f_testrem({8,10},{2,10},0)
f_testrem({8,10},{3,10},{2,10})
f_testrem({8,10},{17,10},{8,10})

if showprogress then puts(1,"17\n") end if
f_testrem({12345,1},{1,1},0)
f_testrem({12345,1},{10001,10000},{7657,10000})
f_testrem({12345,1},{1001,1000},{668,1000})
f_testrem({12345,1},{101,100},{78,100})
f_testrem({12345,1},{11,10},{8,10})
f_testrem({12355,1},{4,1},3)
f_testrem({12345,1},{4,1},1)
f_testrem({12355,1},{40001,10000},{26912,10000})
f_testrem({12345,1},{40001,10000},{6914,10000})
f_testrem({12345,1},{49,10},{19,10})
f_testrem({12345,1},{499,100},{473,100})
f_testrem({12345,1},{4999,1000},{2469,1000})
f_testrem({12345,1},{49999,10000},{2469,10000})
f_testrem({12345,1},{5,1},0)
f_testrem({12345,1},{50001,10000},{47532,10000})
f_testrem({12345,1},{5001,1000},{2532,1000})
f_testrem({12345,1},{501,100},{36,100})
f_testrem({12345,1},{51,10},3)

if showprogress then puts(1,"18\n") end if
f_testrem({5,10},{1,1},{5,10})
f_testrem({55,100},{1,1},{55,100})
f_testrem({555,1000},{1,1},{555,1000})
f_testrem({5555,10000},{1,1},{5555,10000})
f_testrem({55555,100000},{1,1},{55555,100000})
f_testrem({555555,1000000},{1,1},{555555,1000000})
f_testrem({5555555,10000000},{1,1},{5555555,10000000})
f_testrem({55555555,100000000},{1,1},{55555555,100000000})
f_testrem({555555555,1000000000},{1,1},{555555555,1000000000})

if showprogress then puts(1,"19\n") end if
f_testrem({12345678000,1},{100,1},0)
f_testrem({1234567800,1},{10,1},0)
f_testrem({1234567890,1},{10,1},0)
f_testrem({1234567891,1},{10,1},1)
f_testrem({12345678901,1},{100,1},1)
f_testrem({1234567896,1},{10,1},6)
f_testrem({1,1},{12345678000,1},1)
f_testrem({1,1},{1234567800,1},1)
f_testrem({1,1},{1234567890,1},1)
f_testrem({1,1},{1234567891,1},1)
f_testrem({1,1},{12345678901,1},1)
f_testrem({1,1},{1234567896,1},1)

if showprogress then puts(1,"20\n") end if
f_testrem({100000000,1},{1,1},0)
f_testrem({1000000004,10},{1,1},{4,10})
f_testrem({1000000005,10},{1,1},{5,10})
f_testrem({1000000009,10},{1,1},{9,10})
f_testrem({100000000999,1000},{1,1},{999,1000})

if showprogress then puts(1,"21\n") end if
f_testrem({100000003,1},{5,1},3)
f_testrem({10000003,1},{5,1},3)
f_testrem({1000003,1},{5,1},3)
f_testrem({100003,1},{5,1},3)
f_testrem({10003,1},{5,1},3)
f_testrem({1003,1},{5,1},3)
f_testrem({103,1},{5,1},3)
f_testrem({13,1},{5,1},3)
f_testrem({1,1},{5,1},1)
if showprogress then puts(1,"22\n") end if
puts(1,"\n")
if failcount then Abort("Some errors\n") end if
--if getc(0) then end if
