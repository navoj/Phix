
-- hangman.exw

-- DEV: Contains 2 routines (rand_range, to_number) that I should probably make auto-includes.
--      I guess I could also do somegthing for read_lines/get_text.
--      This is also somewhere to have a bash at implementing maps, [DONE]
--       (for now this shows how to revert to standard sequences).

namespace hangman

include builtins\map.e

--/*
include std/convert.e
include std/sort.e
include std/error.e
include std/text.e
include std/map.e
include std/sequence.e
include std/os.e
include std/io.e
include std/rand.e
include std/console.e
--*/

function mask_word(sequence word, map good, integer HIDING_CHAR) --> string
--function mask_word(sequence word, sequence good, integer HIDING_CHAR) --> string
integer ch
    for i=1 to length(word) do
        ch = word[i]
        if not has(good,ch) then
--      if not find(ch,good) then
            word[i] = HIDING_CHAR
        end if
    end for
    return word
end function

--procedure ensure(integer x, sequence text = "")
--  if x=0 then
--      crash(text)
--  end if
--end procedure

--DEV nicked from Eu4 std/rand.e:
--function rand_range(integer lo, integer hi)
--integer temp
--
--  if lo>hi then
--      temp = hi
--      hi = lo
--      lo = temp
--  end if
--
--  lo -= 1
--  hi -= lo
--
--  return lo+rand(hi)
--end function


--function rand_item(sequence seq) --> object
--integer len = length(seq)
--integer rand_index
--object item
--  ensure(len>0,"must be a non empty sequence")
--  rand_index = rand_range(1,len)
--  item = seq[rand_index]
--  return item
--end function

function read_lines(sequence filename)
sequence lines
integer fn = open(filename,"r")
    if fn=-1 then ?9/0 end if
    lines = get_text(fn,GT_LF_STRIPPED)
    close(fn)
    return lines
end function

function random_word() --> string
--  sequence lines = read_lines("tinEWGdemo\\tindemo\\words.txt")
    sequence lines = read_lines(join_path({"tinEWGdemo","tindemo","words.txt"}))
    return lines[rand(length(lines))]
end function

function count_chars(sequence seq, integer ch)
integer count = 0
    for i=1 to length(seq) do
        if ch=seq[i] then
            count += 1
        end if
    end for
    return count
end function

procedure update_letters(map letters, integer char)
    put(letters, upper(char), 0)
end procedure
--function update_letters(sequence letters, integer char)
--  if not find(char,letters) then
--      letters = append(letters,char)
--  end if
--  return letters
--end function

procedure update_stores(sequence word, map good, map bad, integer char) --> {map,map}
--function update_stores(sequence word, sequence good, sequence bad, integer char) --> {seq,seq}
integer ch = upper(char)
    if find(ch, word) then -- good guess
        update_letters(good,ch)
--      good = update_letters(good,ch)
    else
        update_letters(bad,ch)
--      bad = update_letters(bad,ch)
    end if
end procedure
--  return {good,bad}
--end function

constant HIDING_CHAR = '*'
procedure start(sequence word, integer allowed_tries)
sequence word_output
integer underscores
integer wrong_chars
sequence letters_so_far
integer ch
--sequence updated
-- members
map wrong_letters = new()
--sequence wrong_letters = {}
map right_letters = new()
--sequence right_letters = {}

    -- prep
    word = upper(word)


    any_key("Hello! please click any key to start")

    while 1 do

        -- in every loop: mask, and count underscores.
        word_output = mask_word(word,right_letters, HIDING_CHAR)
        underscores = count_chars(word_output,HIDING_CHAR)

        ---------- output ----------
        clear_screen()
        puts(1, "The word is:\n")
        puts(1,join(word_output," ") & "\n\n")

        wrong_chars = size(wrong_letters)
--      wrong_chars = length(wrong_letters)
        printf(1,"%d / %d\n\n", {wrong_chars, allowed_tries})

        letters_so_far = join(sort(keys(wrong_letters))," ")
--      letters_so_far = join(sort(wrong_letters)," ")
        puts(1,"\t" & letters_so_far)
        ----------- decide flow -----------
        if underscores=0 then
            puts(1,"\nYou won!! congratulations!\n")
            exit
        end if

        if wrong_chars>=allowed_tries then
            printf(1, "\nYou lost.. :(\nthe word was: %s\n", {word})
            exit
        end if

        ------------input---------
        -- check key presses
        ch = wait_key()
        -- ESC to exit the program.
        if ch=27 then exit end if
        if ('A'<=ch and ch<='Z')
        or ('a'<=ch and ch<='z') then
            update_stores(word, right_letters, wrong_letters, ch)
--          updated = update_stores(word, right_letters, wrong_letters, ch)
--          right_letters = updated[1]
--          wrong_letters = updated[2]
        end if
    end while
    any_key()
end procedure

--DEV nicked from std/convert.e:
constant vDigits = "0123456789ABCDEFabcdef"
integer decimal_mark = '.'
function to_number(sequence text_in, integer return_bad_pos = 0)
-- get the numeric result of text_in
integer lDotFound = 0
integer lSignFound = 2
integer lCharValue
integer lBadPos = 0
atom    lLeftSize = 0
atom    lRightSize = 1
atom    lLeftValue = 0
atom    lRightValue = 0
integer lBase = 10
integer lPercent = 1
atom    lResult
integer lDigitCount = 0
integer lCurrencyFound = 0
integer lLastDigit = 0
integer lChar

    for i=1 to length(text_in) do
        if not integer(text_in[i]) then
            exit
        end if

        lChar = text_in[i]
        switch lChar do
            case '-' then
                if lSignFound=2 then
                    lSignFound = -1
                    lLastDigit = lDigitCount
                else
                    lBadPos = i
                end if

            case '+' then
                if lSignFound=2 then
                    lSignFound = 1
                    lLastDigit = lDigitCount
                else
                    lBadPos = i
                end if

            case '#' then
                if lDigitCount=0 and lBase=10 then
                    lBase = 16
                else
                    lBadPos = i
                end if

            case '@' then
                if lDigitCount=0 and lBase=10 then
                    lBase = 8
                else
                    lBadPos = i
                end if

            case '!' then
                if lDigitCount=0    and lBase=10 then
                    lBase = 2
                else
                    lBadPos = i
                end if

            case '$', '£', '¤', '¥', '€' then
                if lCurrencyFound=0 then
                    lCurrencyFound = 1
                    lLastDigit = lDigitCount
                else
                    lBadPos = i
                end if

            case '_' then -- grouping character
                if lDigitCount=0 or lLastDigit!=0 then
                    lBadPos = i
                end if

            case '.', ',' then
                if lLastDigit=0 then
                    if decimal_mark=lChar then
                        if lDotFound=0 then
                            lDotFound = 1
                        else
                            lBadPos = i
                        end if
                    else
                        -- Ignore it
                    end if
                else
                    lBadPos = i
                end if

            case '%' then
                if lDigitCount>=0 then
                    lLastDigit = lDigitCount
                    if lPercent=1 then
                        lPercent = 100
                    else
                        if text_in[i-1]='%' then
                            lPercent *= 10 -- Yes ten not one hundred.
                        else
                            lBadPos = i
                        end if
                    end if
                else
                    lBadPos = i
                end if

            case '\t', ' ', #A0 then
                if lDigitCount=0 then
                    -- skip it
                else
                    lLastDigit = i
                end if

            case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
                  'A', 'B', 'C', 'D', 'E', 'F',
                  'a', 'b', 'c', 'd', 'e', 'f' then
                lCharValue = find(lChar, vDigits)-1
                if lCharValue>15 then
                    lCharValue -= 6
                end if

                if lCharValue>=lBase then
                    lBadPos = i

                elsif lLastDigit!=0 then    -- shouldn't be any more digits
                    lBadPos = i

                elsif lDotFound=1 then
                    lRightSize *= lBase
                    lRightValue = (lRightValue*lBase)+lCharValue
                    lDigitCount += 1
                else
                    lLeftSize += 1
                    lLeftValue = (lLeftValue*lBase)+lCharValue
                    lDigitCount += 1
                end if

            case else
                lBadPos = i

        end switch

        if lBadPos!=0 then
            exit
        end if
    end for


    -- Error if no actual digits where converted.
    if lBadPos=0 and lDigitCount=0 then
        lBadPos = 1
    end if

    if return_bad_pos=0 and lBadPos!=0 then
        return 0
    end if

    if lRightValue=0 then
        -- Common situation optimised for speed.
        if lPercent!=1 then
            lResult = (lLeftValue/lPercent)
        else
            lResult = lLeftValue
        end if
    else
        if lPercent!=1 then
            lResult = (lLeftValue+(lRightValue/(lRightSize)))/lPercent
        else
            lResult = lLeftValue+(lRightValue/lRightSize)
        end if
    end if

    if lSignFound<0 then
        lResult = -lResult
    end if

    if return_bad_pos=0 then
        return lResult
    end if

    if return_bad_pos=-1 then
        if lBadPos=0 then
            return lResult
        else
            return {lBadPos}
        end if
    end if

    return {lResult, lBadPos}

end function

procedure main()
integer tries = 9
sequence cmd = command_line()
sequence initial_word

    if length(cmd)<=2 then
        puts(1,"\nNOTE OPTIONAL ARGUMENTS ARE: number_of_tries word_to_guess\n")
--      any_key()
    end if

    if length(cmd)>2 then
        tries = to_number(cmd[3])
    end if

    if length(cmd)>3 then
        initial_word = cmd[4]
    else
        initial_word = random_word()
    end if

    start(initial_word, tries)
end procedure

main()
