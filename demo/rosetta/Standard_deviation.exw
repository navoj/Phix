--
-- demo\rosetta\Standard_deviation.exw
-- ===================================
--
-- Author Pete Lomax, October 2015
--
-- At the end is a commented out version that could be in a separate file and have multiple data sets active concurrently.
--

atom sdn = 0, sdsum = 0, sdsumsq = 0

procedure sdadd(atom n)
    sdn += 1
    sdsum += n
    sdsumsq += n*n
end procedure

function sdavg()
    return sdsum/sdn
end function

function sddev()
    return sqrt(sdsumsq/sdn - power(sdsum/sdn,2))
end function

constant testset = {2, 4, 4, 4, 5, 5, 7, 9}
integer ti
for i=1 to length(testset) do
    ti = testset[i]
    sdadd(ti)
    printf(1,"N=%d Item=%d Avg=%5.3f StdDev=%5.3f\n",{i,ti,sdavg(),sddev()})
end for

{} = wait_key()
--/*
--abort(0)

--file sd.e
sequence sd
integer sdinit = 0,
        sdfreelist = 0

--gobal
function sdnew()
integer res
    if sdinit=0 then
        sd = {}
        sdinit = 1
    end if
    if sdfreelist!=0 then
        res = sdfreelist
        sdfreelist = sd[sdfreelist]
        sd[res] = {0,0,0}
    else
        sd = append(sd,{0,0,0})
        res = length(sd)
    end if
    return res
end function

--global
procedure sdfree(integer sdID)
    sd[sdID] = sdfreelist
    sdfreelist = sdID
end procedure

--global
procedure sdadd(integer sdID, atom n)
    sd[sdID] = sq_add(sd[sdID],{1,n,n*n})
end procedure

--global
function sdavg(integer sdID)
atom {sdn,sdsum} = sd[sdID]
    return sdsum/sdn
end function

--global
function sddev(integer sdID)
atom {sdn,sdsum,sdsumsq} = sd[sdID]
    return sqrt(sdsumsq/sdn - power(sdsum/sdn,2))
end function

--test code
--include sd.e
constant testset = {2, 4, 4, 4, 5, 5, 7, 9}
constant sdID = sdnew()
integer ti
for i=1 to length(testset) do
    ti = testset[i]
    sdadd(sdID,ti)
    printf(1,"N=%d Item=%d Avg=%5.3f StdDev=%5.3f\n",{i,ti,sdavg(sdID),sddev(sdID)})
end for
sdfree(sdID)

{} = wait_key()
--abort(0)
--*/
