--
-- demo\rosetta\fibonacci.exw
-- ======================================
--
-- Author Pete Lomax, October 2015
--
--  The first five attempts were fine but not great.
--

--/*
function fibonanal(integer n)           -- analytic
atom sqrt5 = sqrt(5),
     p = (1+sqrt5)/2,
     q = 1/p
    if n>=71 then ?9/0 end if   -- inaccuracies creep in above 70
    return round((power(p,n)+power(q,n))/sqrt5)
end function
 
function fibonar(integer n)             -- recursive (very slow)
    if n<2 then return n end if
    if n>38 then ?9/0 end if    -- far too slow
    if n>78 then ?9/0 end if    -- would probably be accurate to 78
    return fibonar(n-1)+fibonar(n-2)
end function

function fibonab(integer n, atom a=0, b=1)  -- tail recursive
--  if n>=44 then ?9/0 end if   -- overflow
    if n<1 then return a end if
    return fibonab(n-1, b, a+b)
end function
--*/

function fibonacci(integer n)       -- iterative, works for -ve numbers
atom a=0, b=1
    if n=0 then return 0 end if
    if abs(n)>=79 then ?9/0 end if  -- inaccuracies creep in above 78
    for i=1 to abs(n)-1 do
        {a,b} = {b,a+b}
    end for
    if n<0 and remainder(n,2)=0 then return -b end if
    return b
end function

--/*
function fibmatrix(integer n)   -- matrix multiplication
atom f1 = 1, f2 = 0,
     g1 = 0, g2 = 1
    if n>=79 then ?9/0 end if   -- inaccuracies creep in above 78
    while n>0 do
        if and_bits(n,1) then -- n odd
            {f1,f2} = {f1*g1+f2*g2,f1*g2+f2*(g1+g2)}
            n -= 1
        else
            {g1,g2} = {g1*g1+g2*g2,g1*g2+g2*(g1+g2)}
            n = floor(n/2)
        end if
    end while
    return f2
end function

sequence fcache = {1,1}

function fibonamem(integer n)   -- memoized, works for -ve numbers
integer absn = abs(n)
    if n=0 then return 0 end if
    if absn>=79 then ?9/0 end if    -- inaccuracies creep in above 78
--  if absn>length(fcache) then
--      fcache = append(fcache,fibonamem(absn-1)+fibonamem(absn-2))
--      if absn!=length(fcache) then ?9/0 end if
--  end if
--somewhat simpler:
    while length(fcache)<absn do
        fcache &= fcache[$] + fcache[$-1]
    end while
    if n<0 and remainder(n,2)=0 then return -fcache[absn] end if
    return fcache[absn]
end function
--*/

for i=0 to 28 do
    if i then puts(1,", ") end if
--  ba_printf(1,"%B", fibonamemba(i))
    if i<71 then -- inaccurate after that
--      printf(1,"%d", fibonanal(i))
    end if
    if i<35 then -- too slow after that
--      printf(1,"%d", fibonar(i))
    end if
--  if i<79 then -- inaccurate after that
--      printf(1,"%d\n", fibonab(i))
        printf(1,"%d", fibonacci(i))
--      printf(1,"%d", fibonacci(-i))
--      printf(1,"%d", fibonamem(i))
--      printf(1,"%d\n", fibonamem(-i))
--      printf(1,"%d", fibmatrix(i))
--  end if
end for
puts(1,"\n")

--printf(1,"%d\n", fibonamem(78))

--0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040

--!/*
include builtins\bigatom.e

sequence fcacheba = {BA_ONE,BA_ONE}

function fibonamemba(integer n) -- memoized, works for -ve numbers, yields bigatom
integer absn = abs(n)
    if n=0 then return BA_ZERO end if
--  if absn>length(fcacheba) then
--      fcacheba = append(fcacheba,ba_add(fibonamemba(absn-1),fibonamemba(absn-2)))
--      if absn!=length(fcacheba) then ?9/0 end if
--  end if
    while length(fcacheba)<absn do
        fcacheba = append(fcacheba,ba_add(fcacheba[$],fcacheba[$-1]))
    end while
    if n<0 and remainder(n,2)=0 then return ba_sub(0,fcacheba[absn]) end if
    return fcacheba[absn]
end function


for i=0 to 28 do
    if i then puts(1,", ") end if
    ba_printf(1,"%B", fibonamemba(i))
    if i<71 then -- inaccurate after that
--      printf(1,"%d", fibonanal(i))
    end if
    if i<35 then -- too slow after that
--      printf(1,"%d", fibonar(i))
    end if
    if i<79 then -- inaccurate after that
--      printf(1,"%d", fibonab(i))
--      printf(1,"%d", fibonacci(i))
--      printf(1,"%d", fibonacci(-i))
--      printf(1,"%d", fibonamem(i))
--      printf(1,"%d", fibonamem(-i))
--      printf(1,"%d", fibmatrix(i))
    end if
end for
puts(1,"\n")
bigatom fib705 = fibonamemba(705)
string fib705t = ba_sprintf("%B",fib705)
printf(1,"%s\n(%d digits)\n",{fib705t,length(fib705t)})

--0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811
--0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811 012345678901234
--1081213530912648191985419587942084110095342850438593857649766278346130479286685742885693301250359913460718567974798268702550329302771992851392180275594318434818082
--(163 digits)-15=148
--!*/

{} = wait_key()
