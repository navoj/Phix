--
-- demo\rosetta\Bresenham_line.exw
-- ===============================
--
-- Author Pete Lomax, October 2015
--
--  Modified copy of [[Bitmap/Bresenham%27s_line_algorithm#Euphoria|Euphoria]], with a bigger bitmap and a simpler pattern
--  requires new_image() from [[Bitmap#Phix|Bitmap]], write_ppm() from [[Bitmap/Write_a_PPM_file#Phix|Write_a_PPM_file]]. 
--  Included as demo\rosetta\Bresenham_line.exw, results may be verified with demo\rosetta\viewppm.exw

-- Some colour constants:
constant black = #000000,
         blue  = #0000FF,
         green = #00FF00,
         red   = #FF0000,
         white = #FFFFFF

function new_image(integer width, integer height, atom colour=black)
-- Create new image filled with some colour
    return repeat(repeat(colour,height),width)
end function

function bresLine(sequence screenData, integer x0, integer y0, integer x1, integer y1, integer colour)
-- The line algorithm
integer deltaX = abs(x1-x0),
        deltaY = abs(y1-y0),
        stepX = iff(x0<x1,1,-1),
        stepY = iff(y0<y1,1,-1),
        lineError = iff(deltaX>deltaY,deltaX,-deltaY),
        prevle

    lineError = round(lineError/2,1)
    while 1 do
        if x0>=1 and x0<=length(screenData)
        and y0>=1 and y0<=length(screenData[x0]) then
            screenData[x0][y0] = colour
        end if
        if x0=x1 and y0=y1 then exit end if
        prevle = lineError
        if prevle>-deltaX then
            lineError -= deltaY
            x0 += stepX
        end if
        if prevle<deltaY then
            lineError += deltaX
            y0 += stepY
        end if
    end while
    return screenData
end function

-- copied from Bitmap_write_ppm:
procedure write_ppm(sequence filename, sequence image)
integer fn,dimx,dimy
sequence colour_triple
    fn = open(filename,"wb")
    dimx = length(image)
    dimy = length(image[1])
    printf(fn, "P6\n%d %d\n255\n", {dimx,dimy})
    for y = 1 to dimy do
        for x = 1 to dimx do
            colour_triple = sq_div(sq_and_bits(image[x][y], {#FF0000,#FF00,#FF}),
                                                            {#010000,#0100,#01})
            puts(fn, colour_triple)
        end for
    end for
    close(fn)
end procedure

sequence screenData = new_image(400,300,black)
    screenData = bresLine(screenData,100,1,50,300,red)
    screenData = bresLine(screenData,1,180,400,240,green)
    screenData = bresLine(screenData,200,1,400,150,white)
    screenData = bresLine(screenData,195,1,205,300,blue)
    write_ppm("bresenham.ppm",screenData)

