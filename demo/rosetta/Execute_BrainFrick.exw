--
-- demo\rosetta\Execute_BrainFrick.exw
-- ===================================
--
-- Author Pete Lomax, November 2015
--

procedure bfi(string pgm)
sequence jumptable = repeat(0,length(pgm)),
         loopstack = {},
         data = repeat(0,10)    -- size??
integer skip = 0, ch, loopstart, pc, dp
    --
    -- compile (pack/strip comments and link jumps)
    --
    for i=1 to length(pgm) do
        ch = pgm[i]
        switch ch do
            case '[': loopstack = append(loopstack,i-skip); 
                      pgm[i-skip] = ch;
            case ']': loopstart = loopstack[$]; 
                      loopstack = loopstack[1..-2]; 
                      jumptable[i-skip] = loopstart; 
                      jumptable[loopstart] = i-skip; 
                      fallthrough
            case '+','-','<','>',',','.': pgm[i-skip] = ch;
            default: skip += 1
        end switch
    end for
    if length(loopstack) then ?9/0 end if
    pgm = pgm[1..-1-skip]

    --
    -- main execution loop
    --
    pc = 1
    dp = 1
    while pc<=length(pgm) do
        ch = pgm[pc]
        switch ch do
            case '>': dp += 1 if dp>length(data) then dp = 1 end if
            case '<': dp -= 1 if dp<1 then dp = length(data) end if
            case '+': data[dp] += 1
            case '-': data[dp] -= 1
            case ',': data[dp] = getc(0)
            case '.': puts(1,data[dp])
--          case '.': ?data[dp]
            case '[': if data[dp]=0 then pc = jumptable[pc] end if
            case ']': if data[dp]!=0 then pc = jumptable[pc] end if
            default: ?9/0
        end switch
        pc += 1
    end while
end procedure

constant bf="++++++++[>++++[>++>++++>+++>+<<<<-]>++>->+>>+[<]<-]>>.>>.+.<.>>.<<<++.>---------.>------.<----.++++++++.>>+.>++.+++."
--Phix Rocks!         1     2  3    4   5    1  2  3 4  6  1 0   2  4   3  5 4 2   3          4       3               5  6
--                                                                P  h i x  _     R          o       c     k        s  !   \n  \r
constant fb="++++++++[>++++[>++>++++>+++>+<<<<-]>++>->+>>+[<]<-]>>.>>.+.<.>>.<<<+++.>---.>------.++++++++.<--.>>+.>++.+++.,"
--Phix Sucks!         1     2  3    4   5    1  2  3 4  6  1 0   2  4   3  5 4 2    3    4                3    5  6
--                                                                P  h i x  _       S   u       c        k   s   !  \n  \r

bfi(bf)
bfi(fb)

--{} = wait_key()

--The following have all been tested:
--constant bf = "++++++++++[>+>+++>++++>+++++++>++++++++>+++++++++>++++++++++>+++++++++++>++++++++++++<<<<<<<<<-]>>>>+.>>>>+..<.<++++++++.>>>+.<<+.<<<<++++.<++.>>>+++++++.>>>.+++.<+++++++.--------.<<<<<+.<+++.---."
--Goodbye, World!

--constant bf = "++++++++++++++++++++++++++++++++[>+>+<<-]>>+++++++++++++++++++++++++<<++++++++++[>>.-<.<-]"
--9 8 7 6 5 4 3 2 1 0

--# An addition (needs ? output)
--constant bf = "+++.<+++++.[->+<]>."
--# 3
--# 5
--# 8

--constant bf="++++++++[>++++[>++>+++>+++>+<<<<-]>+>->+>>+[<]<-]>>.>>---.+++++++..+++.>.<<-.>.+++.------.--------.>+.>++.+++."
--constant bf="++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>."
--Hello World!
--nstant bf="++++++++[>++++[>++>+++>+++>+<<<<-]>++>->+>>+[<]<-]>>.>>.+.+++++++++++++++.>.<<------.>---------.------------.++++++++.++++++++.>+.>++.+++."

--constant bf="""
--[ This program prints "Hello World!" and a newline to the screen, its
--  length is 106 active command characters. [It is not the shortest.]
--
--  This loop is a "comment loop", a simple way of adding a comment
--  to a BF program such that you don't have to worry about any command
--  characters. Any ".", ",", "+", "-", "<" and ">" characters are simply
--  ignored, the "[" and "]" characters just have to be balanced. This
--  loop and the commands it contains are ignored because the current cell
--  defaults to a value of 0; the 0 value causes this loop to be skipped.
--]
--+++++ +++             Set Cell #0 to 8
--[
--  >++++               Add 4 to Cell #1; this will always set Cell #1 to 4
--  [                   as the cell will be cleared by the loop
--      >++             Add 2 to Cell #2
--      >+++            Add 3 to Cell #3
--      >+++            Add 3 to Cell #4
--      >+              Add 1 to Cell #5
--      <<<<-           Decrement the loop counter in Cell #1
--  ]                   Loop till Cell #1 is zero; number of iterations is 4
--< >+                  Add 1 to Cell #2
--  >++                 Add 2 to Cell #2
--  >+                  Add 1 to Cell #3
--  >-                  Subtract 1 from Cell #4
--  >>+                 Add 1 to Cell #6
--  [<]                 Move back to the first zero cell you find; this will
--                      be Cell #1 which was cleared by the previous loop
--  <-                  Decrement the loop Counter in Cell #0
--]                     Loop till Cell #0 is zero; number of iterations is 8
--
--The result of this is:
--Cell No : 0   1   2   3   4   5   6
--Contents: 0   0  72 104  88  32   8
--Pointer : ^
--
-->>.                   Cell #2 has value 72 which is 'H'
-->---.                 Subtract 3 from Cell #3 to get 101 which is 'e'
--+++++++..+++.         Likewise for 'llo' from Cell #3
-->>.                   Cell #5 is 32 for the space
--<-.                   Subtract 1 from Cell #4 for 87 to give a 'W'
--<.                        Cell #3 was set to 'o' from the end of 'Hello'
--+++.------.--------.  Cell #3 for 'rl' and 'd'
-->>+.                  Add 1 to Cell #5 gives us an exclamation point
-->++.                  And finally a newline from Cell #6
--"""

--constant bf="""
---,+[                       Read first character and start outer character reading loop
--  -[                       Skip forward if character is 0
--      >>++++[>++++++++<-]  Set up divisor (32) for division loop
--                             (MEMORY LAYOUT: dividend copy remainder divisor quotient zero zero)
--      <+<-[                Set up dividend (x minus 1) and enter division loop
--          >+>+>-[>>>]      Increase copy and remainder / reduce divisor / Normal case: skip forward
--          <[[>+<-]>>+>]    Special case: move remainder back to divisor and increase quotient
--          <<<<<-           Decrement dividend
--      ]                    End division loop
--  ]>>>[-]+                 End skip loop; zero former divisor and reuse space for a flag
--  >--[-[<->+++[-]]]<[         Zero that flag unless quotient was 2 or 3; zero quotient; check flag
--      ++++++++++++<[       If flag then set up divisor (13) for second division loop
--                             (MEMORY LAYOUT: zero copy dividend divisor remainder quotient zero zero)
--          >-[>+>>]         Reduce divisor; Normal case: increase remainder
--          >[+[<+>-]>+>>]   Special case: increase remainder / move it back to divisor / increase quotient
--          <<<<<-           Decrease dividend
--      ]                    End division loop
--      >>[<+>-]             Add remainder back to divisor to get a useful 13
--      >[                   Skip forward if quotient was 0
--          -[               Decrement quotient and skip forward if quotient was 1
--              -<<[-]>>     Zero quotient and divisor if quotient was 2
--          ]<<[<<->>-]>>    Zero divisor and subtract 13 from copy if quotient was 1
--      ]<<[<<+>>-]          Zero divisor and add 13 to copy if quotient was 0
--  ]                        End outer skip loop (jump to here if ((character minus 1)/32) was not 2 or 3)
--  <[-]                     Clear remainder from first division if second division was skipped
--  <.[-]                    Output ROT13ed character from copy and clear it
--  <-,+                     Read next character
--]                          End character reading loop
--"""

--/*
-- does not work:
constant tc="""
 >   ++++++++[<++++>-]
 >   ++++++  [<++++>-]
 <   [
      > >>[>]<+++++[>+>+<<-]
      > >[-<<+>>]<[<]<-
    ]
 >   >[>]<[-]
 <   <<<<<<-.>>>>+.>++.
[<] <<.>>>
[>] <<<<-.<<++.>>>>+.<<<+.
[<] <<.>>>
[>] <<--.>-.<<.
[<] <<.>>>
[>] <<<<<--.>>.>>.<-.
[<] >>>>>>>>>+.
[<] >>.
"""
bfi(tc)
--*/
--/*
-- You have two cows
constant tc="""
 >+++++++++[>++++++++++<-]>>++[>+++++<-]>.<<-. 
 <++[>+++++++++++<-]>.++++++.>+++++++ 
 ++++[>++<-]>.<<-------------.------- 
 .<+++++++[>+++<-]>.----------------- 
 .>>.<<<+++++[>+++<-]>.+++.<++++[>--< 
 -]>.>>.<<<++++++[>--<-]>.<++++++[>++ 
 <-]>.<++[>++++<-]>.----.>++++++[>--- 
 <-]>---->+++++++[>+++++++<-]>---.<<..
"""
bfi(tc)
--*/

--?"done"
--{} = wait_key()
