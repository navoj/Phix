--
-- demo\rosetta\AplusB.exw
-- =======================
--
-- Classic problem in programming contests, given so contestants can gain familiarity with the online judging system being used. 
-- Given 2 integer numbers, A and B. One needs to find their sum. 
-- Two integer numbers are written in the input stream, separated by space. (-1000<=A,B<-1000)
-- The required output is one integer: the sum of A and B. 
-- Example: Input     Output 
--           2 2        4 
--           3 2        5

-- When presented with a problem this simple, I start inventing difficulty
--  in the simple act of accepting input (especially 2 numbers on one line)...
--  so here are three different solutions!
--  (Or for industrial-strength console input, take a look at pgets0.ew)
--  (One day I shall also add a proper scanf() builtin to Phix, maybe.) [DEV I have now...]

-- version1
-- as found on rosettacode.org, input is not echoed.
include get.e

function snd(sequence s)
    return s[2]
end function

procedure ab_main()
integer a,b

    a = snd(get(0))
    b = snd(get(0))

    printf(1," %d\n",a+b)
    if getc(0) then end if
end procedure

if 0 then
    ab_main()
end if

-- version2
-- longhand version, input is echoed, full error handling  
string text
integer idx = 0
integer ch

procedure nextch()
    idx += 1
    if idx>length(text) then
        idx = 0
        ch = 0
    else
        ch = text[idx]
    end if
end procedure

function get_number()
integer signed = 0
integer res = 0
--DEV hangs if ch is unassigned....
    while find(ch," \t\r\n") do
        nextch()
    end while
    if idx=0 then
        puts(1,"\nenter another number\n")
        text = gets(0)
        idx = 0
        nextch()
    end if
    if ch='-' then
        signed = 1
        nextch()
    end if
    if idx=0 or ch<'0' or ch>'9' then
        idx = 0
    else
        while 1 do
            res = res*10+ch-'0'
            nextch()
            if idx=0 or ch<'0' or ch>'9' then exit end if
        end while
        if signed then
            res = -res
        end if
    end if
    return res
end function

procedure twoNumbers()
integer a, b
    text = gets(0)
    idx = 0
    nextch()
    if idx!=0 then
        a = get_number()
        if idx!=0 and a>=-1000 and a<=1000 then
            b = get_number()
            if idx!=0 and b>=-1000 and b<=1000 then
                printf(1," %d\n",{a+b})
                return
            end if
        end if
    end if
    puts(1," some error\n")
end procedure

--if 0 then
    twoNumbers()
    puts(1,"Done\n")
    if getc(0) then end if
--end if

-- version3
include std\get.e as stdget

procedure aplusbv3()
string text = gets(0)
integer ecode, nchars
object v
integer a,b
    {ecode,v,nchars} = stdget:value(text,1,GET_LONG_ANSWER)
    if ecode=GET_SUCCESS
    and integer(v) then
        a = v
        {ecode,v,nchars} = stdget:value(text,nchars+1,GET_LONG_ANSWER)
        if ecode=GET_SUCCESS
        and integer(v) then
            b = v
            printf(1," %d\n", a+b)
        else
            puts(1,"error getting second number")
        end if
    else
        puts(1,"error getting first number")
    end if
    if getc(0) then end if
end procedure


if 0 then
    aplusbv3()
end if

