--
-- demo\rosetta\Average_loop_length.exw
-- ====================================
--
--  Let f be a uniformly-randomly chosen mapping from the numbers 1..N to the numbers 1..N 
--  (note: not necessarily a permutation of 1..N; the mapping could produce a number in more than one way or not at all). 
--  At some point, the sequence 1, f(1), f(f(1))... will contain a repetition, a number that occurring for the second time in the sequence. 
--
--  Write a program or a script that estimates, for each N, the average length until the first such repetition. 
--
--  Also calculate this expected length using an analytical formula, and optionally compare the simulated result with the theoretical one. 
--
--  This problem comes from the end of Donald Knuth's Christmas tree lecture 2011. ( http://www.youtube.com/watch?v=cI6tt9QfRdo )
--

constant MAX = 20,
         ITER = 1000000

function expected(integer n)
atom sum = 0
    for i=1 to n do
        sum += factorial(n) / power(n,i) / factorial(n-i)
    end for
    return sum
end function
 
function test(integer n)
integer count = 0, x, bits
    for i=1 to ITER do
        x = 1
        bits = 0
        while not and_bits(bits,x) do
            count += 1
            bits = or_bits(bits,x)
            x = power(2,rand(n)-1)
        end while
    end for
    return count/ITER
end function
 

atom av, ex

    puts(1," n     avg.     exp.  (error%)\n");
    puts(1,"==   ======   ======  ========\n");
    for n=1 to MAX do
        av = test(n)
        ex = expected(n)
        printf(1,"%2d %8.4f %8.4f  (%5.3f%%)\n", {n,av,ex,abs(1-av/ex)*100})
    end for
{} = wait_key()

--/*
 n     avg.     exp.  (error%)
==   ======   ======  ========
 1   1.0000   1.0000  (0.000%)
 2   1.5003   1.5000  (0.018%)
 3   1.8880   1.8889  (0.046%)
 4   2.2176   2.2188  (0.052%)
 5   2.5104   2.5104  (0.001%)
 6   2.7734   2.7747  (0.046%)
 7   3.0198   3.0181  (0.055%)
 8   3.2464   3.2450  (0.042%)
 9   3.4562   3.4583  (0.062%)
10   3.6618   3.6602  (0.043%)
11   3.8511   3.8524  (0.033%)
12   4.0357   4.0361  (0.009%)
13   4.2158   4.2123  (0.083%)
14   4.3843   4.3820  (0.052%)
15   4.5410   4.5458  (0.105%)
16   4.7084   4.7043  (0.087%)
17   4.8603   4.8579  (0.049%)
18   5.0044   5.0071  (0.052%)
19   5.1516   5.1522  (0.011%)
20   5.2955   5.2936  (0.037%)
--*/
