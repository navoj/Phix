--
-- demo\rosetta\Catalan_numbers_Pascals_triangle.exw
-- =================================================
--
-- Calculates the minimum pascals triangle in minimum memory.
-- Inspired by the comments in, but not the code of the FreeBasic example

-- FreeBASIC said:
--'  1   1   1   1   1   1  
--'  1   2   3   4   5   6  
--'  1   3   6  10  15  21  
--'  1   4  10  20  35  56  
--'  1   5  15  35  70 126  
--'  1   6  21  56 126 252  
--' The Pascal triangle is rotated 45 deg.
--' to find the Catalan number we need to follow the diagonal
--' for top left to bottom right 
--' take the number on diagonal and subtract the number in de cell
--' one up and one to right 
--' 1 (2 - 1), 2 (6 - 4), 5 (20 - 15) ... 
--
-- The first thing that struck me was it is twice as big as it needs to be, 
--  something like this would do...
--    1   1   1   1   1   1  
--        2   3   4   5   6  
--            6  10  15  21  
--               20  35  56  
--                   70 126  
--                      252  
-- It is more obvious from the upper square that the diagonal on that, which is 
--  that same as column 1 on this, is twice the previous, which on the second 
--  diagram is in column 2. Further, once we have calculated the value for column 
--  one above, we can use it immediately to calculate the next catalan number and 
--  do not need to store it. Lastly we can overwrite row 1 with row 2 etc in situ, 
--  and the following shows what we need for subsequent rounds:
--    1   1   1   1   1
--    3   4   5   6  
--   10  15  21  
--   35  56  
--  126  (unused)

constant N = 15 -- accurate to 30, nan/inf for anything over 514.
sequence catalan = {},      -- (>=1 only)
         p = repeat(1,N+1)
atom p1
for i=1 to N do
    p1 = p[1]*2
    catalan = append(catalan,p1-p[2])
    for j=1 to N-i+1 do
        p1 += p[j+1]
        p[j] = p1
    end for
--  ?p[1..N-i+1]
end for
?catalan
--{1,2,5,14,42,132,429,1430,4862,16796,58786,208012,742900,2674440,9694845}
--30: 3814986502092304

--The following bigatom version is over ten times faster than the equivalent on [[Catalan_numbers#Phix|Catalan_numbers]]
-- ( http://rosettacode.org/wiki/Catalan_numbers#Phix )

include builtins\bigatom.e

function catalanB(integer n)    -- very very fast!
bigatom p1
    p = repeat(1,n+1)
    catalan = {}
    for i=1 to n do
        p1 = ba_multiply(p[1],2)
        catalan = append(catalan,ba_sub(p1,p[2]))
        for j=1 to n-i+1 do
            p1 = ba_add(p1,p[j+1])
            p[j] = p1
        end for
    end for
    return catalan[n]
end function
 
atom t0 = time()
string sc100 = ba_sprint(catalanB(100))
printf(1,"%d: %s (%3.2fs)\n",{100,sc100,time()-t0})
t0 = time()
string sc250 = ba_sprint(catalanB(250))
printf(1,"%d: %s (%3.2fs)\n",{250,sc250,time()-t0})
--100: 896519947090131496687170070074100632420837521538745909320 (0.08s)
--250: 465116795969233796497747947259667807407291160080922096111953326525143875193659257831340309862635877995262413955019878805418475969029457769094808256 (1.00s)
--30: 3814986502092304

--514: 138952447667531980746216231009666097660372874874188481980595641852676474497331692583231640441012384761341427783541541255030597589431427627430655176383
--442988470662885913213588109164285441306964242663272448936844203375977504198469679404876077115717007537117768720925616684545489461253901549416631112601180300 (8.33s)
--1000: 20461055214680216926425199829978272171792456423390579758445380995721760101918918639649680261564537524490157505694285950973181636343701546373806668828
--86375203359653243390929717431080443509007504772912973142253209352126946839844796747697638537600100637918819326569730982083021538057087711176285777909275869
--64863687485680595658005767317365566688700349394465016415339691092703740630179905258466361101689727289330553211629214327103714071875162583981207268246434315
--3792956281748582435751481498598087586998603921577523657477775758899987954012641033870640665444651660246024318184109046864244732001962029120 (60.20s)

{} = wait_key()
