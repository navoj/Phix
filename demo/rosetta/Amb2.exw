--
-- demo\rosetta\Amb2.exw
-- =====================
--
--version 2:
-- To make things a bit more interesting/flexible, I factored out the inner test to a routine
--  passed as an argument, and likewise added an optional result routine for multiple results.
--  And to prove it the following solves three rather different problems instead of just one.
-- I have to say I was rather amused by some of the entries on rosetta - generics, templates, 
--  coroutines, continuations, iterators, regular expressions, scope violations!, exceptions,
--  interfaces, streams, collections, vectors, assertions, delegates, lambda expressions, if
--  you could name it, someone used it, all in all a veritable programmer's wet dream - over 
--  something that is pretty trivial (imnsho). So for me this is the perfect showcase piece 
--  with which to say "look, mate, you don't need any of that c**p". Like they'll listen..

function amb(sequence sets, integer testrid, integer resrid=-1, object res=0, integer idx=1)
integer flag = (res==0)
integer pass = 0
    if idx>length(sets) then
        pass = 1
        if resrid!=-1 then
            call_proc(resrid,{sets,res})
        end if
    else
        if flag then
            res = repeat(0,length(sets))
        end if
        for k=1 to length(sets[idx]) do
            res[idx] = k
            if flag or call_func(testrid,{sets,res,idx}) then
                {pass,res} = amb(sets,testrid,resrid,res,idx+1)
                if pass and resrid=-1 then exit end if
            end if
        end for
    end if
    return {pass,res}
end function

function pairable(sequence sets, sequence res, integer idx)
    return sets[idx-1][res[idx-1]][$] = sets[idx][res[idx]][1]
end function
constant r_pairable = routine_id("pairable")

procedure AMB_Show(sequence sets, sequence res)
    puts(1,"success: ")
    for i=1 to length(sets) do
        res[i] = sets[i][res[i]]
    end for
    ?res
end procedure
constant r_show = routine_id("AMB_Show")

function pythagorean(sequence sets, sequence res, integer idx)
-- (note that res[idx]==sets[idx][res[idx]] in all cases)
integer x, y, z
    if sequence(sets) then end if -- (suppress warning)
    {x,y,z} = res
    return idx<3 or (x*x+y*y=z*z)
end function
constant r_pythagorean = routine_id("pythagorean")

procedure pythag_show(sequence sets, sequence res)
    if sequence(sets) then end if -- (suppress warning)
    puts(1,"success: ")
    ?res
end procedure
constant r_pythag_show = routine_id("pythag_show")

-- see http://www.randomhacks.net/articles/2005/10/11/amb-operator
function not8(sequence sets, sequence res, integer idx)
-- (note that idx==2 in all cases)
-- (at the last moment, I flipped the test, after realising that
--  someone had completely misunderstood the original article...
--  ...and proved it by showing some strange output on rosetta.)
--  return sets[1][res[1]]*sets[idx][res[idx]]!=8
    return sets[1][res[1]]*sets[idx][res[idx]]=8
end function
constant r_not8 = routine_id("not8")

procedure not8_show(sequence sets, sequence res)
    puts(1,"success: ")
    ?{sets[1][res[1]],sets[2][res[2]]}
end procedure
constant r_not8_show = routine_id("not8_show")

procedure Amb_Problem()
sequence sets = {{"the","that","a"},
                 {"frog","elephant","thing"},
                 {"walked","treaded","grows"},
                 {"slowly","quickly"}}
sequence sets2 = repeat(tagset(11),3)
sequence sets3 = {{1, 2, 3}, {4, 5, 6}}
    puts(1,"\nThe original:\n")
    {} = amb(sets,r_pairable,r_show)
    puts(1,"\nSmall Pythagorean triples problem:\n")
    {} = amb(sets2,r_pythagorean,r_pythag_show)
    puts(1,"\nSome strange not 8 problem:\n") -- (now fixed)
    {} = amb(sets3,r_not8,r_not8_show)
    if getc(0) then end if
end procedure

    Amb_Problem()

