--
-- demo\rosetta\JSON.exw
-- =====================
--
include builtins/json.e
--include json.e
--/*
include std\console.e
--*/

object void
if 01 then
void = print_json(1,1)                                          -- valid (number)
void = print_json(1,"hello")                                    -- valid (string)
void = print_json(1,{JSON_KEYWORD,"null"})                      -- valid (keyword)
void = print_json(1,{JSON_ARRAY,12})                            -- valid ([12]
void = print_json(1,{JSON_ARRAY,{JSON_KEYWORD,"null"},12})      -- valid ([null,12])
void = print_json(1,{JSON_ARRAY})                               -- valid (empty array)
void = print_json(1,{JSON_OBJECT,{"this","that"},{"age",29}})   -- valid (object with 2 pairs)
void = print_json(1,{JSON_OBJECT})                              -- valid (object with 0 pairs)
void = print_json(1,{JSON_OBJECT,{"this","that"},{29,"age"}})   -- invalid (pairs[1] must be string)
void = print_json(1,{JSON_KEYWORD,"undefined"})                 -- invalid (undefined is not a known keyword)
--void = print_json(1,{12})                                     -- invalid in Phix, but OE treats that as the string "\x0C"
void = print_json(1,{JSON_OBJECT,12})                           -- invalid (12 is not a pair)
void = print_json(1,{JSON_OBJECT,{"this","that"},{"age",{JSON_OBJECT,{"this","that"},{"age",29}}}}) -- valid (nested object)
void = print_json(1,{JSON_ARRAY,{JSON_KEYWORD,"null"},{JSON_ARRAY,{JSON_KEYWORD,"null"},12}})       -- valid (nested array)
end if

puts(1,"roundtrip (10 examples):\n")
sequence json_strings = {"{\"this\":\"that\",\"age\":{\"this\":\"that\",\"age\":29}}",
                         "1",
                         "\"hello\"",
                         "null",
                         "[12]",
                         "[null,12]",
                         "[]",
                         "{\"this\":\"that\",\"age\":29}",
                         "{}",
                         "[null,[null,12]]"}

for i=1 to length(json_strings) do
    string s = json_strings[i]
    puts(1,s&"\n")
    object json_object = parse_json(s)
--  ?json_object
--  ?print_json("",json_object,true)
    puts(1,print_json("",json_object,true)&"\n")
    if not equal(print_json("",json_object,true),s) then ?9/0 end if
end for

-- same but obj->string->obj (above was string->obj->string) [no output]
sequence json_objects = {{JSON_OBJECT,{"this","that"},{"age",{JSON_OBJECT,{"this","that"},{"age",29}}}},
                         1,
                         "hello",
                         {JSON_KEYWORD,"null"},
                         {JSON_ARRAY,12},
                         {JSON_ARRAY,{JSON_KEYWORD,"null"},12},
                         {JSON_ARRAY},
                         {JSON_OBJECT,{"this","that"},{"age",29}},
                         {JSON_OBJECT},
                         {JSON_ARRAY,{JSON_KEYWORD,"null"},{JSON_ARRAY,{JSON_KEYWORD,"null"},12}}}

for i=1 to length(json_objects) do
    object json_object = json_objects[i]
--  ?json_object
    string s = print_json("",json_object,true)
--  ?s
--  ?parse_json(s)
    if not equal(parse_json(s),json_object) then ?9/0 end if
end for


-- invalid tests:
--trace(1)
--?parse_json("[1,]")
--?parse_json("{{\"this\",\"that\"},{29,\"age\"}}") -- invalid (pairs[1] must be string)
--?parse_json("undefined")
--?parse_json("{-12}")
--/!*


if 0 then
void = print_json(1,1)                                          -- valid (number)
void = print_json(1,"hello")                                    -- valid (string)
void = print_json(1,{JSON_KEYWORD,"null"})                      -- valid (keyword)
void = print_json(1,{JSON_ARRAY,12})                            -- valid ([12]
void = print_json(1,{JSON_ARRAY,{JSON_KEYWORD,"null"},12})      -- valid ([null,12])
void = print_json(1,{JSON_ARRAY})                               -- valid (empty array)
void = print_json(1,{JSON_OBJECT,{"this","that"},{"age",29}})   -- valid (object with 2 pairs)
void = print_json(1,{JSON_OBJECT})                              -- valid (object with 0 pairs)
void = print_json(1,{JSON_OBJECT,{"this","that"},{29,"age"}})   -- invalid (pairs[1] must be string)
void = print_json(1,{JSON_KEYWORD,"undefined"})                 -- invalid (undefined is not a known keyword)
void = print_json(1,{JSON_OBJECT,12})                           -- invalid (12 is not a pair)
void = print_json(1,{JSON_OBJECT,{"this","that"},{"age",{JSON_OBJECT,{"this","that"},{"age",29}}}}) -- valid (nested object)
void = print_json(1,{JSON_ARRAY,{JSON_KEYWORD,"null"},{JSON_ARRAY,{JSON_KEYWORD,"null"},12}})  -- valid (nested array)
end if


--*!/

void = wait_key()

