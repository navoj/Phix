--
-- demo\rosetta\DragonCurve.exw
-- ============================
--
-- TODO/SUG: add key handling to change the colour steps and depth, and redraw.

include pGUI.e

Ihandle dlg, canvas
cdCanvas cddbuffer, cdcanvas

integer colour = 0

procedure Dragon(integer depth, atom x1, y1, x2, y2)
    depth -= 1
    if depth<=0 then
        cdCanvasSetForeground(cddbuffer, colour)
        cdCanvasLine(cddbuffer, x1, y1, x2, y2)
        -- (some interesting colour patterns emerge)
        colour += 2
--      colour += 2000
--      colour += #100
    else
        atom dx = x2-x1, dy = y2-y1,
             nx = x1+(dx-dy)/2,
             ny = y1+(dx+dy)/2
        Dragon(depth,x1,y1,nx,ny)
        Dragon(depth,x2,y2,nx,ny)
    end if
end procedure
 
function redraw_cb(Ihandle /*ih*/, integer /*posx*/, integer /*posy*/)
    cdCanvasActivate(cddbuffer)
    cdCanvasClear(cddbuffer)
    -- (note: depths over 21 take a long time to draw,
    --        depths <= 16 look a little washed out)
    Dragon(17,100,100,100+256,100)
    cdCanvasFlush(cddbuffer)
    return IUP_DEFAULT
end function

function map_cb(Ihandle ih)
    cdcanvas = cdCreateCanvas(CD_IUP, ih)
    cddbuffer = cdCreateCanvas(CD_DBUFFER, cdcanvas)
    cdCanvasSetBackground(cddbuffer, CD_PARCHMENT)
    return IUP_DEFAULT
end function

function esc_close(Ihandle /*ih*/, atom c)
    if c=K_ESC then return IUP_CLOSE end if
    return IUP_CONTINUE
end function

procedure main()
    IupOpen()

    canvas = IupCanvas(NULL)
    IupSetAttribute(canvas, "RASTERSIZE", "420x290")
    IupSetCallback(canvas, "MAP_CB", Icallback("map_cb"))
    IupSetCallback(canvas, "ACTION", Icallback("redraw_cb"))

    dlg = IupDialog(canvas,"RESIZE=NO")
    IupSetAttribute(dlg, "TITLE", "Dragon Curve")
    IupSetCallback(dlg, "K_ANY",     Icallback("esc_close"))

    IupShow(dlg)
    IupMainLoop()
    IupClose()
end procedure

main()

