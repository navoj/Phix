--
-- demo\rosetta\Bitmap_Circle.exw
-- ==============================
--
-- Author Pete Lomax, October 2015
--
--  {{Trans|Go}}, requires new_image() from [[Bitmap#Phix|Bitmap]], write_ppm() from [[Bitmap/Write_a_PPM_file#Phix|Write_a_PPM_file]]. 
--  Included as demo\rosetta\Bitmap_Circle.exw, results may be verified with demo\rosetta\viewppm.exw

constant black = #000000,
         red = 0xff2020,
         yellow = 0xffdf20

function new_image(integer width, integer height, atom colour=black)
-- Create new image filled with some colour
    return repeat(repeat(colour,height),width)
end function

-- copied from Bitmap_write_ppm:
procedure write_ppm(sequence filename, sequence image)
integer fn,dimx,dimy
sequence colour_triple
    fn = open(filename,"wb")
    dimx = length(image)
    dimy = length(image[1])
    printf(fn, "P6\n%d %d\n255\n", {dimx,dimy})
    for y=1 to dimy do
        for x=1 to dimx do
            colour_triple = sq_div(sq_and_bits(image[x][y], {#FF0000,#FF00,#FF}),
                                   {#010000,#0100,#01})
            puts(fn, colour_triple)
        end for
    end for
    close(fn)
end procedure

function SetPx(sequence img, atom x, atom y, integer colour)
    if x>=1 and x<=length(img)
    and y>=1 and y<=length(img[x]) then
        img[x][y] = colour
    end if
    return img
end function

function Circle(sequence img, atom x, atom y, atom r, integer colour)
atom x1 = -r,
     y1 = 0,
     err = 2-2*r
    if r>=0 then
        -- Bresenham algorithm
        while 1 do
            img = SetPx(img, x-x1, y+y1, colour)
            img = SetPx(img, x-y1, y-x1, colour)
            img = SetPx(img, x+x1, y-y1, colour)
            img = SetPx(img, x+y1, y+x1, colour)
            r = err
            if r>x1 then
                x1 += 1
                err += x1*2 + 1
            end if
            if r<=y1 then
                y1 += 1
                err += y1*2 + 1
            end if
            if x1>=0 then exit end if
        end while
    end if
    return img
end function


sequence img = new_image(400,300,yellow)
    img = Circle(img, 200, 150, 100, red)
    write_ppm("Circle.ppm",img)

--{} = wait_key()

