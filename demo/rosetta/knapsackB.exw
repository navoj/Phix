--
-- demo\rosetta\knapsackB.exw
-- ==========================
--
-- Memoisation uses ranges: if we can prove that the best sub-solution for f is {x,y,..,z}, and 
-- the best solution for g is also {x,y,..,z}, then it is perfectly reasonable that all possible 
-- values in the range f..g (or g..f if g<f) have the same best possible solution of {x,y,..,z}.
-- A simple proof of this lies in considering three different solutions l, m, and n, placed in
-- points order value. Clearly l must occupy less space than m otherwise the latter would have 
-- been chosen over l. Likewise n must occupy more space than m. It follows that there is no
-- other (improved) solution x such than l-m-x-m-n can validly exist. There may well be however
-- an equivalent solution x that can simply be discarded (leaving the cache yielding m).
-- The code below retains a couple of simple sanity checks related to the latter which can be
-- trivially adjusted (as shown) to meet particular circumstances, should they ever trigger.
--
-- I have deliberately used space in place of weight: obviously solutions which are dependent 
-- on two more factors (eg weight and space) create a 3D-cobblestone terrain in which simple 
-- ranges would not suffice (polygons might).
--
-- The implementation of the range memoiser below is not psychopathically efficient: it assumes
-- that holding a single copy of a solution for a range is a sufficient advantage over holding
-- replica copies for w=15.783, 15.784, 15.785, and everything inbetween. Binary searches, and
-- (perhaps) leaving gaps (NULLS) to minimise the cost of future insertions, etc, are omitted.
-- Update: since writing this, dict.e now has traverse_dict_partial_key(), which would make a
--          dictionary based implementation of the range_cache somewhat more practical.

--
-- Each range_cache[i] is an ordered list of {lo,hi,soln}, such that
--  range_cache[i][j][hi] < range_cache[i][j+1][lo] for all j<length
--  (and obviously range_cache[i][j][lo] <= range_cache[i][j][hi]).
--  Also, there should be no duplicate soln in any range_cache[i].
-- eg, for N=3: {{{1,1, "ab"}, {2,3, "bc"}},
--               {{1,2, "ab"}, {3,3, "bc"}},
--               {{1,3, "ab"}}}
-- with the obvious exception of being incomplete, that should be
-- the result no matter what order I add in the 3x3=9 test cases
-- that I used to construct that (there were two separate calls to
-- construct the {2,3} and the same for {1,2}, and three seperate
-- calls to construct the {1,3}).
--
-- The main problem with the dp solution is that it is only practical
-- for integer weights. To cope with fractional weights I have added
-- a simple range cache.
-- On the sample data provided the range cache ended up with 409
-- entries, versus 5549 for a naive cache. Obviously with fractional
-- weights the savings would be even more dramatic (assuming the
-- naive version of the cache ended up with separate entries for 
-- weights of 15.783, 15.784, 15.785, and everything inbetween).
--
?"started"
atom t0 = time()

enum HI,PTS,ACTW,SOLN
sequence range_cache = {}

integer cache_entries = 0

-- Programming note: I use things like rcati to save typing, improve
--  readability, and simplify debugging. However for optimal performance
--  it should be cleared to avoid unnecessary copy-on-write cloning, not
--  that such overhead would be measurable in this simple test case.
--  Using rcati also improves performance slightly, though admittedly if
--  the compiler had any form of cse (common subexpression elimination) 
--  that would not be the case.

-- There is scope for using a binary search or similar here.
-- It may be slightly better to merge on points rather than solution, as
-- shown commented out, but the gain is marginal and I am not absolutely
-- convinced that would always be correct.

procedure add_range(integer at, atom weight, atom actual_weight, atom points, sequence soln)
    if actual_weight>weight then ?9/0 end if
    for i=length(range_cache)+1 to at do -- (while too small do)
        if i=at then
            range_cache = append(range_cache,{{weight,points,actual_weight,soln}})
            cache_entries += 1
            return
        end if
        range_cache = append(range_cache,{})
    end for
    integer lastHI = -1
    for i=1 to length(range_cache[at]) do
        sequence rcati = range_cache[at][i]
        if weight=rcati[ACTW] then
            if rcati[PTS..SOLN]!={points,actual_weight,soln} then ?9/0 end if
            return
        elsif weight<rcati[ACTW] then
            -- (we cannot extend an existing range down...)
            if soln=rcati[SOLN] then ?9/0 end if
            -- insert a new range
            range_cache[at][i..i-1] = {{weight,points,actual_weight,soln}}
            cache_entries += 1
            return
        elsif soln=rcati[SOLN] then
--      elsif points=rcati[PTS] then    -- (and delete next line)
            if rcati[PTS..SOLN]!={points,actual_weight,soln} then ?9/0 end if
            if weight>rcati[HI] then        -- extend existing range up
                rcati = {}
                range_cache[at][i][HI] = weight
            end if
            return
        elsif weight<=rcati[HI] then
            ?9/0        -- duplicate solution?? (or discard as below)
--          return                          -- (discard)
        end if
        if rcati[ACTW]<=lastHI then ?9/0 end if
        lastHI = rcati[HI]
    end for
    range_cache[at] = append(range_cache[at],{weight,points,actual_weight,soln})
    cache_entries += 1
end procedure

function in_range(integer at, atom weight)
    if at<=length(range_cache) then
        for i=1 to length(range_cache[at]) do
            sequence rcati = range_cache[at][i]
            if weight<=rcati[HI] then
                if weight>=rcati[ACTW] then
                    return rcati[PTS..SOLN] -- {pts,act_weight,soln}
                end if
                exit
            end if
        end for
    end if
    return {}   -- (no suitable cache entry found)
end function

--sequence goodies = shuffle({
sequence goodies = ({
-- item                     weight value pieces
{"map",                     9,      150,    1},
{"compass",                 13,     35,     1},
{"sandwich",                50,     60,     2},
{"glucose",                 15,     60,     2},
{"tin",                     68,     45,     3},
{"banana",                  27,     60,     3},
{"apple",                   39,     40,     3},
{"cheese",                  23,     30,     1},
{"beer",                    52,     10,     3},
{"suntan cream",            11,     70,     1},
{"water",                   153,    200,    2},
{"camera",                  32,     30,     1},
{"T-shirt",                 24,     15,     2},
{"trousers",                48,     10,     2},
{"umbrella",                73,     40,     1},
{"waterproof trousers",     42,     70,     1},
{"waterproof overclothes",  43,     75,     1},
{"note-case",               22,     80,     1},
{"sunglasses",              7,      20,     1},
{"towel",                   18,     12,     2},
{"socks",                   4,      50,     1},
{"book",                    30,     10,     2}})

enum CACHE_NONE, CACHE_SIMPLE, CACHE_RANGE
--constant CACHE_METHOD = CACHE_NONE
--constant CACHE_METHOD = CACHE_SIMPLE
constant CACHE_METHOD = CACHE_RANGE
integer cache_hits = 0
integer cache_misses = 0

integer cache_simple = new_dict()

atom t1 = time()+1

function knapsack(integer max_weight, integer at)
    integer best_points = 0, points
    sequence best_choices = {}, choices
    atom act_weight = 0, sub_weight
    if at>=1 then
        if CACHE_METHOD=CACHE_RANGE then
            sequence soln = in_range(at,max_weight)
            if length(soln) then
                cache_hits += 1
                return soln
            end if
        elsif CACHE_METHOD=CACHE_SIMPLE then
            integer k = getd_index({at,max_weight},cache_simple)
            if k!=0 then
                sequence soln = getd_by_index(k,cache_simple)
                cache_hits += 1
                return soln
            end if
        elsif CACHE_METHOD=CACHE_NONE then
            -- show progress
            if time()>t1 then
                ?{max_weight,at}
                t1 = time()+1
            end if
        end if
        cache_misses += 1
        integer {?,witem,pitem,imax} = goodies[at]
        best_choices = repeat(0,at)
        for i=0 to imax do
            integer wlim = max_weight-i*witem
            if wlim<0 then exit end if
            {points,sub_weight,choices} = knapsack(wlim, at-1)
            points += i*pitem
            if points>best_points then
                best_points = points
                best_choices = choices&i
                act_weight = sub_weight+i*witem
            end if
        end for
        if CACHE_METHOD=CACHE_RANGE then
            add_range(at,max_weight,act_weight,best_points,best_choices)
        elsif CACHE_METHOD=CACHE_SIMPLE then
            setd({at,max_weight},{best_points,act_weight,best_choices},cache_simple)
        end if
    end if
    return {best_points, act_weight, best_choices}
end function
 
sequence res = knapsack(400, length(goodies))   -- {points,act_weight,choices}
 
atom weight = 0, witem
atom points = 0, pitem
string idesc
sequence choices = res[3]
for i=1 to length(goodies) do
    integer c = choices[i]
    if c then
        {idesc,witem,pitem} = goodies[i]
        printf(1,"%d %s\n",{c,idesc})
        weight += c*witem
        points += c*pitem
    end if
end for
if points!=res[1] then ?9/0 end if  -- sanity check
if weight!=res[2] then ?9/0 end if  -- sanity check
--if {points,weight}!=res[1..2] then ?{"9/0",points,res} ?goodies ?{length(res[3]),length(goodies)} end if
printf(1,"Value %d, weight %g [%3.2fs]:\n",{points,weight,time()-t0})

--ppOpt({pp_Pause,0})
--pp(range_cache,{pp_Nest,1})
if CACHE_METHOD=CACHE_SIMPLE then
    cache_entries = dict_size(cache_simple)
end if
printf(1,"cache_entries:%d, hits:%d, misses:%d\n",{cache_entries,cache_hits,cache_misses})

{} = wait_key()


