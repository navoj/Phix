--
-- enumproc.exw
-- ============
--
--  Test: EnumProcesses
--  Start of a post-mortem debugger:
--   1) If pFEH/pDiag have failed and the windows WER thing is saying the program has crashed, this
--      may or may not help, but I have no plans to waste much time on handling such cases, and of 
--      course I would *far* rather fix the problem in pFEH/pDiag and get a proper ex.err
--   2) At the moment at least, this is all strictly 32-bit windows only, with no forseeable plans.
--   3) Unfortunately, OllyDbg and similar block access to anything they have open, big shame.
--      I tried, but GrantDebugPrivilege(), below, does not seem to actually achieve anything...
--   4) If however the app is waiting for input, which may include "see ex.err/press Enter...",
--      then it should be fair game. As it stands, this program will be nigh on useless, but with
--      a bit of effort you should be able to validate the heap, find corrupted variables, etc.
--   5) While it may sound like fun to run this on "p test", it is far easier to run "p -c test"
--      and then run this on "test.exe". Obviously you /could/ run it on p.exe, but thankfully 
--      that should be extrememly rare, and I trust is is clear that performing low-level debug
--      on test.exe vs p test is going to be way easier because the latter could easily have up
--      to or even more than a thousand times as much stuff lying around in memory.
--
--  The basic idea of a post mortem debugger is to take a *copy* of this and fill it with application-
--  specific and bug-specific logic. Obviously once the problem is solved you are free to save any
--  code that might prove useful again, but the vast majority of it all should probably be discarded.
--  This is a last hail mary, the difficult way to do it, but when you're really stuck, this may help.
--
--  Note: only tested on Windows 7; earlier versions may need "K32" removed from kernel32.dll entry names
--

--/**/with console 4.0
--without trace

--/* Not Required for Phix:
include ..\builtins\dll.e       -- open_dll/define_c_func/C_POINTER/C_LONG/C_INT/call_back
include ..\builtins\machine.e   -- allocate()
include ..\builtins\peekstr.e   -- peek_string()
--*/

constant k32 = open_dll("kernel32.dll"),
         advapi32 = open_dll("advapi32.dll")
--constant user32 = open_dll("user32.dll"),
--       gdi32  = open_dll("gdi32.dll")
    if k32=0 then ?9/0 end if
    if advapi32=0 then ?9/0 end if

constant
--  C_PTR = C_POINTER,
--  xGetDC = define_c_func(user32,"GetDC",{C_PTR},C_PTR),
--  xEnumFontFamiliesExA = define_c_func(gdi32,"EnumFontFamiliesExA",{C_LONG,C_LONG,C_PTR,C_LONG,C_LONG},C_INT)
--  xEnumFontFamiliesExA = define_c_func(gdi32,"EnumFontFamiliesExA",{C_LONG,C_LONG,C_PTR,C_LONG,C_LONG},C_INT)

    xGetCurrentProcess = define_c_func(k32,"GetCurrentProcess",
        {},         --  (void)
        C_PTR),     -- HANDLE

--/*
    xOpenProcessToken = define_c_func(advapi32,"OpenProcessToken",
        {C_PTR,     --  _In_   HANDLE ProcessHandle,
         C_INT,     --  _In_   DWORD DesiredAccess,
         C_PTR},    --  _Out_  PHANDLE TokenHandle
        C_INT),     -- BOOL

    xLookupPrivilegeValue = define_c_func(advapi32,"LookupPrivilegeValueA",
        {C_PTR,     --  _In_opt_  LPCTSTR lpSystemName,
         C_PTR,     --  _In_      LPCTSTR lpName,
         C_PTR},    --  _Out_     PLUID lpLuid
        C_INT),     -- BOOL

    xAdjustTokenPrivileges = define_c_func(advapi32,"AdjustTokenPrivileges",
        {C_PTR,     --  _In_       HANDLE TokenHandle,
         C_INT,     --  _In_       BOOL DisableAllPrivileges,
         C_PTR,     --  _In_opt_   PTOKEN_PRIVILEGES NewState,
         C_INT,     --  _In_       DWORD BufferLength,
         C_PTR,     --  _Out_opt_  PTOKEN_PRIVILEGES PreviousState,
         C_PTR},    --  _Out_opt_  PDWORD ReturnLength
        C_INT),     -- BOOL
--*/

    xEnumProcesses = define_c_func(k32,"K32EnumProcesses",
        {C_PTR,     --  _Out_  DWORD *pProcessIds,
         C_INT,     --  _In_   DWORD cb,
         C_PTR},    --  _Out_  DWORD *pBytesReturned
        C_INT),     -- BOOL

    xOpenProcess = define_c_func(k32,"OpenProcess",
        {C_INT,     --  _In_  DWORD dwDesiredAccess,
         C_INT,     --  _In_  BOOL bInheritHandle,
         C_INT},    --  _In_  DWORD dwProcessId
        C_PTR),     -- HANDLE

    xEnumProcessModules = define_c_func(k32,"K32EnumProcessModules",
        {C_PTR,     --  _In_   HANDLE hProcess,
         C_PTR,     --  _Out_  HMODULE *lphModule,
         C_INT,     --  _In_   DWORD cb,
         C_PTR},    --  _Out_  LPDWORD lpcbNeeded
        C_INT),     -- BOOL

    xGetModuleBaseName = define_c_func(k32,"K32GetModuleBaseNameA",
        {C_PTR,     --  _In_      HANDLE hProcess,
         C_PTR,     --  _In_opt_  HMODULE hModule,
         C_PTR,     --  _Out_     LPTSTR lpBaseName,
         C_INT},    --  _In_      DWORD nSize
        C_INT),     -- DWORD

    xGetModuleFileNameEx = define_c_func(k32,"K32GetModuleFileNameExA",
        {C_PTR,     --  _In_      HANDLE hProcess,
         C_PTR,     --  _In_opt_  HMODULE hModule,
         C_PTR,     --  _Out_     LPTSTR lpFilename,
         C_INT},    --  _In_      DWORD nSize
        C_INT),     -- DWORD

    xGetModuleInformation = define_c_func(k32,"K32GetModuleInformation",
        {C_PTR,     --  _In_   HANDLE hProcess,
         C_PTR,     --  _In_   HMODULE hModule,
         C_PTR,     --  _Out_  LPMODULEINFO lpmodinfo,
         C_INT},    --  _In_   DWORD cb
        C_INT),     -- BOOL

    xReadProcessMemory = define_c_func(k32,"ReadProcessMemory",
        {C_PTR,     --  _In_   HANDLE hProcess,
         C_PTR,     --  _In_   LPCVOID lpBaseAddress,
         C_PTR,     --  _Out_  LPVOID lpBuffer,
         C_INT,     --  _In_   SIZE_T nSize,
         C_PTR},    --  _Out_  SIZE_T *lpNumberOfBytesRead
        C_INT),     -- BOOL

    xCreateFile = define_c_func(k32,"CreateFileA",
        {C_PTR,     --  _In_      LPCTSTR lpFileName,
         C_INT,     --  _In_      DWORD dwDesiredAccess,
         C_INT,     --  _In_      DWORD dwShareMode,
         C_PTR,     --  _In_opt_  LPSECURITY_ATTRIBUTES lpSecurityAttributes,
         C_INT,     --  _In_      DWORD dwCreationDisposition,
         C_INT,     --  _In_      DWORD dwFlagsAndAttributes,
         C_PTR},    --  _In_opt_  HANDLE hTemplateFile
        C_PTR),     -- HANDLE

    xGetFileTime = define_c_func(k32,"GetFileTime",
        {C_PTR,     --  _In_       HANDLE hFile,
         C_PTR,     --  _Out_opt_  LPFILETIME lpCreationTime,
         C_PTR,     --  _Out_opt_  LPFILETIME lpLastAccessTime,
         C_PTR},    --  _Out_opt_  LPFILETIME lpLastWriteTime
        C_INT),     -- BOOL

    xFileTimeToSystemTime = define_c_func(k32,"FileTimeToSystemTime",
        {C_PTR,     --  _In_   const FILETIME *lpFileTime,
         C_PTR},    --  _Out_  LPSYSTEMTIME lpSystemTime
        C_INT),     -- BOOL

    xSystemTimeToTzSpecificLocalTime = define_c_func(k32,"SystemTimeToTzSpecificLocalTime",
        {C_PTR,     --  _In_opt_  LPTIME_ZONE_INFORMATION lpTimeZone,
         C_PTR,     --  _In_      LPSYSTEMTIME lpUniversalTime,
         C_PTR},    --  _Out_     LPSYSTEMTIME lpLocalTime
        C_INT),     -- BOOL

    xGetDateFormat = define_c_func(k32,"GetDateFormatA",
        {C_INT,     --  _In_       LCID Locale, (32-bit)
         C_INT,     --  _In_       DWORD dwFlags,
         C_PTR,     --  _In_opt_   const SYSTEMTIME *lpDate,
         C_PTR,     --  _In_opt_   LPCTSTR lpFormat,
         C_PTR,     --  _Out_opt_  LPTSTR lpDateStr,
         C_INT},    --  _In_       int cchDate
        C_INT),     -- int

    xGetTimeFormat = define_c_func(k32,"GetTimeFormatA",
        {C_INT,     --  _In_       LCID Locale, (32-bit)
         C_INT,     --  _In_       DWORD dwFlags,
         C_PTR,     --  _In_opt_   const SYSTEMTIME *lpTime,
         C_PTR,     --  _In_opt_   LPCTSTR lpFormat,
         C_PTR,     --  _Out_opt_  LPTSTR lpTimeStr,
         C_INT},    --  _In_       int cchTime
        C_INT),     -- int

    xGetLastError   = define_c_func(k32, "GetLastError",
        {},         --  (void)
        C_INT),     -- DWORD

    xCloseHandle = define_c_func(k32,"CloseHandle",
        {C_PTR},    --  _In_  HANDLE hObject
        C_INT)      -- BOOL

    if xGetCurrentProcess=-1 then ?9/0 end if
--/*
    if xOpenProcessToken=-1 then ?9/0 end if
    if xLookupPrivilegeValue=-1 then ?9/0 end if
    if xAdjustTokenPrivileges=-1 then ?9/0 end if
--*/
    if xEnumProcesses=-1 then ?9/0 end if
    if xOpenProcess=-1 then ?9/0 end if
    if xEnumProcessModules=-1 then ?9/0 end if
    if xGetModuleBaseName=-1 then ?9/0 end if
    if xGetModuleFileNameEx=-1 then ?9/0 end if
    if xGetModuleInformation=-1 then ?9/0 end if
    if xReadProcessMemory=-1 then ?9/0 end if
    if xCreateFile=-1 then ?9/0 end if
    if xGetFileTime=-1 then ?9/0 end if
    if xFileTimeToSystemTime=-1 then ?9/0 end if
    if xSystemTimeToTzSpecificLocalTime=-1 then ?9/0 end if
    if xGetDateFormat=-1 then ?9/0 end if
    if xGetTimeFormat=-1 then ?9/0 end if
    if xGetLastError=-1 then ?9/0 end if
    if xCloseHandle=-1 then ?9/0 end if

constant PROCESS_QUERY_INFORMATION  = #400,
         PROCESS_VM_READ            = #010,
         P_QR                       = or_bits(PROCESS_QUERY_INFORMATION,PROCESS_VM_READ),
--       TRUE                       = (1=1),
         FALSE                      = (1=0),
         MAX_PATH                   = 260

--DEV 32bit...
constant MODULEINFO_pBase       = 0,    -- LPVOID lpBaseOfDll
         MODULEINFO_SizeOfImage = 4,    -- DWORD
         MODULEINFO_EntryPoint  = 8,    -- LPVOID
         SIZEOF_MODULEINFO      = 12

constant --FILETIME_dwLowDateTime = 0,  -- DWORD
         --FILETIME_dwHighDateTime = 4, -- DWORD
         SIZEOF_FILETIME        = 8

constant 
--       SYSTEMTIME_wYear           = 0,    -- WORD
--       SYSTEMTIME_wMonth          = 2,    -- WORD
--       SYSTEMTIME_wDayOfWeek      = 4,    -- WORD
--       SYSTEMTIME_wDay            = 6,    -- WORD
--       SYSTEMTIME_wHour           = 8,    -- WORD
--       SYSTEMTIME_wMinute         = 10,   -- WORD
--       SYSTEMTIME_wSecond         = 12,   -- WORD
--       SYSTEMTIME_wMilliseconds   = 14,   -- WORD
         SIZEOF_SYSTEMTIME          = 16
           
-- Make life a little bit simpler by skipping any annoyances that crop up often...
constant Exclusions = { 
--                      "AvastUI.exe",          -- (now excluded by base)
--                      "DataCardMonitor.exe",
--                      "opera.exe",            -- (now excluded by base)
--                      "pw.exe",
--                      "pwy.exe",
--                      "pwz.exe",
--                      "vlc.exe",
                        $
                      }

procedure CloseHandle(atom hObject)
    if c_func(xCloseHandle,{hObject}) then end if
end procedure


--/*
constant TOKEN_PRIVILEGES_PrivilegeCount = 0,   -- DWORD (1)
         TOKEN_PRIVILEGES_Luid           = 4,   -- (64 bit LE)
         TOKEN_PRIVILEGES_Attributes     = 12,  -- DWORD
         SIZEOF_TOKEN_PRIVILEGES         = 16

constant SE_DEBUG_NAME = "SeDebugPrivilege"
constant SE_PRIVILEGE_ENABLED = #00000002

constant TOKEN_ADJUST_PRIVILEGES = #20
constant TOKEN_QUERY             = #08
constant TOK_APQ = or_bits(TOKEN_ADJUST_PRIVILEGES,TOKEN_QUERY)

function GrantDebugPrivilege()
--
-- Enables the debug privilege (SE_DEBUG_NAME) for this process.
-- Returns TRUE if this privilege could be enabled; FALSE otherwise.
--
atom cp = c_func(xGetCurrentProcess,{})     -- (//should// be -1)
integer fSuccess = FALSE;
atom pTokenHandle = allocate(4)
atom TokenHandle
atom pTP = allocate(SIZEOF_TOKEN_PRIVILEGES)

    if c_func(xOpenProcessToken,{cp,TOK_APQ,pTokenHandle})=0 then
        printf(1,"Could not get the process token\n",{});
    else
        TokenHandle = peek4u(pTokenHandle)
        poke4(pTP+TOKEN_PRIVILEGES_PrivilegeCount,1)
        if c_func(xLookupPrivilegeValue,{NULL,SE_DEBUG_NAME,pTP+TOKEN_PRIVILEGES_Luid})=0 then
            printf(1,"Couldn't lookup SeDebugPrivilege name\n",{});
        else
            poke4(pTP+TOKEN_PRIVILEGES_Attributes,SE_PRIVILEGE_ENABLED)
            if c_func(xAdjustTokenPrivileges,{TokenHandle,FALSE,pTP,SIZEOF_TOKEN_PRIVILEGES,NULL,NULL})=0 then
                printf(1,"Could not revoke the debug privilege\n",{});
            else
                fSuccess = TRUE
            end if
        end if
        CloseHandle(TokenHandle)
    end if
    free(pTokenHandle)
    free(pTP)
    CloseHandle(cp)
    return fSuccess
end function
--*/
/*
typedef struct _TOKEN_PRIVILEGES {
  DWORD               PrivilegeCount;
  LUID_AND_ATTRIBUTES Privileges[1];
} TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES;

typedef struct _LUID_AND_ATTRIBUTES {
  LUID  Luid;   -- (64 bit LE)
  DWORD Attributes;
} LUID_AND_ATTRIBUTES, *PLUID_AND_ATTRIBUTES;

BOOL
CheckThreads (
    __in DWORD ProcId
    )
/*++

Routine Description:

    Enumerates all threads (or optionally only threads for one
    process) in the system.  It the calls the WCT API on each of them.

Arguments:

    ProcId--Specifies the process ID to analyze.  If '0' all processes
        in the system will be checked.

Return Value:

    TRUE if processes could be checked; FALSE if a general failure
    occurred.

--*/
{
    DWORD processes[1024];
    DWORD numProcesses;
    DWORD i;

    // Try to enable the SE_DEBUG_NAME privilege for this process. 
    // Continue even if this fails--we just won't be able to retrieve
    // wait chains for processes not owned by the current user.
    if (!GrantDebugPrivilege())
    {
        printf("Could not enable the debug privilege");
    }

    // Get a list of all processes currently running.
    if (EnumProcesses(processes, sizeof(processes), &numProcesses) == FALSE)
    {
        printf("Could not enumerate processes");
        return FALSE;
    }

    for (i = 0; i < numProcesses / sizeof(DWORD); i++)
    {
        HANDLE process;
        HANDLE snapshot;

        if (processes[i] == GetCurrentProcessId())
        {
            continue;
        }

        process = OpenProcess(PROCESS_ALL_ACCESS, FALSE, processes[i]);
        if (process)
        {
            WCHAR file[MAX_PATH];

            printf("Process 0x%x - ", processes[i]);

            // Retrieve the executable name and print it.
            if (GetProcessImageFileName(process, file, ARRAYSIZE(file)) > 0)
            {
            }

            CloseHandle(process);
            printf("\n");
        }
    }
    return TRUE;
}

*/


function EnumProcesses()
--DEV 32-bit only, for now...
integer cb = 40     -- (doubled until we have more than enough space)
atom pProcessIds
atom pBytesReturned = allocate(4)
integer nBytesReturned
integer nItems
sequence pids

    while 1 do
        pProcessIds = allocate(4*cb)
        nBytesReturned = 0
        if c_func(xEnumProcesses,{pProcessIds,cb,pBytesReturned})=0 then
            puts(1,"xEnumProcesses failed!\n")
            exit
        end if
        nBytesReturned = peek4u(pBytesReturned)
        if nBytesReturned<0 then ?9/0 end if
        if nBytesReturned<cb then exit end if -- got em all
        free(pProcessIds)
        cb *= 2             -- try again with more space
    end while

    nItems = nBytesReturned/4
--  printf(1,"%d items returned\n",{nItems})

    pids = peek4u({pProcessIds,nItems})

    free(pProcessIds)
    free(pBytesReturned)
    return pids
end function

function Validate(sequence pids)
sequence processes
integer pID
atom hProcess
string processname
atom pMod = allocate(4)
atom hMod
atom pcbNeeded = allocate(4)
atom pProcessName = allocate(MAX_PATH) -- (*TCHAR?)
atom pMI = allocate(SIZEOF_MODULEINFO)
atom pBase, SizeOfImage, EntryPoint

--string mz
atom pBuffer = allocate(4)
atom pBytesRead = allocate(4)

    processes = {}
    for i=1 to length(pids) do
        pID = pids[i]
        if pID!=0 then
            hProcess = c_func(xOpenProcess,{P_QR,FALSE,pID});
            processname = "<unknown>"
            if hProcess!=NULL then
                -- As with cb/pProcessIds above, we c/should loop until we get them all,
                --  but here we are only interested in the first anyway, I think...
                if c_func(xEnumProcessModules,{hProcess,pMod,4,pcbNeeded})!=0 then
                    hMod = peek4u(pMod)
--                  if c_func(xGetModuleFileNameEx,{hProcess,hMod,pProcessName,MAX_PATH})!=0 then
--                  if c_func(xGetModuleFileNameEx,{hProcess,NULL,pProcessName,MAX_PATH})!=0 then
                    if c_func(xGetModuleBaseName,{hProcess,hMod,pProcessName,MAX_PATH})!=0 then
                        processname = peek_string(pProcessName)
                        if not find(processname,Exclusions) then
                            if c_func(xGetModuleInformation,{hProcess,hMod,pMI,SIZEOF_MODULEINFO})!=0 then
                                pBase = peek4u(pMI+MODULEINFO_pBase)
                                if pBase=#00400000 then
                                    SizeOfImage = peek4u(pMI+MODULEINFO_SizeOfImage)
                                    EntryPoint  = peek4u(pMI+MODULEINFO_EntryPoint)
--                                  if valid_phix_program(hProcess,pBase) then
--                                  end if
                                    if c_func(xReadProcessMemory,{hProcess,pBase,pBuffer,2,pBytesRead})!=0
                                    and peek4u(pBytesRead)=2 
                                    and peek({pBuffer,2})="MZ" then
--hex4 = sprintf("(%08x)",peek({pBuffer,4}))
--hex4 = sprintf("(%08x)",peek4u(pBuffer))
--MZ
--                                      mz = peek({pBuffer,2})
                                        if c_func(xGetModuleFileNameEx,{hProcess,hMod,pProcessName,MAX_PATH})=0 then ?9/0 end if
                                        processname = peek_string(pProcessName)
                                        processes = append(processes,{pID,processname,pBase,SizeOfImage,EntryPoint})
                                    end if
                                end if
                            end if
                        end if
                    end if
                end if
                CloseHandle(hProcess)
--          else
--              printf(1,"OpenProcess(%d) failed with error %d\n",{pID,c_func(xGetLastError,{})})
            end if
--          printf(1,"%s  (PID: %d)\n", {processname, pID})
        end if
    end for
    free(pcbNeeded)
    free(pProcessName)
    free(pMod)
    free(pBuffer)
    free(pBytesRead)
    free(pMI)
    return processes
end function

sequence pids

sequence processes

--/*
    if not GrantDebugPrivilege() then
        printf(1,"Could not enable the debug privilege\n",{})
    end if
--*/

    pids = EnumProcesses()
--  ?pids

    processes = Validate(pids)
--/*

int PrintModules( DWORD processID )
{
    HMODULE hMods[1024];
    HANDLE hProcess;
    DWORD cbNeeded;
    unsigned int i;

    // Print the process identifier.

    printf( "\nProcess ID: %u\n", processID );

    // Get a handle to the process.

    hProcess = OpenProcess( PROCESS_QUERY_INFORMATION |
                            PROCESS_VM_READ,
                            FALSE, processID );
    if (NULL == hProcess)
        return 1;

   // Get a list of all the modules in this process.

    if( EnumProcessModules(hProcess, hMods, sizeof(hMods), &cbNeeded))
    {
        for ( i = 0; i < (cbNeeded / sizeof(HMODULE)); i++ )
        {
            TCHAR szModName[MAX_PATH];

            // Get the full path to the module's file.

            if ( GetModuleFileNameEx( hProcess, hMods[i], szModName,
                                      sizeof(szModName) / sizeof(TCHAR)))
            {
                // Print the module name and handle value.

                _tprintf( TEXT("\t%s (0x%08X)\n"), szModName, hMods[i] );
            }
        }
    }
    
    // Release the handle to the process.

    CloseHandle( hProcess );

    return 0;
}

int main( void )
{

    DWORD aProcesses[1024]; 
    DWORD cbNeeded; 
    DWORD cProcesses;
    unsigned int i;

    // Get the list of process identifiers.

    if ( !EnumProcesses( aProcesses, sizeof(aProcesses), &cbNeeded ) )
        return 1;

    // Calculate how many process identifiers were returned.

    cProcesses = cbNeeded / sizeof(DWORD);

    // Print the names of the modules for each process.

    for ( i = 0; i < cProcesses; i++ )
    {
        PrintModules( aProcesses[i] );
    }

    return 0;
}
           

void PrintProcessNameAndID( DWORD processID )
{
    TCHAR szProcessName[MAX_PATH] = TEXT("<unknown>");

    // Get a handle to the process.

    HANDLE hProcess = OpenProcess( PROCESS_QUERY_INFORMATION |
                                   PROCESS_VM_READ,
                                   FALSE, processID );

    // Get the process name.

    if (NULL != hProcess )
    {
        HMODULE hMod;
        DWORD cbNeeded;

        if ( EnumProcessModules( hProcess, &hMod, sizeof(hMod), 
             &cbNeeded) )
        {
            GetModuleBaseName( hProcess, hMod, szProcessName, 
                               sizeof(szProcessName)/sizeof(TCHAR) );
        }
    }

    // Print the process name and identifier.

    _tprintf( TEXT("%s  (PID: %u)\n"), szProcessName, processID );

    // Release the handle to the process.

    CloseHandle( hProcess );
}

int main( void )
{
    // Get the list of process identifiers.

    DWORD aProcesses[1024], cbNeeded, cProcesses;
    unsigned int i;

    if ( !EnumProcesses( aProcesses, sizeof(aProcesses), &cbNeeded ) )
    {
        return 1;
    }


    // Calculate how many process identifiers were returned.

    cProcesses = cbNeeded / sizeof(DWORD);

    // Print the name and process identifier for each process.

    for ( i = 0; i < cProcesses; i++ )
    {
        if( aProcesses[i] != 0 )
        {
            PrintProcessNameAndID( aProcesses[i] );
        }
    }

    return 0;
}
--*/

--!/* DEV pete, ths is mental!
--constant LOCALE_NAME_MAX_LENGTH   = 85
constant GENERIC_READ = #80000000,
         FILE_SHARE_READ = 1,
         OPEN_EXISTING = 3,
         FILE_ATTRIBUTE_NORMAL = #80,
         LOCALE_USER_DEFAULT = #400,
--       DATE_SHORTDATE = 2,
--       DATE_LONGDATE = 2,
--       LOCALE_NAME_USER_DEFAULT = NULL,
         INVALID_HANDLE_VALUE = -1,
         TIME_NOSECONDS = 2,
$

constant dateformat = "ddd',' MMM dd yyyy\0",
         timeformat = "hh':'mm tt"


function date_time(sequence filename)
-- Yeah, I know, this is all a bit horrid...
atom hFile
atom pFILETIME = allocate(SIZEOF_FILETIME)
atom pSYSTEMTIME = allocate(SIZEOF_SYSTEMTIME)
atom pLOCALTIME = allocate(SIZEOF_SYSTEMTIME)
string txt
integer dlen, tlen
atom pDate, pTime
    hFile = c_func(xCreateFile,{filename,GENERIC_READ,FILE_SHARE_READ,NULL,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,NULL})
    if hFile=INVALID_HANDLE_VALUE then
        txt = sprintf("CreateFile failed with error %d\n",{c_func(xGetLastError,{})})
    else
        if c_func(xGetFileTime,{hFile,pFILETIME,NULL,NULL})=0 then
            txt = sprintf("GetFileTime failed with error %d\n",{c_func(xGetLastError,{})})
        elsif c_func(xFileTimeToSystemTime,{pFILETIME,pSYSTEMTIME})=0 then
            txt = sprintf("FileTimeToSystemTime failed with error %d\n",{c_func(xGetLastError,{})})
        elsif c_func(xSystemTimeToTzSpecificLocalTime,{NULL,pSYSTEMTIME,pLOCALTIME})=0 then
            txt = sprintf("SystemTimeToTzSpecificLocalTime failed with error %d\n",{c_func(xGetLastError,{})})
        else
            dlen = c_func(xGetDateFormat,{LOCALE_USER_DEFAULT,NULL,pLOCALTIME,dateformat,NULL,0})
            pDate = allocate(dlen)
            if c_func(xGetDateFormat,{LOCALE_USER_DEFAULT,NULL,pLOCALTIME,dateformat,pDate,dlen})=0 then
                --1004 = ERROR_INVALID_FLAGS
                --122 = ERROR_INSUFFICIENT_BUFFER
                txt = sprintf("xGetDateFormat failed with error %d\n",{c_func(xGetLastError,{})})
            else
                tlen = c_func(xGetTimeFormat,{LOCALE_USER_DEFAULT,TIME_NOSECONDS,pLOCALTIME,timeformat,NULL,0})
                pTime = allocate(tlen)
                if c_func(xGetTimeFormat,{LOCALE_USER_DEFAULT,TIME_NOSECONDS,pLOCALTIME,timeformat,pTime,tlen})=0 then
                    txt = sprintf("xGetTimeFormat failed with error %d\n",{c_func(xGetLastError,{})})
                else                
                    txt = peek_string(pDate)&", "&lower(peek_string(pTime))
                end if
                free(pTime)
            end if
            free(pDate)
        end if
        CloseHandle(hFile)
    end if
    free(pFILETIME)
    free(pSYSTEMTIME)
    free(pLOCALTIME)
    return txt
end function

string ptext, currentfilter, originalfilter
sequence pi
integer fcount, fmatch, ch

    if length(processes)=0 then
        puts(1,"no suitable processes found\n")
    else
        printf(1,"%d processes found\n",{length(processes)})
        if length(processes)>1 then
            puts(1,"Please enter filter characters until only one item is listed\n")
        end if
        currentfilter = ""
        originalfilter = ""
        while 1 do
--          printf(1,"filter:%s\n",{currentfilter})
--          printf(1,"filter:%s (%s)\n",{currentfilter,originalfilter})
            fcount = 0
            for i=1 to length(processes) do
                pi = processes[i]
                pi[3] = date_time(pi[2])
--              ptext = sprintf("%s  (PID: %d), Base:#%08x, Size:%d, Entry:#%08x %s\n",pi)
                ptext = sprintf("%6d: %-80s %s\n",pi)
--              ptext = sprintf("%s  (PID: %d), Base:#%08x, Size:%d, Entry:#%08x\n",pi)
--              printf(1,"%s  (PID: %d), Base:#%08x, Size:%d, Entry:#%08x\n",processes[i])
                if length(currentfilter)=0 
                or match(currentfilter,ptext) then
                    fcount += 1
                    puts(1,ptext)
                    fmatch = i
                end if
            end for
            if fcount=0 then
                if length(currentfilter)=1 then
                    currentfilter = originalfilter
                else
                    currentfilter = currentfilter[2..$]
                end if
            else
                printf(1,"filter:%s (%d)\n",{currentfilter,fcount})
                if fcount=1 then
                    puts(1,"press <CR> to select this item\n")
                end if
                originalfilter = currentfilter
                ch = wait_key()
                if ch='?' or ch=315 then
                    puts(1,"Please enter more filter characters until only one item is listed\n")
                    puts(1," Notes: the filter is case-sensitive,\n")
                    puts(1,"        backspace/delete are valid,\n")
                    puts(1,"        escape terminates the program,\n")
                    puts(1,"        the date and proc-ids can also be used\n")
                elsif ch=8 or ch=339 then
                    if length(currentfilter) then
                        currentfilter = currentfilter[1..-2]
                    end if
                elsif ch>=' ' and ch<='z' then
                    currentfilter &= ch
                elsif ch=#1B then
                    puts(1,"program aborted\n")
                    abort(0)
                elsif ch='\r' then
                    if fcount=1 then
                        exit
                    end if
                    puts(1,"Please enter more filter characters until only one item is listed\n")
                else
                    printf(1,"unknown character(%d)\n",ch)
                end if
            end if
        end while
        pi = processes[fmatch]
        ?pi
    end if

puts(1,"Press Enter...")
if getc(0) then end if

--!/**/include ..\test\t02parms.exw


