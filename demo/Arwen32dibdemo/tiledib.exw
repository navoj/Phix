-- Arwen32Dib demo: demonstrates the tile-procedure
--  Ported to Arwen by Pete Lomax

include a32dcore.ew  -- only the core library is necessary
--with trace

a32Dib0 dib, dib2, tile_dib, info_dib
integer trans_x, trans_y, canvas_width, canvas_height, width, height, width2, height2, x, y
integer info_width, info_height, logo_drawing
sequence trans_color
atom t0
integer frames

    dib = loadDib("demo.bmp")
    if not sequence(dib) then
        if message_box("Can't load bitmap 'demo.bmp'.", "Error", MB_ICONERROR) then end if
        abort(0)
    end if
    width = dib[DibWidth]
    height = dib[DibHeight]

    dib2 = loadDib("demo2.bmp")
    if not sequence(dib2) then
        if message_box("Can't load bitmap 'demo2.bmp'.", "Error", MB_ICONERROR) then end if
        abort(0)
    end if
    width2 = dib2[DibWidth]
    height2 = dib2[DibHeight]

    info_dib = 0
    tile_dib = 0
    canvas_width = 0
    canvas_height = 0
    info_width = 0
    info_height = 0
    logo_drawing = 1    -- 0 = none, 1 = normal, 2 = half

    trans_color = {255, 255, 255}
    x = 0
    y = 0

constant win = create(Window, "Arwen32Dib bitmap tiling demo", 0, 0, Default, Default, 480, 300, 0)

procedure IdleHandler()
integer alpha
--  x += 2  if x>=width  then x = 0 end if
--  y += 2  if y>=height then y = 0 end if
    x = remainder(x+2,width)
    y = remainder(y+2,height)
    if sequence(tile_dib) then
        tileDibToDib(tile_dib, dib, x, y, 0, 0, width-1, height-1, {}, 255)
        drawDibToDib(tile_dib, info_dib, 0, 0, 0, 0, info_width-1, info_height-1, trans_color, 255)
--      if logo_drawing=0 then drawDibToDib(tile_dib, dib2, trans_x, trans_y, 0, 0, width2-1, height2-1, trans_color, 127)
--      elsif logo_drawing=1 then drawDibToDib(tile_dib, dib2, trans_x, trans_y, 0, 0, width2-1, height2-1, trans_color, 255)
--      end if
        if logo_drawing then
            alpha = 255
            if logo_drawing=2 then alpha = 127 end if
            drawDibToDib(tile_dib, dib2, trans_x, trans_y, 0, 0, width2-1, height2-1, trans_color, alpha)
        end if
    end if
    frames += 1
    if time()>=t0 then
        setText(win, sprintf("%g FPS", frames/2))
        frames = 0
        t0 = time()+2
    end if
    repaintWindow(win,False)
end procedure
setHandler(IDLE, routine_id("IdleHandler"))

integer firsttime = 1

--atom handle = 0

function winHandler(integer id, integer msg, atom wParam, object lParam)
sequence info_text, rect
atom handle
atom hBitMap
atom hDC
atom hFont
    if id or wParam or object(lParam) then end if -- suppress warnings
    if msg=WM_PAINT then
        if sequence(tile_dib) then
            drawDib(win, tile_dib, 0, 0, 0, 0, canvas_width-1, canvas_height-1)
        end if
    elsif msg=WM_SIZE then
        if sequence(tile_dib) then killDib(tile_dib) end if
        rect = getClientRect(win)
        canvas_width = rect[3]
        canvas_height = rect[4]
        if canvas_width=0
        or canvas_height=0 then
            tile_dib = 0
            return 0
        end if
        tile_dib = newDib(canvas_width, canvas_height)
        trans_x = canvas_width-width2
        trans_y = canvas_height-height2
    elsif msg=WM_ERASEBKGND then
        return {1} -- suppress erasing the background: eliminates flickering
    elsif msg=WM_LBUTTONUP then
--      logo_drawing += 1
--      if logo_drawing>2 then logo_drawing = 0 end if
        logo_drawing = remainder(logo_drawing+1,3)  -- 1,2,0,1,2,0,1,2,...
    elsif firsttime
      and msg=WM_SHOWWINDOW then
--    and not find(msg,{WM_NOTIFY,WM_SYSKEYDOWN,WM_SYSKEYUP,
--                      WM_SYSCOMMAND,WM_ENTERMENULOOP,WM_CAPTURECHANGED,
--                      WM_SETCURSOR,WM_INITMENU,WM_MENUSELECT,WM_CTLCOLORSCROLLBAR}) then
--?msg -- 24=WM_SHOWWINDOW
        firsttime = 0
        info_text = "Click inside the window to change the drawing of the logo."
        setFont(win, "Verdana", 8, Bold)
        rect = getTextExtent(win, info_text)
        info_width = rect[1]+3
        info_height = rect[2]+3
--DEV problems... (StaticBitmap is probably at fault)
if 0 then
--      if handle=0 then
            handle = create(StaticBitmap, "", 0, win, 0, 0, info_width, info_height, 0)
--      handle = createDib(info_width, info_height)
--      end if
        setFont(handle, "Verdana", 8, Bold)
--      setPenColor(handle, BrightWhite)
        setPenColor(BrightWhite)
        drawRectangle(handle, True, 0, 0, info_width, info_height)
        setTextColor(handle, Black)
        for i = 0 to 2 do
            for j = 0 to 2 do
                wPuts(handle, j, i, info_text)
            end for
        end for
        setTextColor(handle, Yellow)
        wPuts(handle, 1, 1, info_text)
--drawDibText
        info_dib = newDib(info_width, info_height)
--hDC = getDC(handle)
        copyToDib(info_dib, handle, 0, 0, 0, 0, info_width - 1, info_height - 1)
--      copyToDib2(info_dib, hDC, 0, 0, 0, 0, info_width - 1, info_height - 1)
--releaseDC(handle,hDC)
        void = destroy(handle)
else
--so instead:
        hDC = c_func(xCreateCompatibleDC, {NULL})
        hBitMap = createCompatibleBitmap(win, info_width, info_height)
        void = selectObject(hDC,hBitMap)
        hFont = createFontForDC(hDC, "Verdana", 7, Bold)
        void = selectObject(hDC, hFont)
        setPenColor(BrightWhite)
        drawRectangleh(hDC, True, 0, 0, info_width, info_height)
        void = c_func(xSetTextColor,{hDC,Black})
        for i=0 to 2 do
            for j=0 to 2 do
                wPuts2(hDC, j, i, info_text)
            end for
        end for
        void = c_func(xSetTextColor,{hDC,Yellow})
        wPuts2(hDC, 1, 1, info_text)
--      info_dib = newDib(info_width, info_height)
        info_dib = extractDib(hDC, 0, 0, info_width, info_height)
--      copyToDib2(info_dib, hDC, 0, 0, 0, 0, info_width-1, info_height-1)
        void = c_func(xDeleteObject,{hBitMap})
        void = c_func(xDeleteObject,{hDC})
-- </instead>. Note that createFontForDC/setPenColor/drawRectangleh/wPuts2/copyToDib2 have all been fudged...
end if

        t0 = time()+2
        frames = 0
        startIdle(40)
    elsif msg=WM_CHAR 
      and wParam=VK_ESCAPE then
        closeWindow(win)
    end if
    return 0
end function
setHandler(win, routine_id("winHandler"))

    WinMain(win, SW_NORMAL)

    killDib(dib)
    killDib(dib2)
    if sequence(tile_dib) then killDib(tile_dib) end if

