--
-- shadepol.exw
-- ============
--
-- Arwen32Dib demo: demonstrates the drawShadedPolygonToDib-procedure
--  Ported to Arwen by Pete Lomax

include a32dpoly.ew  -- only the polygon- and core-library are necessary

a32Dib0 screen_dib
integer dx, dy, dw, dh, frames
atom t

screen_dib = 0
dx = 0  dy = 0  dw = 0  dh = 0

constant win = create(Window, "Arwen32Dib bitmap shaded polygon demo", 0, 0, Default, Default, 480, 300, 0)

procedure IdleHandler()
integer x1, y1, x2, y2, x3, y3, x4, y4
    x1 = rand(dx)           y1 = rand(dy)
    x2 = dw-rand(dx)        y2 = rand(dy)
    x3 = dw-rand(dx)        y3 = dh-rand(dy)
    x4 = rand(dx)           y4 = dh-rand(dy)
--  {x1,x2,x3} = sq_rand(repeat(dw,3))
--  {y1,y2,y3} = sq_rand(repeat(dh,3))
    if sequence(screen_dib) then
        clearDib(screen_dib, {255, 255, 0})
--      drawShadedPolygonToDib(screen_dib, {{x1, y1}, {x2, y2}, {x3, y3}, {x4, y4}}, {{0, 0, 255}, {0, 255, 0}, {255, 0, 0}, {255, 255, 255}})
        drawShadedPolygonToDib(screen_dib, {{x1, y1}, {x2, y2}, {x3, y3}}, {{0, 0, 255}, {0, 255, 0}, {255, 0, 0}})
--      drawShadedPolygonToDib(screen_dib, {{x1, y1}, {x2, y2}, {(x3+x4)/2, (y3+y4)/2}}, {{0, 0, 255}, {0, 255, 0}, {255, 0, 0}})
--      drawShadedPolygonToDib(screen_dib, {{(x1+x2)/2, (y1+y2)/2}, {(x2+x3)/2, (y2+y3)/2}, {(x3+x4)/2, (y3+y4)/2}, {(x4+x1)/2, (y4+y1)/2}}, {{0, 0, 255}, {0, 255, 0}, {255, 0, 0}, {255, 255, 255}})
--      sleep(1)
    end if
    frames += 1
    if time()-t>2 then
        setText(win, sprintf("%g FPS", frames/2))
        frames = 0
        t = time()
    end if
    repaintWindow(win,False)
end procedure
setHandler(IDLE, routine_id("IdleHandler"))

integer firsttime = 1

function winHandler(integer id, integer msg, atom wParam, object lParam)
sequence rect
    if id or wParam or object(lParam) then end if -- suppress warnings
    if msg=WM_PAINT then
        if sequence(screen_dib) then
            drawDib(win, screen_dib, 0, 0, 0, 0, screen_dib[DibWidth]-1, screen_dib[DibHeight]-1)
        end if
    elsif msg=WM_SIZE then
        rect = getClientRect(win)
        dx = floor(rect[3]/4)+1
        dy = floor(rect[4]/4)+1
        dw = rect[3]
        dh = rect[4]
        if sequence(screen_dib) then killDib(screen_dib) end if
        screen_dib = newDib(dw, dh)
    elsif msg=WM_ERASEBKGND then -- suppress the erasing of the background: eliminates flickering
        return {1}
    elsif firsttime
      and msg=WM_SHOWWINDOW then
        firsttime = 0
        t = time()
        frames = 0
        startIdle(40)
    elsif msg=WM_CHAR 
      and wParam=VK_ESCAPE then
        closeWindow(win)
    end if
    return 0
end function
setHandler(win, routine_id("winHandler"))

WinMain(win, SW_NORMAL)

if sequence(screen_dib) then killDib(screen_dib) end if

