
                ----------------------------
                -- 3-D Wire Frame Picture --
                --  * * WIN32 Version * * --
                ----------------------------
-- This is a copy of the RDS version with a P replacing the E.
-- (DOS full screen handling removed.)
-- (Modified to use cffi, hence be 32/64 bit compatible)
-- To stop, just close the window or press escape.

without type_check
--/*
include ..\builtins\dll.e
include ..\builtins\machine.e
include ..\builtins\wildcard.e
--*/
--/**/include builtins\VM\pcfunc.e

--without warning

function link_c(atom dll, sequence name, object args, atom result)
-- dynamically link a C library or routine
atom handle

    if atom(args) then
        handle = open_dll(name)
    elsif result=0 then
        handle = define_c_proc(dll, name, args)
    else
        handle = define_c_func(dll, name, args, result)
    end if
    if handle = -1 then
        puts(1, "Couldn't find " & name & '\n')
        abort(1)
    else
        return handle
    end if
end function

-- get handles to all dll routines that we need:
constant
    user32 = link_c(0,"user32.dll",0,0),
    gdi32 = link_c(0,"gdi32.dll",0,0),
    winmm = link_c(0,"winmm.dll",0,0),
    

--/*
-- (Now I could use cffi on the function definitions, but they don't change for 32<->64bit)
set_unicode(0)
HICON WINAPI LoadIcon(
  _In_opt_  HINSTANCE hInstance,
  _In_      LPCTSTR lpIconName
);
--*/           
--  xLoadIcon = link_c(user32, "LoadIconA", {C_POINTER, C_INT}, C_INT),
    xLoadIcon = link_c(user32, "LoadIconA", {C_HANDLE, C_PTR}, C_HANDLE),
--  xLoadCursor = link_c(user32, "LoadCursorA", {C_POINTER, C_INT}, C_INT),
    xLoadCursor = link_c(user32, "LoadCursorA", {C_HANDLE, C_PTR}, C_HANDLE),
--  xRegisterClassEx = link_c(user32, "RegisterClassExA", {C_POINTER}, C_INT),
    xRegisterClassEx = link_c(user32, "RegisterClassExA", {C_POINTER}, C_USHORT),
--  xCreateWindow = link_c(user32, "CreateWindowExA", repeat(C_INT,12),C_INT),
    xCreateWindowEx = link_c(user32, "CreateWindowExA",
                             {C_DWORD,C_PTR,C_PTR,C_DWORD,
                              C_INT,C_INT,C_INT,C_INT,
                              C_HANDLE,C_HANDLE,C_HANDLE,C_PTR},
                             C_HANDLE),
    xShowWindow = link_c(user32, "ShowWindow", {C_HWND, C_INT},0),
    xUpdateWindow = link_c(user32, "UpdateWindow", {C_HWND},0),
    xGetMessage = link_c(user32, "GetMessageA", {C_PTR, C_HWND, C_UINT, C_UINT}, C_BOOL),
    xTranslateMessage = link_c(user32, "TranslateMessage", {C_PTR},0),
    xDispatchMessage = link_c(user32, "DispatchMessageA", {C_PTR},0),
    xPlaySound = link_c(winmm, "PlaySound", {C_PTR, C_HANDLE, C_DWORD},0),
    xBeginPaint = link_c(user32, "BeginPaint", {C_HWND, C_PTR}, C_HANDLE),
    xGetClientRect = link_c(user32, "GetClientRect", {C_HWND, C_PTR},C_BOOL),
    xDrawText = link_c(user32, "DrawTextA", {C_HANDLE, C_PTR, C_INT, C_PTR, C_UINT},0),
    xEndPaint = link_c(user32, "EndPaint", {C_HWND, C_PTR},0),
    xPostQuitMessage = link_c(user32, "PostQuitMessage", {C_INT},0),
    xDefWindowProc = link_c(user32, "DefWindowProcA", {C_HWND, C_UINT, C_PTR, C_PTR}, C_PTR),
    xSetTimer = link_c(user32, "SetTimer", {C_HWND, C_UINT, C_UINT, C_PTR},C_PTR),
    xKillTimer = link_c(user32, "KillTimer", {C_HWND, C_PTR},C_BOOL),
    xGetDC = link_c(user32, "GetDC", {C_HWND}, C_HANDLE),
    xReleaseDC = link_c(user32, "ReleaseDC", {C_HWND, C_HANDLE},C_INT),
    xMoveToEx = link_c(gdi32, "MoveToEx", {C_HANDLE, C_INT, C_INT, C_PTR}, C_BOOL),
    xLineTo = link_c(gdi32, "LineTo", {C_HANDLE, C_INT, C_INT}, C_BOOL),
    xSelectObject = link_c(gdi32, "SelectObject", {C_HANDLE, C_HANDLE}, C_HANDLE),
    xCreatePen = link_c(gdi32, "CreatePen", {C_INT, C_INT, C_DWORD}, C_HANDLE),
    xGetStockObject = link_c(gdi32, "GetStockObject", {C_INT}, C_HANDLE),
    xSendMessage = link_c(user32,"SendMessageA",{C_HWND,C_UINT,C_PTR,C_PTR},0),
    $

constant X = 1, Y = 2, Z = 3

constant BLACK = 16,
         BLUE  = 1,
         GREEN = 2,
         CYAN =  3,
         RED   = 4,
         MAGENTA = 5,
         BROWN = 6,
         WHITE = 7,
         GRAY  = 8,
--       BRIGHT_BLUE = 9,
--       BRIGHT_GREEN = 10,
--       BRIGHT_CYAN = 11,
--       BRIGHT_RED = 12,
--       BRIGHT_MAGENTA = 13,
         YELLOW = 14,
--       BRIGHT_WHITE = 15,
        $

constant BLACK_PEN = 7,
         WHITE_PEN = 6

constant PS_SOLID = 0

sequence pens = repeat(c_func(xGetStockObject, {BLACK_PEN}),16)
         pens[WHITE] = c_func(xGetStockObject, {WHITE_PEN})
--       pens[BRIGHT_WHITE] = pens[WHITE]
         pens[RED] = c_func(xCreatePen, {PS_SOLID, 1, #0000FF})
--       pens[BRIGHT_RED] = pens[RED]
         pens[GREEN] = c_func(xCreatePen, {PS_SOLID, 1, #00FF00})
--       pens[BRIGHT_GREEN] = pens[GREEN]
         pens[BLUE] = c_func(xCreatePen, {PS_SOLID, 1, #FF0000})
--       pens[BRIGHT_BLUE] = pens[BLUE]

integer xpixels, ypixels

atom hdc
integer axis
atom sin_angle, cos_angle

type point(sequence x)
    return length(x) = 3
end type

type matrix(sequence x)
    return length(x) = 4 and sequence(x[1])
end type

function vector_product(sequence v, matrix m)
-- multiply a 4-vector by a 4x4 matrix
-- note: v is actually length(3), treated as if v[4] is 1.
sequence c
    c = repeat(0, 4)
    for j=1 to 4 do
        c[j] = v[1]*m[1][j]+
               v[2]*m[2][j]+
               v[3]*m[3][j]+
                    m[4][j]
    end for
    return c
end function

procedure draw_line(integer color, sequence coords)
-- WIN32 line drawing routine
atom ok
    
    ok = c_func(xSelectObject, {hdc, pens[color]})
    ok = c_func(xMoveToEx, {hdc, coords[1][1], coords[1][2], NULL})
    if not ok then
        puts(1, "MoveToEx failed!\n")
    end if
    ok = c_func(xLineTo, {hdc, coords[2][1], coords[2][2]})
    if not ok then
        puts(1, "LineTo failed!\n")
    end if
end procedure

procedure display(sequence old_coords, sequence coords)
-- erase the old lines, draw the new ones
    for i = 1 to length(old_coords) do
        draw_line(WHITE, old_coords[i][1..2])
    end for
    for i = 1 to length(coords) do
        draw_line(coords[i][3], coords[i][1..2])
    end for
end procedure

function view(point view_point)
-- compute initial view
atom {x,y,z} = view_point
atom hyp = sqrt(x*x + y*y),
     sin_theta = x/hyp,
     cos_theta = y/hyp,
     sin2theta = sin_theta*sin_theta,
     cos2theta = cos_theta*cos_theta,
     stc_theta = sin_theta*cos_theta,
     soc_theta = sin_theta/cos_theta
    return {{-2*cos_theta, -2*sin2theta,      -stc_theta, 0},
            { 2*sin_theta, -2*stc_theta,      -cos2theta, 0},
            {           0,  2*cos_theta,      -sin_theta, 0},
            {           0,            0, y + x*soc_theta, 1}}
end function

--/*
function view(point view_point)
-- compute initial view
--matrix t1, t2, t3, t4, n
matrix t2, t3, t4, n
atom cos_theta, sin_theta, hyp, a_b
atom x,y,z

    {x,y,z} = view_point
    -- change origin
--  t1 = {{1, 0, 0, 0},
--        {0, 1, 0, 0},
--        {0, 0, 1, 0},
--        {-x,-y,-z,1}}

    -- get left-handed coordinate system
--  t2 = {{-1, 0,  0, 0},
--        { 0, 0, -1, 0},
--        { 0, 1,  0, 0},
--        { 0, 0,  0, 1}}
--?view_point
--?product({t1,t2})
--{2.727272727,3.636363636,3.409090909}
--DEV not really sure what I'm doing, but this seems to work just as well:
    t2 = {{-1, 0, 0, 0},
          { 0, 0,-1, 0},
          { 0, 1, 0, 0},
          { x,-z, y, 1}}

    -- rotate so Ze points properly     -- (DEV what is Ze?)
    hyp = sqrt(x*x + y*y)
    sin_theta = x/hyp
    cos_theta = y/hyp
    t3 = {{cos_theta, 0, sin_theta, 0},
          {        0, 1,         0, 0},
          {-sin_theta,0, cos_theta, 0},
          {        0, 0,         0, 1}}

    -- rotate so Ze points at the origin (0, 0, 0)
    t4 = {{1, 0, 0, 0},
          {0, cos_theta, -sin_theta, 0},
          {0, sin_theta, cos_theta, 0},
          {0, 0, 0, 1}}

    a_b = 2

    n = {{a_b, 0, 0, 0},
         {0, a_b, 0, 0},
         {0, 0, 1, 0},
         {0, 0, 0, 1}}

--?product({t2,n})
--  return product({t1, t2, t3, t4, n})
    return product({t2, t3, t4, n})
--  return product({t1, t2, t3, t4})
end function
--*/

function new_coords(sequence overall, sequence shape)
-- compute the screen coordinates from the 3-D coordinates
sequence screen_coords
atom x2, y2
atom x,y,z

    x2 = xpixels/2
    y2 = ypixels/2
    screen_coords = repeat({0, 0, 0}, length(shape))
    for i = 1 to length(shape) do
        for j = 1 to 2  do
            {x,y,z} = vector_product(shape[i][j], overall)
            screen_coords[i][j] = {x2*(x/z+1),y2*(y/z+1)}
        end for
        screen_coords[i][3] = shape[i][3]
    end for
    return screen_coords
end function

function compute_rotate(integer axis, sequence shape)
-- rotate a shape
atom x,y,z
sequence sij
    for i = 1 to length(shape) do
        for j = 1 to 2 do
            {x,y,z} = shape[i][j]
            if axis = X then
                sij = {x, y*cos_angle + z*sin_angle, z*cos_angle - y*sin_angle}
            elsif axis = Y then
                sij = {x*cos_angle - z*sin_angle, y, x*sin_angle + z*cos_angle}
            else  -- axis = Z
                sij = {x*cos_angle + y*sin_angle, y*cos_angle - x*sin_angle, z}
            end if
            shape[i][j] = sij
        end for
    end for
    return shape
end function

-- lines for a block E
--/*
constant E = {
{{.2, 1.1, 2}, {.2, -.5, 2}, BLUE},             -- top long
{{.2, -.5, 2}, {.2, -.5, -2}, YELLOW},          -- back long
{{.2, -.5, -2}, {.2, 1.1, -2}, GREEN},          -- bottom long
{{.2, 1.1, -2}, {.2, 1.2, -1.6}, RED},          -- serif upright
{{.2, 1.2, -1.6}, {.2, 1, -1.8}, RED},          -- serif diag
{{.2, 1, -1.8}, {.2, 0, -1.8}, MAGENTA},        -- top inner
{{.2, 0, -1.8}, {.2, 0, -.1}, CYAN},            -- inner long
{{.2, 0, -.1}, {.2, .5, -.1}, BLUE},            -- middle long
{{.2, .5, -.1}, {.2, .6, -.2}, BLUE},           -- middle serif diag
{{.2, .6, -.2}, {.2, .6, .2}, BLACK},           -- middle serif vert
{{.2, .6, .2}, {.2, .5, .1}, BLUE},             -- middle serif diag
{{.2, .5, .1}, {.2, 0, .1}, BLUE},              -- middle long
{{.2, 0, .1}, {.2, 0, 1.8}, GREEN},             -- inner long
{{.2, 0, 1.8}, {.2, 1, 1.8}, CYAN},             -- bottom inner
{{.2, 1, 1.8}, {.2, 1.2, 1.6}, CYAN},           -- serif diag
{{.2, 1.2, 1.6}, {.2, 1.1, 2}, RED},            -- serif upright

-- opposite side:
{{-.2, 1.1, 2}, {-.2, -.5, 2}, BLUE},
{{-.2, -.5, 2}, {-.2, -.5, -2}, YELLOW},
{{-.2, -.5, -2}, {-.2, 1.1, -2}, GREEN},
{{-.2, 1.1, -2}, {-.2, 1.2, -1.6}, RED},
{{-.2, 1.2, -1.6}, {-.2, 1, -1.8}, RED},
{{-.2, 1, -1.8}, {-.2, 0, -1.8}, MAGENTA},
{{-.2, 0, -1.8}, {-.2, 0, -.1}, CYAN},
{{-.2, 0, -.1}, {-.2, .5, -.1}, BLUE},
{{-.2, .5, -.1}, {-.2, .6, -.2}, BLUE},
{{-.2, .6, -.2}, {-.2, .6, .2}, BLACK},
{{-.2, .6, .2}, {-.2, .5, .1}, BLUE},
{{-.2, .5, .1}, {-.2, 0, .1}, BLUE},
{{-.2, 0, .1}, {-.2, 0, 1.8}, GREEN},
{{-.2, 0, 1.8}, {-.2, 1, 1.8}, CYAN},
{{-.2, 1, 1.8}, {-.2, 1.2, 1.6}, CYAN},
{{-.2, 1.2, 1.6}, {-.2, 1.1, 2}, RED},

-- cross pieces:
{{.2, 1.1, 2}, {-.2, 1.1, 2}, BLUE},                -- front corner
{{.2, -.5, 2}, {-.2, -.5, 2}, BLUE},                -- back corner
{{.2, -.5, -2}, {-.2, -.5, -2}, GREEN},             -- back corner
{{.2, 1.1, -2}, {-.2, 1.1, -2}, GREEN},             -- front cornet
{{.2, 1.2, -1.6}, {-.2, 1.2, -1.6}, GREEN},         -- serif
{{.2, .6, -.2}, {-.2, .6, -.2}, BLACK},             -- middle 
{{.2, .6, .2}, {-.2, .6, .2}, BLACK},               -- middle
{{.2, 1.2, 1.6}, {-.2, 1.2, 1.6}, GREEN}            -- serif
}
--*/

--DEV what we should have is all the points, and indexes to those points.
--      that way, rotate etc has fewer things to process.
--      plus, point indexes would be good for solid sides/Polygon drawing...
-- lines for a block P
constant P = {
{{ .2, -.6,-2  }, { .2,  .7,-2  }, BLUE},           -- top long
{{ .2,  .9,-1.7}, { .2,  .7,-2  }, MAGENTA},        -- right out diag
{{ .2,  .9,-1.7}, { .2,  .9,-0.2}, BLUE},           -- right out vert
{{ .2, 0.7, 0.1}, { .2,  .9,-0.2}, MAGENTA},        -- right out diag
{{ .2, 0.7, 0.1}, { .2, 0  , 0.1}, CYAN},           -- middle out bar
{{ .2, 0  , 1.9}, { .2, 0  , 0.1}, BLUE},           -- lower vert
{{ .2, 0  , 1.9}, { .2, 0.1, 2  }, RED},            -- lower serif
{{ .2, -.6, 2  }, { .2, 0.1, 2  }, GREEN},          -- bottom line
{{ .2, -.6, 2  }, { .2, -.5, 1.9}, RED},            -- bottom back serif
{{ .2, -.5,-1.9}, { .2, -.5, 1.9}, YELLOW},         -- back vert
{{ .2, -.5,-1.9}, { .2, -.6,-2  }, RED},            -- top back serif

{{ .2, 0  ,-1.8}, { .2,  .5,-1.8}, BLUE},           -- inner top horiz
{{ .2,  .7,-1.5}, { .2,  .5,-1.8}, BLACK},          -- inner top diag
{{ .2,  .7,-1.5}, { .2,  .7,-0.3}, CYAN},           -- inner right vert
{{ .2,  .5,-0.1}, { .2,  .7,-0.3}, CYAN},           -- inner lower diag
{{ .2,  .5,-0.1}, { .2, 0  ,-0.1}, BLUE},           -- inner lower horiz
{{ .2, 0  ,-1.8}, { .2, 0  ,-0.1}, GREEN},          -- upper vert
-- opposite side:
{{-.2, -.6,-2  }, {-.2,  .7,-2  }, BLUE},           -- top long
{{-.2,  .9,-1.7}, {-.2,  .7,-2  }, MAGENTA},        -- right out diag
{{-.2,  .9,-1.7}, {-.2,  .9,-0.2}, BLUE},           -- right out vert
{{-.2, 0.7, 0.1}, {-.2,  .9,-0.2}, MAGENTA},        -- right out diag
{{-.2, 0.7, 0.1}, {-.2, 0  , 0.1}, CYAN},           -- middle out bar
{{-.2, 0  , 1.9}, {-.2, 0  , 0.1}, BLUE},           -- lower vert
{{-.2, 0  , 1.9}, {-.2, 0.1, 2  }, RED},            -- lower serif
{{-.2, -.6, 2  }, {-.2, 0.1, 2  }, GREEN},          -- bottom line
{{-.2, -.6, 2  }, {-.2, -.5, 1.9}, RED},            -- bottom back serif
{{-.2, -.5,-1.9}, {-.2, -.5, 1.9}, YELLOW},         -- back vert
{{-.2, -.5,-1.9}, {-.2, -.6,-2  }, BROWN},          -- top back serif

{{-.2, 0  ,-1.8}, {-.2,  .5,-1.8}, BLUE},           -- inner top horiz
{{-.2,  .7,-1.5}, {-.2,  .5,-1.8}, BLACK},          -- inner top diag
{{-.2,  .7,-1.5}, {-.2,  .7,-0.3}, CYAN},           -- inner right vert
{{-.2,  .5,-0.1}, {-.2,  .7,-0.3}, BLACK},          -- inner lower diag
{{-.2,  .5,-0.1}, {-.2, 0  ,-0.1}, BLUE},           -- inner lower horiz
{{-.2, 0  ,-1.8}, {-.2, 0  ,-0.1}, GREEN},          -- upper vert
-- cross pieces:
{{ .2, -.6,-2  }, {-.2, -.6,-2  }, BLUE},
{{ .2,  .7,-2  }, {-.2,  .7,-2  }, GREEN},
{{ .2,  .9,-1.7}, {-.2,  .9,-1.7}, BLUE},
{{ .2,  .9,-0.2}, {-.2,  .9,-0.2}, BLACK},
{{ .2, 0.7, 0.1}, {-.2, 0.7, 0.1}, MAGENTA},
{{ .2, 0  , 0.1}, {-.2, 0  , 0.1}, BLACK},
{{ .2, 0  , 1.9}, {-.2, 0  , 1.9}, RED},
{{ .2, 0.1, 2  }, {-.2, 0.1, 2  }, BLUE},
{{ .2, -.6, 2  }, {-.2, -.6, 2  }, GREEN},
{{ .2, -.5, 1.9}, {-.2, -.5, 1.9}, GRAY},
{{ .2, -.5,-1.9}, {-.2, -.5,-1.9}, BLUE},

{{ .2, 0  ,-1.8}, {-.2, 0  ,-1.8}, BLUE},
{{ .2,  .5,-1.8}, {-.2,  .5,-1.8}, GREEN},
{{ .2,  .7,-1.5}, {-.2,  .7,-1.5}, RED},
{{ .2,  .7,-0.3}, {-.2,  .7,-0.3}, BLACK},
{{ .2,  .5,-0.1}, {-.2,  .5,-0.1}, GREEN},
{{ .2, 0  ,-0.1}, {-.2, 0  ,-0.1}, BLUE}}

sequence history, coords, overall
point view_point
integer spread, r
atom rot_speed
sequence shape

--/**/  view_point=sq_div({6, 8, 7.5},2.2)  --/* Phix
        view_point = {6, 8, 7.5} / 2.2      --   RDS  */

overall = view(view_point)
rot_speed = 0.09
sin_angle = sin(rot_speed)
cos_angle = cos(rot_speed)
axis = Z
history = {}
spread = 0
--shape = E
shape = P

procedure spin()
-- spin a 3-D shape around on the screen in interesting ways
-- each call makes one slight movement
    coords = new_coords(overall, shape)
    if length(history) > spread then
        display(history[1], coords)
        history = history[2..length(history)]
        if length(history) > spread then
            display(history[1], {})
            history = history[2..length(history)]
        end if
    else
        display({}, coords)
    end if
    history = append(history, coords)
        
    r = rand(525)
    if r = 1 then
        axis = X
    elsif r = 2 then
        axis = Y
    elsif r = 3 then
        axis = Z
    elsif r = 4 then
        spread = 5 * rand(25)  -- leave behind many trailing wire images
    elsif r = 5 or r = 6 then
        spread = 0             -- reduce the images back to a sharp picture
    elsif r = 7 then
        if rand(2) = 1 then
            rot_speed = .04
            spread = 0
        else
            rot_speed = .02 * rand(10)
        end if
        sin_angle = sin(rot_speed)
        cos_angle = cos(rot_speed)
    end if
    shape = compute_rotate(axis, shape)
end procedure

--use cffi to make it 32/64 bit compatible:
include builtins\cffi.e
constant tWNDCLASSEX = """
typedef struct tagWNDCLASSEX {
  UINT      cbSize;
  UINT      style;
  WNDPROC   lpfnWndProc;
  int       cbClsExtra;
  int       cbWndExtra;
  HINSTANCE hInstance;
  HICON     hIcon;
  HCURSOR   hCursor;
  HBRUSH    hbrBackground;
  LPCTSTR   lpszMenuName;
  LPCTSTR   lpszClassName;
  HICON     hIconSm;
} WNDCLASSEX, *PWNDCLASSEX;
"""
constant idWNDCLASSEX = define_struct(tWNDCLASSEX)

constant tPOINT = """
typedef struct tagPOINT {
  LONG x;
  LONG y;
} POINT, *PPOINT;
"""
--constant idPOINT = define_struct(tPOINT)
{} = define_struct(tPOINT)
           
constant tMESSAGE = """
typedef struct tagMSG {
  HWND   hwnd;
  UINT   message;
  WPARAM wParam;
  LPARAM lParam;
  DWORD  time;
  POINT  pt;
} MSG, *PMSG, *LPMSG;
"""
constant idMESSAGE = define_struct(tMESSAGE)

constant tRECT = """
typedef struct _RECT {
  LONG left;
  LONG top;
  LONG right;
  LONG bottom;
} RECT, *PRECT;
"""
constant idRECT = define_struct(tRECT)         

constant tPAINTSTRUCT = """
typedef struct tagPAINTSTRUCT {
  HDC  hdc;
  BOOL fErase;
  RECT rcPaint;
  BOOL fRestore;
  BOOL fIncUpdate;
  BYTE rgbReserved[32];
} PAINTSTRUCT, *PPAINTSTRUCT;
"""
constant idPAINTSTRUCT = define_struct(tPAINTSTRUCT)

--/*
--constant cbSize = 0,
--       style  = 4,
--       lpfnWndProc = 8,
--       cbClsExtra = 12,
--       cbWndExtra = 16,
--       hInstance  = 20,
--       hIcon      = 24,
--       hCursor    = 28,
--       hbrBackground = 32,
--       lpszMenuName  = 36,
--       lpszClassName = 40,
--       hIconSm = 44,
--       SIZE_OF_WNDCLASS = 48 -- (to be safe) 48

--constant SIZE_OF_MESSAGE = 40 -- (to be safe) 28
--*/

constant CS_HREDRAW = 2,
         CS_VREDRAW = 1

constant SW_SHOWNORMAL = 1

constant WM_CREATE = #0001,
         WM_DESTROY= #0002,
         WM_SIZE   = #0005,
         WM_PAINT  = #000F,
         WM_CLOSE  = #0010,
         WM_CHAR   = #0102,
         WM_TIMER  = #0113,
        $
         
constant SND_FILENAME = #00020000,
         SND_ASYNC    = #00000001
         
constant 
--       DT_SINGLELINE = #0020,
--       DT_CENTER     = #0001,
--       DT_VCENTER    = #0004,
         DT_WORDBREAK  = #0010

-- now defined in builtin\porall.e
--function or_all(sequence s)
---- or together all elements of a sequence
--atom result
--  
--  result = 0
--  for i = 1 to length(s) do
--      result = or_bits(result, s[i])
--  end for
--  return result
--end function

constant WS_OVERLAPPED  = #00000000,
         WS_CAPTION     = #00C00000,
         WS_SYSMENU     = #00080000,
         WS_THICKFRAME  = #00040000,
         WS_MINIMIZEBOX = #00020000,
         WS_MAXIMIZEBOX = #00010000 

constant IDI_APPLICATION = 32512, 
         IDC_ARROW = 32512, 
         WHITE_BRUSH = 0,
         CW_USE_DEFAULT = #80000000,
         WS_OVERLAPPEDWINDOW = or_all({WS_OVERLAPPED, WS_CAPTION, WS_SYSMENU,
                                       WS_THICKFRAME, WS_MINIMIZEBOX, 
                                       WS_MAXIMIZEBOX})
         
string big, wav
atom pPAINTSTRUCT, pRECT
--, pWAV
--, big_string
--  ps = allocate(64)
    pPAINTSTRUCT = allocate_struct(idPAINTSTRUCT)
--  rect = allocate(16) 
    pRECT = allocate_struct(idRECT) 
--  pWAV = allocate_string("\\Windows\\Media\\notify.wav")
    wav = "\\Windows\\Media\\notify.wav"
    big = "Resize This Window!  "
    for i = 1 to 10 do
        big &= big  -- (ie repeats the above 1024 times, resulting in 22K of text)
    end for
--DEV not needed for Phix!
--  big_string = allocate_string(big)

global function WndProc(atom hwnd, atom iMsg, atom wParam, atom lParam)
-- callback routine to handle Window class
    
--if not find(iMsg,{1,3,5,6,7,8,15,20,24,28,32,36,70,71,127,129,131,132,133,134,160,275,512,641,642,674,799,49338}) then
--?{iMsg,wParam,lParam}
--end if
    if iMsg = WM_CREATE then
        return 0
    
    elsif iMsg = WM_PAINT then
        hdc = c_func(xBeginPaint, {hwnd, pPAINTSTRUCT})
        if hdc=NULL then
            puts(1,"BeginPaint failed")
            abort(1)
        end if
        if not c_func(xGetClientRect, {hwnd, pRECT}) then
            puts(1,"GetClientRect failed")
            abort(1)
        end if
--      c_proc(xDrawText, {hdc, big_string, -1, pRECT, DT_WORDBREAK})
        c_proc(xDrawText, {hdc, big, -1, pRECT, DT_WORDBREAK})
        c_proc(xEndPaint, {hwnd, pPAINTSTRUCT})
        if c_func(xSetTimer, {hwnd, 1, 10, NULL})=0 then
            crash("SetTimer failed")
        end if
        return 0
        
    elsif iMsg = WM_SIZE then
--      c_proc(xPlaySound, {pWAV,NULL,or_bits(SND_FILENAME, SND_ASYNC)})
        c_proc(xPlaySound, {wav,NULL,or_bits(SND_FILENAME, SND_ASYNC)})
        xpixels = and_bits(lParam, #FFFF)
        ypixels = and_bits(lParam/#10000, #FFFF)
    
    elsif iMsg = WM_TIMER then
        hdc = c_func(xGetDC, {hwnd})
        if hdc=NULL then
            crash("GetDC failed")
        end if
        -- make 5 iterations before giving control back to Windows
        for i = 1 to 5 do
--      for i = 1 to 1 do -- looks better, but slower
            spin()
        end for
        if c_func(xReleaseDC, {hwnd, hdc})=0 then
            crash("ReleaseDC failed")
        end if
        return 0
        
    elsif iMsg = WM_CHAR then
        c_proc(xSendMessage,{hwnd,WM_CLOSE,0,0})

    elsif iMsg = WM_DESTROY then
        c_proc(xPostQuitMessage, {0})
        if c_func(xKillTimer, {hwnd, 1})=0 then
            crash("KillTimer failed")
        end if
        return 0
        
    end if
    
    return c_func(xDefWindowProc, {hwnd, iMsg, wParam, lParam})
end function

procedure WinMain()
-- main routine 
atom szAppName
atom hwnd
--atom msg
atom pMSG
--atom wndclass
atom pWndclass
atom WndProcAddress
atom class
integer id
sequence cwp    -- CreateWindow params
    
--  wndclass = allocate(SIZE_OF_WNDCLASS)
    pWndclass = allocate_struct(idWNDCLASSEX)
--  msg = allocate(SIZE_OF_MESSAGE)
    pMSG = allocate_struct(idMESSAGE)
    szAppName = allocate_string("HelloWin")
    
    id = routine_id("WndProc")
    if id = -1 then
        puts(1, "routine_id failed!\n")
        abort(1)
    end if
    WndProcAddress = call_back(id) -- get 32-bit address for callback
    
--  poke4(wndclass + cbSize, SIZE_OF_WNDCLASS)
--  poke4(wndclass + style, or_bits(CS_HREDRAW, CS_VREDRAW))
--  poke4(wndclass + lpfnWndProc, WndProcAddress)
--  poke4(wndclass + cbClsExtra, 0)
--  poke4(wndclass + cbWndExtra, 0)
--  poke4(wndclass + hInstance, 0) --hInstance
--  poke4(wndclass + hIcon, c_func(xLoadIcon, {NULL, IDI_APPLICATION}))
--  poke4(wndclass + hCursor, c_func(xLoadCursor, {NULL, IDC_ARROW}))
--  poke4(wndclass + hbrBackground, c_func(xGetStockObject, {WHITE_BRUSH}))
--  poke4(wndclass + lpszMenuName, NULL)
--  poke4(wndclass + lpszClassName, szAppName)
--  poke4(wndclass + hIconSm, c_func(xLoadIcon, {NULL, IDI_APPLICATION}))
    
    set_struct_field(idWNDCLASSEX,pWndclass,"cbSize",get_struct_size(idWNDCLASSEX))
    set_struct_field(idWNDCLASSEX,pWndclass,"style",or_bits(CS_HREDRAW, CS_VREDRAW))
    set_struct_field(idWNDCLASSEX,pWndclass,"lpfnWndProc",WndProcAddress)
    set_struct_field(idWNDCLASSEX,pWndclass,"hIcon",c_func(xLoadIcon, {NULL, IDI_APPLICATION}))
    set_struct_field(idWNDCLASSEX,pWndclass,"hCursor",c_func(xLoadCursor, {NULL, IDC_ARROW}))
    set_struct_field(idWNDCLASSEX,pWndclass,"hbrBackground",c_func(xGetStockObject, {WHITE_BRUSH}))
    set_struct_field(idWNDCLASSEX,pWndclass,"lpszClassName",szAppName)
    set_struct_field(idWNDCLASSEX,pWndclass,"hIconSm",c_func(xLoadIcon, {NULL, IDI_APPLICATION}))

    class = c_func(xRegisterClassEx, {pWndclass})
    if class = 0 then
        puts(1, "Couldn't register class\n")
        abort(1)
    end if
    -- CreateWindow parameters
    cwp = { 0,                       -- extended style
            szAppName,               -- window class name
            "Phix winwire demo",     -- window caption
            WS_OVERLAPPEDWINDOW,     -- window style
            CW_USE_DEFAULT,          -- initial x position
            CW_USE_DEFAULT,          -- initial y position
            CW_USE_DEFAULT,          -- initial x size
            CW_USE_DEFAULT,          -- initial y size
            NULL,                    -- parent window handle
            NULL,                    -- window menu handle
            0 ,                      -- hInstance // program instance handle
            NULL }                   -- creation parameters
    hwnd = c_func(xCreateWindowEx, cwp)
    if hwnd = 0 then
        puts(1, "Couldn't CreateWindow\n")
        abort(1)
    end if
    c_proc(xShowWindow, {hwnd, SW_SHOWNORMAL})
    c_proc(xUpdateWindow, {hwnd})

    while c_func(xGetMessage, {pMSG, NULL, 0, 0}) do
        c_proc(xTranslateMessage, {pMSG})
        c_proc(xDispatchMessage, {pMSG})
    end while
    free(szAppName)
    free(pWndclass)
    free(pMSG)
end procedure

WinMain()
--free(pWAV)
--free(big_string)
free(pPAINTSTRUCT)
free(pRECT) 
--!/**/c_cleanup()

--puts(1,"exiting...\n")

