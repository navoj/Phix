
-- wrapper for Windows Message Box function

--/*
include ..\..\builtins\dll.e
include ..\..\builtins\machine.e
include ..\..\builtins\misc.e
--*/

include "misc_arwen.e"

without warning


--/* Not required for Phix (see psym.e)
-- Possible style values for message_box() style sequence
global constant 

    MB_APPLMODAL    = #00,      -- User must respond before doing something else
    MB_SYSTEMMODAL  = #1000,    -- All applications suspended until user responds
    MB_TASKMODAL    = #2000,    -- Similar to MB_APPLMODAL 
    MB_TOPMOST      = #40000,

    MB_DEFAULT_DESKTOP_ONLY = #20000,  
  
    MB_DEFBUTTON1 = #00,    -- First button is default button
    MB_DEFBUTTON2 = #100,   -- Second button is default button
    MB_DEFBUTTON3 = #200,   -- Third button is default button
    MB_DEFBUTTON4 = #300,   -- Fourth button is default button

    MB_OK               = #00,  -- Message box contains one push button: OK
    MB_OKCANCEL         = #01,  -- Message box contains OK and Cancel
    MB_ABORTRETRYIGNORE = #02,  -- Abort, Retry, Ignore
    MB_YESNOCANCEL      = #03,  -- Message box contains Yes, No, and Cancel
    MB_YESNO            = #04,  -- Message box contains Yes and No
    MB_RETRYCANCEL      = #05,  -- Message box contains Retry and Cancel

    MB_USERICON         = 128,
    MB_ICONERROR        = #10,  -- A hand appears 
    MB_ICONQUESTION     = #20,  -- A question-mark icon appears
    MB_ICONEXCLAMATION  = #30,  -- Exclamation-point appears in the box
    MB_ICONINFORMATION  = #40,  -- Lowercase letter i in a circle appears
    MB_ICONHAND         = MB_ICONERROR,
    MB_ICONSTOP         = MB_ICONERROR,
    MB_ICONWARNING      = MB_ICONEXCLAMATION,
    MB_ICONASTERISK     = MB_ICONINFORMATION,

    MB_RIGHT            = #80000,   -- Windows 95: The text is right-justified
    MB_RTLREADING       = #100000,  -- Windows 95: For Hebrew and Arabic systems
    MB_SERVICE_NOTIFICATION = #40000, -- Windows NT: The caller is a service 
    MB_SETFOREGROUND    = #10000,   -- Message box becomes the foreground window 
    MB_HELP             = #4000,    -- Windows 95: Help button generates help event

-- Return values from MessageBox() 
--  IDERROR     = 0,    -- FAILURE (constant doesn't exist)
    IDOK        = 1,    -- OK button was selected.
    IDCANCEL    = 2,    -- Cancel button was selected.
    IDABORT     = 3,    -- Abort button was selected.
    IDRETRY     = 4,    -- Retry button was selected.
    IDIGNORE    = 5,    -- Ignore button was selected.
    IDYES       = 6,    -- Yes button was selected. 
    IDNO        = 7     -- No button was selected.
--*/

atom lib
integer msgbox_id, get_active_id

integer minit
        minit = 0

procedure abort_message(sequence error_msg)
    puts(2, error_msg & "\n\n")
    ?9/0
    abort(1)
end procedure


procedure init_messagebox()

    -- abort if platform is not Windows
    if platform() != WIN32 then
        abort_message("ERROR - Program attempting to use \"message_box.ew\" with non-Windows application.")
    end if

    -- open dll library to access message box functions
    lib = open_dll("user32.dll")

    -- link dll functions
    msgbox_id       = define_c_func(lib, "MessageBoxA", {C_POINTER, C_POINTER, C_POINTER, C_INT}, C_INT)
    get_active_id   = define_c_func(lib, "GetActiveWindow", {}, C_LONG)

    -- abort on fatal link error
    if msgbox_id = -1 or get_active_id = -1 then
        abort_message("Error - \"message_box.ew\" unable to link all DLL functions\n")
    end if

    minit = 1

end procedure


global function messageBox(sequence title, sequence text, object style)
atom lpText, lpTitle, ret

    if not minit then init_messagebox() end if

    -- reserve space for TITLE string
    lpTitle = allocate_string(title)
    if not lpTitle then
        return 0
    end if

    -- reserve space for TEXT string
    lpText = allocate_string(text)
    if not lpText then
        free(lpTitle)
        return 0
    end if

    -- ensure style param is "ORed" into an integer
    if sequence(style) then
        style = or_all(style)
    end if

--  style = or_bits(MB_TASKMODAL, style)

    ret = c_func(msgbox_id, {c_func(get_active_id, {}), lpText, lpTitle, style})
    free(lpText)
    free(lpTitle)
    return ret

end function

global procedure WarnErr(sequence err_msg)
integer void
    void = messageBox("Warning", err_msg, {MB_OK, MB_ICONERROR})
end procedure

global procedure FatalErr(sequence err_msg)
integer void
    void = messageBox("Fatal Error", err_msg & "\n\nProgram aborting.", {MB_OK, MB_ICONERROR})
    ?9/0
    abort(1)
end procedure
