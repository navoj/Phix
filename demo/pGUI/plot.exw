--
-- demo/pGUI/plot.exw
-- ==================
--
--  translated from https://webserver2.tecgraf.puc-rio.br/iup/examples/C/plot.c by Pete Lomax 24/2/2017
--
/*
 * IupPlot Test
 * Description : Create all built-in plots.
 *               It is organised as two side-by-side panels:
 *                 - left panel for current plot control
 *                 - right panel containg tabbed plots
 *      Remark : depend on libs IUP, CD, IUP_PLOT
 */

--#withtype Ihandle
--#withtype Ihandles
--#withtype cdCanvas

include pGUI.e

function esc_close(Ihandle /*ih*/, atom c)
    if c=K_ESC then return IUP_CLOSE end if
    return IUP_CONTINUE
end function

constant MAXPLOT = 6  /* room for examples */

Ihandles plots = {}
Ihandle dial1, dial2,           /* dials for zooming */
        tgg1, tgg2,             /* autoscale on|off toggles */
        tgg3, tgg4,             /* grid show|hide toggles */
        tgg5,                   /* legend show|hide toggle */
        tabs;                   /* tabbed control */

function delete_cb(Ihandle ih, integer index, integer sample_index, atom x, atom y)
    printf(1, "DELETE_CB(%d, %d, %g, %g)\n", {index, sample_index, x, y});
    return IUP_DEFAULT;
end function

function select_cb(Ihandle ih, integer index, integer sample_index, atom x, atom y, integer selected)
    printf(1, "SELECT_CB(%d, %d, %g, %g, %d)\n", {index, sample_index, x, y, selected});
    return IUP_DEFAULT;
end function

--/*
function edit_cb(Ihandle /*ih*/, integer index, integer sample_index, atom x, atom y, atom pNew_x, atom pNew_y)
    printf(1,"EDIT_CB(%d, %d, %g, %g, %g, %g)\n", {index, sample_index, x, y, iup_peek_double(pNew_x), iup_peek_double(pNew_y)})
    return IUP_DEFAULT
end function
--*/

function postdraw_cb(Ihandle ih, cdCanvas cnv)
atom {ix, iy} = IupPlotTransform(ih, 0.003, 0.02)
    cdCanvasFont(cnv, NULL, CD_BOLD, 10);
    {} = cdCanvasTextAlignment(cnv, CD_SOUTH);
    cdCanvasText(cnv, ix, iy, "My Inline Legend");
    printf(1,"POSTDRAW_CB()\n");

    return IUP_DEFAULT;
end function

function predraw_cb(Ihandle ih, cdCanvas cnv)
    printf(1,"PREDRAW_CB()\n");
    return IUP_DEFAULT;
end function

procedure InitPlots()
atom x, y, factor;

    /************************************************************************/
    /* PLOT 1 - MakeExamplePlot1 */
    Ihandle plot1 = plots[1]
    IupSetAttribute(plot1, "TITLE", "AutoScale");
    IupSetAttribute(plot1, "FONT", "Helvetica, 10");
  --  IupSetAttribute(plot1, "MARGINTOP", "40");
  --  IupSetAttribute(plot1, "MARGINLEFT", "40");
  --  IupSetAttribute(plot1, "MARGINBOTTOM", "50");
--  IupSetAttribute(plot1, "TITLEFONTSIZE", "16");
    IupSetAttribute(plot1, "LEGENDSHOW", "YES");
    IupSetAttribute(plot1, "AXS_XLABEL", "gnu (Foo)");
    IupSetAttribute(plot1, "AXS_YLABEL", "Space (m^3)");
--  IupSetAttribute(plot1, "AXS_YFONTSIZE", "8");
--  IupSetAttribute(plot1, "AXS_YTICKFONTSIZE", "8");
--  IupSetAttribute(plot1, "AXS_XFONTSIZE", "10");
--  IupSetAttribute(plot1, "AXS_YFONTSIZE", "10");
    IupSetAttribute(plot1, "AXS_XCROSSORIGIN", "Yes");
    IupSetAttribute(plot1, "AXS_YCROSSORIGIN", "Yes");

--  IupSetAttribute(plot1, "GRAPHICSMODE", "OPENGL");
--  IupSetAttribute(plot1, "GRAPHICSMODE", "IMAGERGB");
--  IupSetAttribute(plot1, "ACTIVE", "No");

--#if 0
--  {
--  Ihandle image = IupLoadImage("../test/corsega.tif");
--  if (image)
--  {
--    IupSetAttributeHandle(plot1, "BACKIMAGE", image);
--    IupSetAttribute(plot1, "BACKIMAGE_XMIN", "-100");
--    IupSetAttribute(plot1, "BACKIMAGE_XMAX", "150");
--    IupSetAttribute(plot1, "BACKIMAGE_YMIN", "-2");
--    IupSetAttribute(plot1, "BACKIMAGE_YMAX", "2");
--  }
--  }
--#endif

    factor = 1.0/(100*100*100);
    IupPlotBegin(plot1, 0);
    for i=-100 to 100 do
        x = (i+50);
        y = factor*i*i*i;
        IupPlotAdd(plot1, x, y);
    end for
    {} = IupPlotEnd(plot1);
    IupSetAttribute(plot1, "DS_LINEWIDTH", "3");
    IupSetAttribute(plot1, "DS_LEGEND", "Line");
--  IupSetAttribute(plot1, "DS_MODE", "AREA");

    factor = 2.0/100;
    IupPlotBegin(plot1, 0);
    for i=-100 to -1 do
        x = i;
        y = -factor*i;
        IupPlotAdd(plot1, x, y);
    end for

    integer index = IupPlotEnd(plot1); /* add an empty plot */
    sequence px = repeat(0,210),
             py = repeat(0,210)
    integer count = 0;
    for i=1 to 100 do
        x = i;
        y = -factor*i;
        px[i] = x;
        py[i] = y;
        count += 1
    end for
    --IupPlotAddSamples(plot1, index, px, py, count);
    IupPlotInsertSamples(plot1, index, 100, px, py, count);

    IupSetAttribute(plot1, "DS_LEGEND", "Curve 1");

    IupPlotBegin(plot1, 0);
    for i=-100 to 100 do
        x = (0.01*i*i-30);
        y = 0.01*i;
        IupPlotAdd(plot1, x, y);
    end for
    {} = IupPlotEnd(plot1);
    IupSetAttribute(plot1, "DS_LEGEND", "Curve 2");

    /************************************************************************/
    /* PLOT 2 */
    Ihandle plot2 = plots[2]
    IupSetAttribute(plot2, "TITLE", "No Autoscale+No CrossOrigin");
    IupSetAttribute(plot2, "FONT", "Helvetica, 10");
  --  IupSetAttribute(plot2, "TITLEFONTSIZE", "16");
  --  IupSetAttribute(plot2, "MARGINTOP", "40");
  --IupSetAttribute(plot2, "MARGINLEFT", "65");
  --IupSetAttribute(plot2, "MARGINBOTTOM", "60");
    IupSetAttribute(plot2, "BGCOLOR", "0 192 192");
    IupSetAttribute(plot2, "AXS_XLABEL", "Tg (X)");
    IupSetAttribute(plot2, "AXS_YLABEL", "Tg (Y)");
    IupSetAttribute(plot2, "AXS_XAUTOMIN", "NO");
    IupSetAttribute(plot2, "AXS_XAUTOMAX", "NO");
    IupSetAttribute(plot2, "AXS_YAUTOMIN", "NO");
    IupSetAttribute(plot2, "AXS_YAUTOMAX", "NO");
    IupSetAttribute(plot2, "AXS_XMIN", "10");
    IupSetAttribute(plot2, "AXS_XMAX", "60");
    IupSetAttribute(plot2, "AXS_YMIN", "-0.5");
    IupSetAttribute(plot2, "AXS_YMAX", "0.5");
    IupSetAttribute(plot2, "AXS_XFONTSTYLE", "ITALIC");
    IupSetAttribute(plot2, "AXS_YFONTSTYLE", "BOLD");
    IupSetAttribute(plot2, "AXS_XREVERSE", "YES");
    IupSetAttribute(plot2, "GRIDCOLOR", "128 255 128");
    IupSetAttribute(plot2, "GRIDLINESTYLE", "DOTTED");
    IupSetAttribute(plot2, "GRID", "YES");
    IupSetAttribute(plot2, "LEGENDSHOW", "YES");
    IupSetAttribute(plot2, "AXS_XLABELCENTERED", "Yes");
    IupSetAttribute(plot2, "AXS_YLABELCENTERED", "Yes");
    IupSetAttribute(plot2, "GRAPHICSMODE", "IMAGERGB");

    factor = 1.0/(100*100*100);
    IupPlotBegin(plot2, 0);
    for i=0 to 100 do
        x = i
        y = factor*i*i*i
        IupPlotAdd(plot2, x, y)
    end for
    {} = IupPlotEnd(plot2);

    factor = 2.0/100;
    IupPlotBegin(plot2, 0);
    for i=0 to 100 do
        x = i
        y = -factor*i
        IupPlotAdd(plot2, x, y)
    end for
    {} = IupPlotEnd(plot2);

    /************************************************************************/
    /* PLOT 3 */
    Ihandle plot3 = plots[3]
    IupSetAttribute(plot3, "TITLE", "Log Scale");
--  IupSetAttribute(plot3, "TITLEFONTSIZE", "16");
  --IupSetAttribute(plot3, "MARGINTOP", "40");
  --IupSetAttribute(plot3, "MARGINLEFT", "70");
  --IupSetAttribute(plot3, "MARGINBOTTOM", "60");
    IupSetAttribute(plot3, "GRID", "YES");
    IupSetAttribute(plot3, "AXS_XSCALE", "LOG10");
    IupSetAttribute(plot3, "AXS_YSCALE", "LOG2");
    IupSetAttribute(plot3, "AXS_XLABEL", "Tg (X)");
    IupSetAttribute(plot3, "AXS_YLABEL", "Tg (Y)");
    IupSetAttribute(plot3, "AXS_XFONTSTYLE", "BOLD");
    IupSetAttribute(plot3, "AXS_YFONTSTYLE", "BOLD");

    factor = 100.0/(100*100*100);
    IupPlotBegin(plot3, 0);
    for i=0 to 100 do
        x = (0.0001+i*0.001);
        y = (0.01+factor*i*i*i);
        IupPlotAdd(plot3, x, y);
    end for
    {} = IupPlotEnd(plot3);
    IupSetAttribute(plot3, "DS_COLOR", "100 100 200");
    IupSetAttribute(plot3, "DS_LINESTYLE", "DOTTED");

    /************************************************************************/
    /* PLOT 4 */
    Ihandle plot4 = plots[4]
    IupSetAttribute(plot4, "TITLE", "Bar Mode");
--  IupSetAttribute(plot4, "TITLEFONTSIZE", "16");
  --IupSetAttribute(plot4, "MARGINTOP", "40");
  --IupSetAttribute(plot4, "MARGINLEFT", "30");
  --IupSetAttribute(plot4, "MARGINBOTTOM", "30");
--  IupSetAttribute(plot4, "AXS_XTICKROTATENUMBER", "YES");

    sequence kLables = {"jan","feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"}
    sequence kData = {10,20,30,40,50,60,70,80,90,0,10,20}
    IupPlotBegin(plot4, 1);
    for i=1 to 12 do
        IupPlotAddStr(plot4, kLables[i], kData[i]);
    end for

    {} = IupPlotEnd(plot4);
    IupSetAttribute(plot4, "DS_COLOR", "100 100 200");
    IupSetAttribute(plot4, "DS_MODE", "BAR");

    /************************************************************************/
    /* PLOT 5 */
    Ihandle plot5 = plots[5]
    IupSetAttribute(plot5, "TITLE", "Marks Mode");
--  IupSetAttribute(plot5, "TITLEFONTSIZE", "16");
  --  IupSetAttribute(plot5, "MARGINTOP", "40");
  --IupSetAttribute(plot5, "MARGINLEFT", "45");
  --IupSetAttribute(plot5, "MARGINBOTTOM", "40");
    IupSetAttribute(plot5, "AXS_XAUTOMIN", "NO");
    IupSetAttribute(plot5, "AXS_XAUTOMAX", "NO");
    IupSetAttribute(plot5, "AXS_YAUTOMIN", "NO");
    IupSetAttribute(plot5, "AXS_YAUTOMAX", "NO");
    IupSetAttribute(plot5, "AXS_XMIN", "0");
    IupSetAttribute(plot5, "AXS_XMAX", "0.011");
    IupSetAttribute(plot5, "AXS_YMIN", "0");
    IupSetAttribute(plot5, "AXS_YMAX", "0.22");
    IupSetAttribute(plot5, "AXS_XTICKFORMAT", "%1.3f");
    IupSetAttribute(plot5, "LEGENDSHOW", "YES");
    IupSetAttribute(plot5, "LEGENDPOS", "BOTTOMRIGHT");

    factor = 100.0/(100*100*100);
    IupPlotBegin(plot5, 0);
    for i=0 to 10 do
        x = (0.0001+i*0.001);
        y = (0.01+factor*i*i);
        IupPlotAdd(plot5, x, y);
    end for
    {} = IupPlotEnd(plot5);
    IupSetAttribute(plot5, "DS_MODE", "MARKLINE");

    IupPlotBegin(plot5, 0);
    for i=0 to 10 do
        x = (0.0001+i*0.001);
        y = (0.2-factor*i*i);
        IupPlotAdd(plot5, x, y);
    end for
    {} = IupPlotEnd(plot5);
    IupSetAttribute(plot5, "DS_MODE", "MARK");
    IupSetAttribute(plot5, "DS_MARKSTYLE", "HOLLOW_CIRCLE");

    /************************************************************************/
    /* PLOT 6 */
    Ihandle plot6 = plots[6]
    IupSetAttribute(plot6, "TITLE", "Data Selection and Editing");
  --IupSetAttribute(plot6, "TITLEFONTSIZE", "16");
  --IupSetAttribute(plot6, "MARGINTOP", "40");

--#if 0
--  IupPlotLoadData(plot6, "../test/plot.dat", 0);
--#else
    factor = 100.0/(100*100*100);
    IupPlotBegin(plot6, 0);
    for i=-10 to 10 do
        x = (0.001*i);
        y = (0.01+factor*i*i*i);
        IupPlotAdd(plot6, x, y);
    end for
    {} = IupPlotEnd(plot6);

    IupSetAttribute(plot6, "AXS_XCROSSORIGIN", "Yes");
    IupSetAttribute(plot6, "AXS_YCROSSORIGIN", "Yes");
--#endif

    IupSetAttribute(plot6, "DS_COLOR", "100 100 200");
    IupSetCallback(plot6, "DELETE_CB", Icallback("delete_cb"));
    IupSetCallback(plot6, "SELECT_CB", Icallback("select_cb"));
    IupSetCallback(plot6, "POSTDRAW_CB", Icallback("postdraw_cb"));
    IupSetCallback(plot6, "PREDRAW_CB", Icallback("predraw_cb"));
end procedure

function tabs_get_plot(Ihandln tab=NULL)
    if tab=NULL then
        tab = IupGetHandle(IupGetAttribute(tabs, "VALUE"))
    end if
    string ss = IupGetAttribute(tab, "TABTITLE");
    sequence s = scanf(ss,"Plot %d")
    if length(s)!=1 then ?9/0 end if
    if length(s[1])!=1 then ?9/0 end if
    integer i = s[1][1]
    Ihandle hPlot = plots[i]
    return hPlot
end function

/* Some processing required by current tab change: the controls at left
   will be updated according to current plot props */
function tabs_tabchange_cb(Ihandle self, Ihandle new_tab)
Ihandle hPlot = tabs_get_plot(new_tab)

    /* autoscaling X axis */
    if  IupGetInt(hPlot, "AXS_XAUTOMIN")
    and IupGetInt(hPlot, "AXS_XAUTOMAX") then
        IupSetAttribute(tgg2, "VALUE", "ON");
        IupSetAttribute(dial2, "ACTIVE", "NO");
    else
        IupSetAttribute(tgg2, "VALUE", "OFF");
        IupSetAttribute(dial2, "ACTIVE", "YES");
    end if
    /* autoscaling Y axis */
    if  IupGetInt(hPlot, "AXS_YAUTOMIN")
    and IupGetInt(hPlot, "AXS_YAUTOMAX") then
        IupSetAttribute(tgg1, "VALUE", "ON");
        IupSetAttribute(dial1, "ACTIVE", "NO");
    else
        IupSetAttribute(tgg1, "VALUE", "OFF");
        IupSetAttribute(dial1, "ACTIVE", "YES");
    end if

    /* grid */
    if IupGetInt(hPlot, "GRID") then
        IupSetAttribute(tgg3, "VALUE", "ON");
        IupSetAttribute(tgg4, "VALUE", "ON");
    else
        string g = IupGetAttribute(hPlot, "GRID")
        /* X axis */
        if g[1]=='V' then
            IupSetAttribute(tgg3, "VALUE", "ON");
        else
            IupSetAttribute(tgg3, "VALUE", "OFF");
        end if
        /* Y axis */
        if g[1]=='H' then
            IupSetAttribute(tgg4, "VALUE", "ON");
        else
            IupSetAttribute(tgg4, "VALUE", "OFF");
        end if
    end if

    /* legend */
    if IupGetInt(hPlot, "LEGENDSHOW") then
        IupSetAttribute(tgg5, "VALUE", "ON");
    else
        IupSetAttribute(tgg5, "VALUE", "OFF");
    end if

    return IUP_DEFAULT;
end function

/* show/hide V grid */
function tgg3_cb(Ihandle self, integer v)
Ihandle hPlot = tabs_get_plot()

    if v then
        if IupGetInt(tgg4, "VALUE") then
            IupSetAttribute(hPlot, "GRID", "YES");
        else
            IupSetAttribute(hPlot, "GRID", "VERTICAL");
        end if
    else
        if not IupGetInt(tgg4, "VALUE") then
            IupSetAttribute(hPlot, "GRID", "NO");
        else
            IupSetAttribute(hPlot, "GRID", "HORIZONTAL");
        end if
    end if

    IupSetAttribute(hPlot, "REDRAW", NULL);

    return IUP_DEFAULT;
end function


/* show/hide H grid */
function tgg4_cb(Ihandle self, integer v)
Ihandle hPlot = tabs_get_plot()

    if v then
        if IupGetInt(tgg3, "VALUE") then
            IupSetAttribute(hPlot, "GRID", "YES");
        else
            IupSetAttribute(hPlot, "GRID", "HORIZONTAL");
        end if
    else
        if not IupGetInt(tgg3, "VALUE") then
            IupSetAttribute(hPlot, "GRID", "NO");
        else
            IupSetAttribute(hPlot, "GRID", "VERTICAL");
        end if
    end if

    IupSetAttribute(hPlot, "REDRAW", NULL);

    return IUP_DEFAULT;
end function


/* show/hide legend */
function tgg5_cb(Ihandle self, integer v)
Ihandle hPlot = tabs_get_plot()

    if v then
        IupSetAttribute(hPlot, "LEGENDSHOW", "YES");
    else
        IupSetAttribute(hPlot, "LEGENDSHOW", "NO");
    end if

    IupSetAttribute(hPlot, "REDRAW", NULL);

    return IUP_DEFAULT;
end function


/* autoscale Y */
function tgg1_cb(Ihandle self, integer v)
Ihandle hPlot = tabs_get_plot()

    if v then
        IupSetAttribute(dial1, "ACTIVE", "NO");
        IupSetAttribute(hPlot, "AXS_YAUTOMIN", "YES");
        IupSetAttribute(hPlot, "AXS_YAUTOMAX", "YES");
    else
        IupSetAttribute(dial1, "ACTIVE", "YES");
        IupSetAttribute(hPlot, "AXS_YAUTOMIN", "NO");
        IupSetAttribute(hPlot, "AXS_YAUTOMAX", "NO");
    end if

    IupSetAttribute(hPlot, "REDRAW", NULL);

    return IUP_DEFAULT;
end function


/* autoscale X */
function tgg2_cb(Ihandle self, integer v)
Ihandle hPlot = tabs_get_plot()

    if v then
        IupSetAttribute(dial2, "ACTIVE", "NO");
        IupSetAttribute(hPlot, "AXS_XAUTOMIN", "YES");
        IupSetAttribute(hPlot, "AXS_XAUTOMAX", "YES");
    else
        IupSetAttribute(dial2, "ACTIVE", "YES");
        IupSetAttribute(hPlot, "AXS_XAUTOMIN", "NO");
        IupSetAttribute(hPlot, "AXS_XAUTOMAX", "NO");
    end if

    IupSetAttribute(hPlot, "REDRAW", NULL);

    return IUP_DEFAULT;
end function


/* Y zoom */
function dial1_btndown_cb(Ihandle self, atom angle)
Ihandle hPlot = tabs_get_plot()

    IupStoreAttribute(hPlot, "OLD_YMIN", IupGetAttribute(hPlot, "AXS_YMIN"));
    IupStoreAttribute(hPlot, "OLD_YMAX", IupGetAttribute(hPlot, "AXS_YMAX"));

    return IUP_DEFAULT;
end function

function dial1_btnup_cb(Ihandle self, atom angle)
Ihandle hPlot = tabs_get_plot()
atom x1, x2, xm;
nullable_string ss;

    x1 = IupGetFloat(hPlot, "OLD_YMIN");
    x2 = IupGetFloat(hPlot, "OLD_YMAX");

    ss = IupGetAttribute(hPlot, "AXS_YMODE");
    if ss!=NULL and length(ss)>=4 and ss[4]=='2' then
        /* LOG2:  one circle will zoom 2 times */
        xm = 4.0*abs(angle)/3.141592;
        if angle>0 then
            x2 /= xm; x1 *= xm;
        else
            x2 *= xm; x1 /= xm;
        end if
    end if
    if ss!=NULL and length(ss)>=4 and ss[4]=='1' then
        /* LOG10:  one circle will zoom 10 times */
        xm = 10.0*abs(angle)/3.141592;
        if angle>0 then
            x2 /= xm; x1 *= xm;
        else
            x2 *= xm; x1 /= xm;
        end if
    else
        /* LIN: one circle will zoom 2 times */
        xm = (x1+x2)/2.0;
        x1 = xm-(xm-x1)*(1.0-angle*1.0/3.141592);
        x2 = xm+(x2-xm)*(1.0-angle*1.0/3.141592);
    end if

    if x1<x2 then
        IupSetStrAttribute(hPlot, "AXS_YMIN", "%g", {x1});
        IupSetStrAttribute(hPlot, "AXS_YMAX", "%g", {x2});
    end if

    IupSetAttribute(hPlot, "REDRAW", NULL);

    return IUP_DEFAULT;
end function


/* X zoom */
function dial2_btndown_cb(Ihandle self, atom angle)
Ihandle hPlot = tabs_get_plot()

    IupStoreAttribute(hPlot, "OLD_XMIN", IupGetAttribute(hPlot, "AXS_XMIN"));
    IupStoreAttribute(hPlot, "OLD_XMAX", IupGetAttribute(hPlot, "AXS_XMAX"));

    return IUP_DEFAULT;
end function

function dial2_btnup_cb(Ihandle self, atom angle)
Ihandle hPlot = tabs_get_plot()
atom x1, x2, xm;

    x1 = IupGetFloat(hPlot, "OLD_XMIN");
    x2 = IupGetFloat(hPlot, "OLD_XMAX");

    xm = (x1+x2)/2.0;

    x1 = xm-(xm-x1)*(1.0-angle*1.0/3.141592); /* one circle will zoom 2 times */
    x2 = xm+(x2-xm)*(1.0-angle*1.0/3.141592);

    IupSetStrAttribute(hPlot, "AXS_XMIN", "%g", {x1});
    IupSetStrAttribute(hPlot, "AXS_XMAX", "%g", {x2});

    IupSetAttribute(hPlot, "REDRAW", NULL);

    return IUP_DEFAULT;
end function

function bt1_cb(Ihandle self)
Ihandle hPlot = tabs_get_plot()
    IupSetAttribute(hPlot, "CLEAR", "Yes");
--  IupSetAttribute(hPlot, "REMOVE", "0");
    IupSetAttribute(hPlot, "REDRAW", NULL);

--  cdCanvas cnv = cdCreateCanvas(CD_PDF, "plot.pdf -o");
--  IupPlotPaintTo(hPlot, cnv);
--  cdKillCanvas(cnv);
    return IUP_DEFAULT;
end function

procedure PlotTest()
Ihandles vboxr = {}     /* tabs containing the plots */
Ihandle dlg, vboxl, hbox, lbl1, lbl2, lbl3, lbl4, lbl5, lbl6, lbl7, bt1,
          boxinfo, boxinfo2, boxdial1, boxdial2, f1, f2;

    IupPlotOpen();   /* init IupPlot library */

    /* create plots */
    for i=1 to MAXPLOT do
        plots = append(plots,IupPlot("MENUITEMPROPERTIES=Yes"))
    end for

    /* left panel: plot control */
    /* Y zooming */
    dial1 = IupDial("VERTICAL");
    lbl1 = IupLabel("+");
    lbl2 = IupLabel("-");
    boxinfo = IupVbox({lbl1, IupFill(), lbl2})
    boxdial1 = IupHbox({boxinfo, dial1})

    IupSetAttribute(boxdial1, "ALIGNMENT", "ACENTER");
    IupSetAttribute(boxinfo, "ALIGNMENT", "ACENTER");
    IupSetAttribute(boxinfo, "SIZE", "20x52");
    IupSetAttribute(boxinfo, "GAP", "2");
    IupSetAttribute(boxinfo, "MARGIN", "4");
    IupSetAttribute(boxinfo, "EXPAND", "YES");
    IupSetAttribute(lbl1, "EXPAND", "NO");
    IupSetAttribute(lbl2, "EXPAND", "NO");

    IupSetAttribute(dial1, "ACTIVE", "NO");
    IupSetAttribute(dial1, "SIZE", "20x52");
    IupSetCallback(dial1, "BUTTON_PRESS_CB", Icallback("dial1_btndown_cb"));
    IupSetCallback(dial1, "MOUSEMOVE_CB", Icallback("dial1_btnup_cb"));
    IupSetCallback(dial1, "BUTTON_RELEASE_CB", Icallback("dial1_btnup_cb"));

    tgg1 = IupToggle("Y Autoscale", NULL);
    IupSetCallback(tgg1, "ACTION", Icallback("tgg1_cb"));
    IupSetAttribute(tgg1, "VALUE", "ON");

    f1 = IupFrame(IupVbox({boxdial1, tgg1}))
    IupSetAttribute(f1, "TITLE", "Y Zoom");

    /* X zooming */
    dial2 = IupDial("HORIZONTAL");
    lbl3 = IupLabel("-");
    lbl4 = IupLabel("+");
    boxinfo2 = IupHbox({lbl3, IupFill(), lbl4});
    boxdial2 = IupVbox({dial2, boxinfo2});

    IupSetAttribute(boxdial2, "ALIGNMENT", "ACENTER");
    IupSetAttribute(boxinfo2, "ALIGNMENT", "ACENTER");
    IupSetAttribute(boxinfo2, "SIZE", "64x16");
    IupSetAttribute(boxinfo2, "GAP", "2");
    IupSetAttribute(boxinfo2, "MARGIN", "4");
    IupSetAttribute(boxinfo2, "EXPAND", "HORIZONTAL");

    IupSetAttribute(lbl3, "EXPAND", "NO");
    IupSetAttribute(lbl4, "EXPAND", "NO");

    IupSetAttribute(dial2, "ACTIVE", "NO");
    IupSetAttribute(dial2, "SIZE", "64x16");
    IupSetCallback(dial2, "BUTTON_PRESS_CB", Icallback("dial2_btndown_cb"));
    IupSetCallback(dial2, "MOUSEMOVE_CB", Icallback("dial2_btnup_cb"));
    IupSetCallback(dial2, "BUTTON_RELEASE_CB", Icallback("dial2_btnup_cb"));

    tgg2 = IupToggle("X Autoscale", NULL);
    IupSetCallback(tgg2, "ACTION", Icallback("tgg2_cb"));

    f2 = IupFrame(IupVbox({boxdial2, tgg2}));
    IupSetAttribute(f2, "TITLE", "X Zoom");

    lbl5 = IupLabel("");
    IupSetAttribute(lbl5, "SEPARATOR", "HORIZONTAL");

    tgg3 = IupToggle("Vertical Grid", NULL);
    IupSetCallback(tgg3, "ACTION", Icallback("tgg3_cb"));
    tgg4 = IupToggle("Horizontal Grid", NULL);
    IupSetCallback(tgg4, "ACTION", Icallback("tgg4_cb"));

    lbl6 = IupLabel("");
    IupSetAttribute(lbl6, "SEPARATOR", "HORIZONTAL");

    tgg5 = IupToggle("Legend", NULL);
    IupSetCallback(tgg5, "ACTION", Icallback("tgg5_cb"));

    lbl7 = IupLabel("");
    IupSetAttribute(lbl7, "SEPARATOR", "HORIZONTAL");

    bt1 = IupButton("Export PDF", NULL);
    IupSetCallback(bt1, "ACTION", Icallback("bt1_cb"));

    vboxl = IupVbox({f1, f2, lbl5, tgg3, tgg4, lbl6, tgg5, lbl7, bt1});
    IupSetAttribute(vboxl, "GAP", "4");
    IupSetAttribute(vboxl, "EXPAND", "NO");

    /* right panel: tabs with plots */
    for i=1 to MAXPLOT do
        string name = sprintf("Plot %d",i)
        Ihandle vboxri = IupVbox({plots[i]}, "TABTITLE=\"%s\"",{name}); /* each plot a tab */
        IupSetHandle(name, vboxri)
        vboxr = append(vboxr, vboxri)
    end for

--  tabs = IupZbox(vboxr);
--  IupSetAttribute(tabs, "VALUE", "Plot 3");
    tabs = IupTabs(vboxr);
    IupSetCallback(tabs, "TABCHANGE_CB", Icallback("tabs_tabchange_cb"));

    hbox = IupHbox({vboxl, tabs})
    IupSetAttribute(hbox, "MARGIN", "4x4");
    IupSetAttribute(hbox, "GAP", "10");

    dlg = IupDialog(hbox);
    IupSetAttribute(dlg, "TITLE", "IupPlot Example")
    IupSetCallback(dlg, "K_ANY", Icallback("esc_close"))

    InitPlots() -- must be able to be done independent of dlg Mapping

    {} = tabs_tabchange_cb(tabs, vboxr[1]);

    IupSetAttribute(dlg, "SIZE", "300x");
    IupShowXY(dlg, IUP_CENTER, IUP_CENTER);
    IupSetAttribute(dlg, "SIZE", NULL);
end procedure

procedure main()
    IupOpen()
    IupControlsOpen()
    PlotTest()
    IupMainLoop()
    IupClose()
end procedure

main()
