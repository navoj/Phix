--
-- iup3Dgl.exw
--
--  Simple example of use of 3D OpenGL and IUP.
-- 
--  Creates a dialog with one canvas and draws a rotating cube in it.
--  
--  Author:  Marcelo Gattass, Nov 9 2009. 
--  Translated to Phix by Pete Lomax, May 25 2016
--

include pGUI.e
include opengl.e
include glu.e

--#withtype Ihandle

Ihandle canvas;                 /* canvas handle */
integer width = 640,            /* width and height of the canvas  */
        height = 480;       
atom t = 0;                     /* animation time */

/*------------------------------------------*/
/* Auxiliary functions to draw a color cube */
/*------------------------------------------*/

constant vertices = {{-1,-1, 1}, {-1, 1, 1}, {1, 1, 1}, {1,-1, 1},
                     {-1,-1,-1}, {-1, 1,-1}, {1, 1,-1}, {1,-1,-1}};

procedure polygon(integer a, integer b, integer c, integer d)
    glBegin(GL_POLYGON);
    glVertex3d(vertices[a+1]);
    glVertex3d(vertices[b+1]);
    glVertex3d(vertices[c+1]);
    glVertex3d(vertices[d+1]);
    glEnd();
end procedure

procedure colorCube()

    glColor(1,0,0)
    glNormal(1,0,0);
    polygon(2,3,7,6);

    glColor(0,1,0)
    glNormal(0,1,0);
    polygon(1,2,6,5);

    glColor(0,0,1)
    glNormal(0,0,1);
    polygon(0,3,2,1);


    glColor(1,0,1)
    glNormal(0,-1,0);
    polygon(3,0,4,7);


    glColor(1,1,0)
    glNormal(0,0,-1);
    polygon(4,5,6,7);

    glColor(0,1,1)
    glNormal(-1,0,0);
    polygon(5,4,0,1);

end procedure


/* function called when the canvas is exposed in the screen */
function repaint_cb(Ihandle self)

    IupGLMakeCurrent(self);
    glClearColor(0.3, 0.3, 0.3, 1.0);  /* White */
    glClear(or_bits(GL_COLOR_BUFFER_BIT,GL_DEPTH_BUFFER_BIT));
    glEnable(GL_DEPTH_TEST);

    glMatrixMode(GL_MODELVIEW);
    glPushMatrix();  /* saves current model view in a stack */
    glTranslate(0.0, 0.0 , 0.0);
    glScalef({1.0, 1.0, 1.0});
    glRotate(t,1,0,1);
    colorCube();

    glPopMatrix();

    IupGLSwapBuffers(self);  /* change the back buffer with the front buffer */

    return IUP_DEFAULT; /* returns the control to the main loop */
end function


/* function called in the event of changes in the width or in the height of the canvas */
function resize_cb(Ihandle self, integer new_width, integer new_height)

    IupGLMakeCurrent(self);  /* Make the canvas current in OpenGL */

    /* define the entire canvas as the viewport  */
    glViewport(0,0,new_width,new_height);

    /* transformation applied to each vertex */
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();            /* identity, i. e. no transformation */

    /* projection transformation (orthographic in the xy plane) */
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(60,4/3,1,15);
    gluLookAt({3,3,3}, {0,0,0}, {0,0,1});

    /* update canvas size and repaint */
    width = new_width;
    height = new_height;
    return repaint_cb(canvas);
end function


function idle_cb()
    t += 1;
    return repaint_cb(canvas);
end function

function exit_cb()
    printf(1,"Function to free memory and do finalizations...\n");
    return IUP_CLOSE;
end function

function esc_close(Ihandle /*ih*/, atom c)
-- (I like all my demos to close when escape is keyed)
    if c=K_ESC then return IUP_CLOSE end if
    return IUP_CONTINUE
end function

function initDialog()

Ihandle dialog;  /* dialog containing the canvas */

    canvas = IupGLCanvas("repaint_cb", Icallback("repaint_cb")); /* create _canvas and define its repaint callback */

--  IupSetAttribute(canvas,"IUP_RASTERSIZE","640x480");   /* define the size in pixels */
--  IupSetAttribute(canvas,"IUP_BUFFER","IUP_DOUBLE");    /* define that this OpenGL _canvas has double buffer (front and back) */
--  IupSetAttribute(canvas,"BUFFER","DOUBLE");    /* define that this OpenGL _canvas has double buffer (front and back) */

    /* bind callback actions with callback functions */
    IupSetCallback(canvas, "RESIZE_CB",Icallback("resize_cb"));

    /* create the dialog and set its attributes */
    dialog = IupDialog(canvas, "SIZE=640x480");
    IupSetAttribute(dialog, "TITLE", "IUP_3D_OpenGL");

    IupSetCallback(dialog, "CLOSE_CB", Icallback("exit_cb"));
    IupSetGlobalFunction("IDLE_ACTION", Icallback("idle_cb"));
    IupSetCallback(dialog, "K_ANY",  Icallback("esc_close"))

    return dialog;
end function

procedure main()

Ihandle dialog;

    IupOpen();                                  /* opens the IUP lib */

    IupGLCanvasOpen();                          /* enable use of OpenGL to draw in canvas */

    dialog = initDialog();                      /* create the dialog and canvas */
    IupShowXY(dialog, IUP_CENTER, IUP_CENTER);  /* show in the center of screen */

    IupMainLoop();                              /* give program control to IUP until a return IUP_CLOSE */

    IupClose();                                 /* closes the IUP lib */
end procedure

main()
