without warning



include arwen.ew

ISMENUOWNERDRAWN = 0

constant win_title = "Demonstration of Menu features in ARWEN"
constant CHECKSUBMENU = {"Check SubMenu", "Uncheck SubMenu"}

constant DEMO = create(Window,  win_title, 0, 0, 10,10,650,350,{0,0})

--constant HHH = create(HScroll, "", 0, DEMO, 0,0,0,0, SBS_BOTTOMALIGN)
--constant VVV = create(VScroll, "", 0, DEMO, 0,0,0,0, SBS_RIGHTALIGN)

constant STATUS = create(StatusBar, "" , 0, DEMO,  0,0,350,20,0)
constant STATUSFIELD = create(StatusField, "\tASDFA" , 0, STATUS,  0,0,0,0,0)

constant MENU = create(Menu, "&A Menu" , 0, DEMO, 0,0,0,0,0)

constant MENU1 = create(MenuItem,  "&These are" , 0, MENU, 0,0,0,0,0)
constant MENU2 = create(MenuItem,  "t&ypical" , 0, MENU, 0,0,0,0,0)
         void = create(MenuItem, "-" , 0, MENU, 0,0,0,0,0)
constant MENU3 = create(MenuItem,  "menu" , 0, MENU, 0,0,0,0,0)
constant MENU4 = create(MenuItem,  "entries" , 0, MENU, 0,0,0,0,0)
         void = create(MenuItem,  "-" , 0, MENU, 0,0,0,0,0)
constant MEXIT = create(MenuItem,  "[ Exit ]" , 0, MENU, 0,0,0,0,0)
----
constant SUBMENU = create(Menu, "SubMenu" , 0, DEMO, 0,0,0,0,0)
constant DUMMY = create(MenuItem,  "Blank" , 0, SUBMENU,0,0,0,0,0)
constant DUMMY2 = create(MenuItem,  "Blank" , 0, SUBMENU,0,0,0,0,0)
         void = create(MenuItem,  "-" , 0, SUBMENU, 0,0,0,0,0)
constant SUBMENU1 = create(Menu, "SubMenu" , 0, SUBMENU, 0,0,0,0,0)
constant DUMMY1a = create(MenuItem,  "Blank1" , 0, SUBMENU1, 0,0,0,0,0)
constant DUMM2Ys = create(MenuItem,  "Blank2" , 0, SUBMENU1, 0,0,0,0,0)
constant DUMMY3d = create(MenuItem, "Blank3" , 0, SUBMENU1, 0,0,0,0,0)

constant CHECK = create(Menu, "CheckMarks" , 0, DEMO, 0,0,0,0,0)
constant CHECK1 = create(MenuItem, "Blank1" , 0, CHECK,0,0,0,0,0)
constant CHECK2 = create(MenuItem,  "Blank2" , 0, CHECK,0,0,0,0,0)
constant CHECK3 = create(MenuItem,  "Blank3" , 0, CHECK,0,0,0,0,0)
         void = create(MenuItem,  "-" , 0, CHECK, 0,0,0,0,0)
constant CHECK4 = create(MenuItem,  CHECKSUBMENU[1] , 0, CHECK,0,0,0,0,0)
         void = create(MenuItem,  "-" , 0, CHECK, 0,0,0,0,0)
constant CHECK5 = create(Menu,  "SubMenu" , 0, CHECK,0,0,0,0,0)
constant CHECK6 = create(MenuItem,"[ empty ]" , 0, CHECK5, 0,0,0,0,0)
setEnable(CHECK6, False)

constant RADIO = create(Menu,"RadioButtons" , 0, DEMO, 0,0,0,0,0)
constant RADIO1 = create(MenuItem,  "Radio 1" , 0, RADIO, 0,0,0,0,0)
constant RADIO2 = create(MenuItem,  "Radio 2" , 0, RADIO, 0,0,0,0,0)
constant RADIO3 = create(MenuItem,  "Radio 3" , 0, RADIO, 0,0,0,0,0)
         void = create(MenuItem,  "-" , 0, RADIO, 0,0,0,0,0)
constant RADIO4 = create(MenuItem,  "Radio 4" , 0, RADIO, 0,0,0,0,0)
constant RADIO5 = create(MenuItem,  "Radio 5" , 0, RADIO, 0,0,0,0,0)
constant RADIO6 = create(MenuItem,  "Radio 6" , 0, RADIO, 0,0,0,0,0)
constant RADIO7 = create(MenuItem,  "Radio 7" , 0, RADIO, 0,0,0,0,0)

constant MULTI = create(Menu, "Columnic" , 0, DEMO, 0,0,0,0,0)
constant DUMY1 = create(MenuItem,  "Normal" , 0, MULTI, 0,0,0,0,0)
constant DUMY2 = create(MenuItem,  "single" , 0, MULTI, 0,0,0,0,0)
constant DUMY2a = create(MenuItem,  "vertical" , 0, MULTI, 0,0,0,0,0)
constant DUMY3 = create(MenuItem,  "column" , 0, MULTI, 0,0,0,0,0)
constant DUMY4 = create(MenuItem,  "MF_MENUBARBREAK" , 0, MULTI, 0,0,0,0,MF_MENUBARBREAK)
constant DUMY6 = create(MenuItem,  "flag makes" , 0, MULTI, 0,0,0,0,0)
constant DUMY7 = create(MenuItem,  "new column" , 0, MULTI, 0,0,0,0,0)
constant DUMY7a = create(MenuItem,  "with LH line" , 0, MULTI, 0,0,0,0,0)
constant DUMY8 = create(MenuItem,  "MF_MENUBREAK" , 0, MULTI, 0,0,0,0,MF_MENUBREAK)
constant DUMY9 = create(MenuItem,  "flag here" , 0, MULTI, 0,0,0,0,0)
constant DUMY9a = create(MenuItem,  "omits the" , 0, MULTI, 0,0,0,0,0)
constant DUMYB = create(MenuItem,  "LH line" , 0, MULTI, 0,0,0,0,0)

constant POPUPS = create(Menu, "Popups" , 0, DEMO,0,0,0,0,0)
constant POPUPS1 = create(MenuItem,  "R_Click Client" , 0, POPUPS,0,0,0,0,0)
constant POPUPS2 = create(MenuItem,  "for OWNED" , 0, POPUPS,0,0,0,0,0)
constant POPUPS3 = create(MenuItem,  "popup menu" , 0, POPUPS,0,0,0,0,0)
         void = create(MenuItem, "-" , 0, POPUPS,0,0,0,0,0)
constant POPUPS4 = create(MenuItem,  "L_Click Client" , 0, POPUPS,0,0,0,0,0)
constant POPUPS5 = create(MenuItem, "for UNOWNED" , 0, POPUPS, 0,0,0,0,0)
constant POPUPS6 = create(MenuItem,  "popup menu" , 0, POPUPS,0,0,0,0,0)

constant SUNDRY = create(Menu, "Sundry" , 0, DEMO,0,0,0,0,0)
constant EDIT = create(Menu, "setText" , 0, SUNDRY, 0,0,0,0,0)
constant EDIT1 = create(MenuItem,  "Ch&eckMarks" , 0, EDIT,0,0,0,0,0)
constant EDIT2 = create(MenuItem,  "A Menu:entries" , 0, EDIT,0,0,0,0,0)
constant EDIT3 = create(Menu,  "setEnable" , 0, SUNDRY,0,0,0,0,0)
constant EDIT4 = create(MenuItem,  "CheckMarks" , 0, EDIT3,0,0,0,0,0)
constant EDIT5 = create(MenuItem,  "A Menu:entries" , 0, EDIT3,0,0,0,0,0)
constant EDIT6 = create(MenuItem, "SubMenu:SubMenu" ,0, EDIT3, 0,0,0,0,0)
         void = create(MenuItem, "-" ,  0, SUNDRY,0,0,0,0,0)
constant INSERT =  create(MenuItem, "Insert item into \"A Menu\"" , 0, SUNDRY, 0,0,0,0,0)
--
constant REMOVE =  create(MenuItem,"Remove item from \"A Menu\"" , 0, SUNDRY, 0,0,0,0,0)

constant NOOWNER = create(Menu,  "any" ,0, 0,0,0,0,0,0)
constant NOOWNER1 = create(MenuItem, "This Popup Menu" , 0, NOOWNER,0,0,0,0,0)
constant NOOWNER2 = create(MenuItem,  "has no owner" , 0, NOOWNER,0,0,0,0,0)


function CheckMenuItems(integer id, integer msg, atom wParam, atom lParam)
    if id=CHECK1 or id=CHECK2 or id=CHECK3 then
        setCheck(id, not isChecked(id))
    elsif id=CHECK4 then
        msg = not isChecked(CHECK5)
        setCheck(CHECK5, msg)
        setText(CHECK4, CHECKSUBMENU[msg+1])
    end if
    return 0
end function


function MenuRadio(integer id, integer msg, atom wParam, object lParam)
    if msg=WM_COMMAND then
        checkMenuRadioItem(id, RADIO1, RADIO7)
    end if
    return 0
end function


function rotateText(sequence s)
integer len
    len = length(s)
    s &= s[1]
    s = s[2..len+1]
    return s
end function

sequence insertlist insertlist = {}
integer MENUSEP

procedure InsertMenuItem()

integer item
    if not length(insertlist) then
        MENUSEP = insertMenu("-", 0, MENU, -1, 0)
        insertlist &= MENUSEP
    end if
    item = insertMenu("000", 0, MENU, -1, 0)
    setText(item, sprintf("Item %d", item))
    insertlist &= item
end procedure


procedure RemoveMenuItem()
integer len, item
    len = length(insertlist)
    if len>1 then
        item = insertlist[len]
        insertlist = insertlist[1..len-1]
        void = destroy(item)
    end if
    if len=2 then
        void = destroy(MENUSEP)
        insertlist = {}
    end if
end procedure


function setMenuText(integer id, integer msg, atom wParam, object lParam)
sequence text
    if msg=WM_COMMAND then
        if id=EDIT1 then
            text = getText(CHECK)
            text = rotateText(text)
            setText(CHECK, text)
        elsif id=EDIT2 then
            text = getText(MENU4)
            text = reverse(text)
            setText(MENU4, text)
        elsif id=EDIT4 then
            setEnable(CHECK, not isEnabled(CHECK))
        elsif id=EDIT5 then
            setEnable(MENU4, not isEnabled(MENU4))
        elsif id=EDIT6 then
            setEnable(SUBMENU1, not isEnabled(SUBMENU1))
        elsif id=INSERT then
            InsertMenuItem()
        elsif id=REMOVE then
            RemoveMenuItem()
        end if
    end if
    return 0
end function

function main(integer id, integer msg, atom wParam, object lParam)
    if msg=WM_RBUTTONDOWN then
        setText(STATUS, "NB: This popup menu is actually the RadioButtons menu.")
        void = trackPopupMenu(RADIO, DEMO, 0)
    elsif msg=WM_LBUTTONDOWN     then
        setText(STATUSFIELD, "\tThis popup menu was created with no owner")
        void = trackPopupMenu(NOOWNER, DEMO, 0)
    elsif msg=WM_COMMAND then
        setText(DEMO, sprintf("MenuItem %d selected", id))
        setCheck(id, not isChecked(id))
    elsif msg=WM_EXITMENULOOP then
        setText(STATUS, "")
        setText(STATUSFIELD, "")
    elsif msg=WM_CHAR
      and wParam=VK_ESCAPE then
        closeWindow(DEMO)
    end if
    return 0
end function


function handler_MENU(integer id, integer msg, atom wParam, object lParam)
    if msg=WM_COMMAND then
        if id=MEXIT then
            closeWindow(DEMO)
        else
             -- inserted item was clicked
            setText(DEMO, sprintf("Inserted MenuItem #%d was clicked", id))
        end if
    end if
    return 0
end function


function Status_handler(integer id, integer msg, atom wParam, object lParam)
    if msg=WM_SIZE then
--      setText(DEMO, sprintf("WM_PAINT: wParam %d  lParam %d", {wParam, lParam}) )
    end if
    return 0
end function


setHandler(STATUS , routine_id("Status_handler"))
setHandler({CHECK1, CHECK2, CHECK3, CHECK4} , routine_id("CheckMenuItems"))
setHandler({EDIT1, EDIT2, EDIT4, EDIT5, EDIT6, INSERT, REMOVE}, routine_id("setMenuText"))
setHandler(MENU, routine_id("handler_MENU"))
setHandler(DEMO, routine_id("main"))
setHandler({RADIO1,RADIO2,RADIO3,RADIO4,RADIO5,RADIO6,RADIO7}, routine_id("MenuRadio"))

WinMain(DEMO, SW_NORMAL)
