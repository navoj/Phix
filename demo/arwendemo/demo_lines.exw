
-- This demo shows off the new line drawing capabilities of Arwen
-- most of the 3d code was shamelessly ripped from Euphoria's winwire.exw program



without warning

include "arwen.ew"
--include "constants.ew" -- redundant, for orac
include "dll_links.ew" -- redundant, for orac
include "classes.ew" -- redundant, for orac
include "message_box.ew" -- redundant, for orac
include misc_arwen.e -- redundant, for orac
include dib32.ew
include classes.ew

ISMENUOWNERDRAWN = 0

constant TEST = create(Window,  "Drawing Bresenham lines", 0, 0, 10,10,500,460,{0,0})
constant START = create(PushButton, "Test line Speed" , 0, TEST,  410,10,75,50,BS_MULTILINE)
constant BLANK = create(PushButton, "Blank" , 0, TEST,  410,65,75,35,BS_MULTILINE)
constant FLIP = create(PushButton, "Flip" , 0, TEST,  410,105,75,35,BS_MULTILINE)
constant MIRROR = create(PushButton, "Mirror" , 0, TEST,  410,145,75,35,BS_MULTILINE)
constant ROT_90 = create(PushButton, "Rotate 90" , 0, TEST,  410,185,75,35,BS_MULTILINE)
constant ROT_180 = create(PushButton, "Rotate 180" , 0, TEST,  410,225,75,35,BS_MULTILINE)
constant ROT_270 = create(PushButton, "Rotate 270" , 0, TEST,  410,265,75,35,BS_MULTILINE)
constant STATUS = create(StatusBar, "" , 0, TEST,  0,0,350,20,0)

integer dib
        dib = createDib(400, 400, 32)
integer bak_dib
        bak_dib = createDib(400, 400, 32)

integer num_lines
sequence LineColours

procedure line(integer x, integer y, integer xx, integer yy, integer color)
    num_lines += 1
    drawDibLine(bak_dib, x, y, xx, yy, color)
end procedure

integer which_background
        which_background = 1

procedure make_Bak_dib()
atom x
integer c
    blankDib(bak_dib, 0)
    x = time()
    num_lines = 0

    which_background += 1

    for i=0 to 399 by which_background do
        line(0,   0,   399,   i,     makeRGB(200,50,50))
        line(399, 0,   i,     399,   makeRGB(200,200,0))
        line(399, 399, 0,     399-i, makeRGB(0,150,100))
        line(0,   399, 399-i, 0,     makeRGB(150,0,200))
    end for

    if which_background=5 then
        which_background = 1
    end if

    x = time()-x
    invalidateRect(TEST, 0)
    setText(STATUS, sprintf("%g seconds for %d lines at 400 pixels each", {x,num_lines}))

end procedure


procedure copyToScreen(atom dc)
    if not dc then
        dc = getPrivateDC(TEST)
    end if
    copyDibToDC(dc, 0 , 0, dib)
end procedure


procedure draw_line(integer color, sequence coords)
    drawDibLine(dib, floor(coords[1][1]),  floor(coords[1][2]), floor(coords[2][1]), floor(coords[2][2]), color)
end procedure


procedure display(sequence coords)
    -- copy the background onto the buffer
    mem_copy(dibImageAddr(dib), dibImageAddr(bak_dib), getDibGrossWidth(dib)*getDibHeight(dib)*4)

    -- now, draw the lines on the buffer
    for i=1 to length(coords) do
        draw_line(LineColours[i], coords[i][1..2])
    end for

    -- copy the complete image to the screen
    copyToScreen(0)

end procedure


integer NUM_LINES NUM_LINES = 0

integer axis
atom sin_angle, cos_angle

constant X = 1, Y = 2, Z = 3

type point(sequence x)
    return length(x)=3
end type

type matrix(sequence x)
    return length(x)=4 and sequence(x[1])
end type

--type vector(sequence x)
--  return length(x)=4 and atom(x[1])
--end type

function vector_product(sequence v, sequence m)
-- multiply a 4-vector by a 4x4 matrix
sequence c
    c = repeat(0, 4)
    for j=1 to 4 do
        c[j] = v[1]*m[1][j]+
               v[2]*m[2][j]+
               v[3]*m[3][j]+
               v[4]*m[4][j]
    end for
    return c
end function

--/*
function product(sequence factor)
-- matrix multiply a number of 4-vectors/4x4 matrices
-- only the first one could be a vector
sequence a, c
matrix b

    a = factor[1]
    for f=2 to length(factor) do
        b = factor[f]
        if atom(a[1]) then
            -- a is a vector
            c = repeat(0, 4)
            for j=1 to 4 do
                c[j] = a[1]*b[1][j]+
                       a[2]*b[2][j]+
                       a[3]*b[3][j]+
                       a[4]*b[4][j]
            end for
        else
            -- a is a matrix
            c = repeat(repeat(0, 4), 4)
            for i=1 to 4 do
                for j=1 to 4 do
                    for k=1 to 4 do
                        c[i][j] += a[i][k]*b[k][j]
                    end for
                end for
            end for
        end if
        a = c
    end for
    return c
end function
--*/

function view(point view_point)
-- compute initial view
--matrix t1, t2, t3, t4, n
matrix n
atom cos_theta, sin_theta, hyp
--, a_b
,sc_theta
atom x,y,z

    {x,y,z} = view_point

-- change origin
--  t1 = {{1, 0, 0, 0},
--        {0, 1, 0, 0},
--        {0, 0, 1, 0},
--        -view_point & 1}

    -- get left-handed coordinate system
--  t2 = {{-1, 0,  0, 0},
--        {0, 0, -1, 0},
--        {0, 1,  0, 0},
--        {0, 0,  0, 1}}
--?view_point
--?product({t1,t2})
--DEV not really sure what I'm doing, but this seems to work just as well:
--  t2 = {{-1, 0, 0, 0},
--        { 0, 0,-1, 0},
--        { 0, 1, 0, 0},
--        { x,-z, y, 1}}

    -- rotate so Ze points properly     -- (DEV what is Ze?)
    hyp = sqrt(x*x + y*y)
    sin_theta = x/hyp
    cos_theta = y/hyp
--  t3 = {{cos_theta, 0, sin_theta, 0},
--        {0, 1,         0, 0},
--        {-sin_theta,0, cos_theta, 0},
--        {0, 0,         0, 1}}
--?view_point
--?{sin_theta,cos_theta}
--?product({t2,t3})
--{2.727272727,3.636363636,3.409090909}
--{0.6,0.8}
--{{-0.8,0,-0.6,0},{0.6,0,-0.8,0},{0,1,0,0},{0,-3.409090909,4.545454545,1}}
--?4.545454545/0.6
--?4.545454545/0.8
--?x*sin_theta
--?y*sin_theta
--?x*cos_theta
--?y*cos_theta
--?x*cos_theta - y*sin_theta
--?
--  t3 = {{-cos_theta,0,-sin_theta,0},
--        {sin_theta,0,-cos_theta,0},
--        {0,1,0,0},
--        {0,-z,x*sin_theta + y*cos_theta,1}}

    -- rotate so Ze points at the origin (0, 0, 0)
--  t4 = {{1, 0, 0, 0},
--        {0, cos_theta, -sin_theta, 0},
--        {0, sin_theta, cos_theta, 0},
--        {0, 0, 0, 1}}
--?t3
--?t4
--{2.727272727,3.636363636,3.409090909}
--{0.6,0.8}
--7.575757575
--5.681818181
--1.636363636
--2.181818182
--2.181818182
--2.909090909
--0
--{{-0.8,0,-0.6,0},{0.6,0,-0.8,0},{0,1,0,0},{0,-3.409090909,4.545454545,1}}
--{{1,0,0,0},{0,0.8,-0.6,0},{0,0.6,0.8,0},{0,0,0,1}}
--{{-0.8,-0.36,-0.48,0},{0.6,-0.48,-0.64,0},{0,0.8,-0.6,0},{0,0,5.681818182,1}}
--
--?product({t3,t4})
    sc_theta = -sin_theta*cos_theta
--  t4 = {{-cos_theta, -sin_theta*sin_theta, sc_theta, 0},
--        {sin_theta, sc_theta, -cos_theta*cos_theta, 0},
--        {0, cos_theta, -sin_theta, 0},
--        {0, 0, (x*sin_theta + y*cos_theta)/cos_theta, 1}}

--  a_b = 2

--  n = {{a_b, 0, 0, 0},
--       {0, a_b, 0, 0},
--       {0, 0, 1, 0},
--       {0, 0, 0, 1}}
--?t4
--?n
--?product({t4,n})
--{{-0.8,-0.36,-0.48,0},{0.6,-0.48,-0.64,0},{0,0.8,-0.6,0},{0,0,5.681818182,1}}
--{{2,0,0,0},{0,2,0,0},{0,0,1,0},{0,0,0,1}}
--{{-1.6,-0.72,-0.48,0},{1.2,-0.96,-0.64,0},{0,1.6,-0.6,0},{0,0,5.681818182,1}}
    n = {{-2*cos_theta, -2*sin_theta*sin_theta,             sc_theta, 0},
         { 2*sin_theta,             2*sc_theta, -cos_theta*cos_theta, 0},
         {           0,            2*cos_theta, -sin_theta, 0},
--       {           0,                      0, (x*sin_theta + y*cos_theta)/cos_theta, 1}}
         {           0,                      0, x*sin_theta/cos_theta + y, 1}}

--  return product({t1, t2, t3, t4, n})
--  return product({t4, n})
    return n
end function

function new_coords(sequence overall, sequence shape)
-- compute the screen coordinates from the 3-D coordinates
sequence screen_coords
atom x,y,z
point p
atom x2, y2

    x2 = floor(getDibWidth(dib)/2)
    y2 = floor(getDibHeight(dib)/2)
    screen_coords = repeat({0, 0, 0}, length(shape))
    for i=1 to length(shape) do
        for j=1 to 2 do
            p = shape[i][j]
            {x,y,z} = vector_product(p & 1, overall)
            screen_coords[i][j] = {x2*(x/z+1), y2*(y/z+1)}
        end for
        screen_coords[i][3] = shape[i][3]
    end for
    return screen_coords
end function

function compute_rotate(integer axis, sequence shape)
-- rotate a shape
atom x,y,z
sequence sij
    for i = 1 to length(shape) do
        for j = 1 to 2 do
            {x,y,z} = shape[i][j]
            if axis = X then
                sij = {x, y*cos_angle + z*sin_angle, z*cos_angle - y*sin_angle}
            elsif axis = Y then
                sij = {x*cos_angle - z*sin_angle, y, x*sin_angle + z*cos_angle}
            else  -- axis = Z
                sij = {x*cos_angle + y*sin_angle, y*cos_angle - x*sin_angle, z}
            end if
            shape[i][j] = sij
        end for
    end for
    return shape
end function


sequence lines

procedure reset()
    lines = {}
end procedure

procedure newColours(sequence lines)
    LineColours = {}
    for i=1 to length(lines) do
        LineColours &= rand(180)+75+(rand(250)+0)*256+(rand(200)+55)*65536
    end for
end procedure



procedure addline(sequence start, sequence finish)
    lines = append(lines, {start, finish, 0})
end procedure

function centre(sequence shape, sequence point)
    for i=1 to length(shape) do
        shape[i][1] = sq_sub(shape[i][1],point)
        shape[i][2] = sq_sub(shape[i][2],point)
    end for
    return shape
end function


function cube()
sequence apex

    reset()

    -- base
    addline({0,0,0}, {0,0,1})
    addline({0,0,1}, {1,0,1})
    addline({1,0,1}, {1,0,0})
    addline({1,0,0}, {0,0,0})

    -- sides
    addline({0,0,0}, {0,1,0})
    addline({0,0,1}, {0,1,1})
    addline({1,0,1}, {1,1,1})
    addline({1,0,0}, {1,1,0})

    -- top
    addline({0,1,0}, {0,1,1})
    addline({0,1,1}, {1,1,1})
    addline({1,1,1}, {1,1,0})
    addline({1,1,0}, {0,1,0})

    --centre( {0.5, 0.5, 0.5} )

    return lines

end function


function pyramid(atom h)
sequence apex

    apex = {0.5,h,0.5}

    reset()

    -- base
    addline({0,0,0}, {0,0,1})
    addline({0,0,1}, {1,0,1})
    addline({1,0,1}, {1,0,0})
    addline({1,0,0}, {0,0,0})

    -- sides
    addline({0,0,0}, apex)
    addline({0,0,1}, apex)
    addline({1,0,1}, apex)
    addline({1,0,0}, apex)

    --centre( {0.5, 0.3, 0.5} )

    if rand(2)=1 then
        lines = sq_mul(lines,-1)
    end if

    return lines

end function


function trimid()
atom side
sequence apex

    side = 0.866
    apex = {0.5, side, side/2}

    reset()

    addline({0,0,0}, {1,0,0})
    addline({1,0,0}, {0.5,0,side})
    addline({0.5,0,side}, {0,0,0})

    addline({0,0,0}, apex)
    addline({1,0,0}, apex)
    addline({0.5,0,side}, apex)

    return lines

end function


function jewel(atom h)
sequence apex, apex2

    apex = {0.5,h,0.5}
    apex2 = {0.5,-h,0.5}

    reset()

    -- base
    addline({0,0,0}, {0,0,1})
    addline({0,0,1}, {1,0,1})
    addline({1,0,1}, {1,0,0})
    addline({1,0,0}, {0,0,0})

    -- sides
    addline({0,0,0}, apex)
    addline({0,0,1}, apex)
    addline({1,0,1}, apex)
    addline({1,0,0}, apex)

    -- sides 2
    addline({0,0,0}, apex2)
    addline({0,0,1}, apex2)
    addline({1,0,1}, apex2)
    addline({1,0,0}, apex2)

    return lines

end function



function makeRandom()
sequence s,tmp
atom x, y, z

    s = repeat({{40,40,40},{40,40,40}, BRIGHTCYAN}, NUM_LINES)
    s = sq_rand(s)

    s = sq_div(sq_sub(s,20),15)

    return s

end function



function makeRegular()
sequence s,t,temp, point1, point2, disp, trans, move
atom x, y, z

    lines = {}
    point1 = {100,120,100}
    point2 = sq_mul(point1,{1,-1,1})
    disp = {100,0,100}
    trans = {1,1,1}
    move = {0,200,0}

    for i=0 to 200 by 40 do

        addline(point1, {i,0,0})
        addline(point1, {200,0,i})
        addline(point1, {200-i,0,200})
        addline(point1, {0,0,i})

        addline(point2, {i,0,0})
        addline(point2, {200,0,i})
        addline(point2, {200-i,0,200})
        addline(point2, {0,0,i})

        addline({i,0,0}, {i,0,200})
        addline({200,0,i}, {0,0,i})

    end for

    for i=1 to length(lines) do
        lines[i] = sq_sub(lines[i],{disp, disp, 0})
    end for

    lines = sq_div(lines,100)

    NUM_LINES = length(lines)

    setText(TEST, sprintf("Bresenham lines - rotating %d lines", NUM_LINES))

    return lines --cube()--pyramid(1) --lines

end function

function ro()
    return (rand(100)-50)/30
end function

function rand_offset()
    return {ro(), ro(), ro()}
end function

function makeShapes()
sequence shape, shapes

    shapes = {}

    for i=1 to 10 do
        shape = sq_div(cube(),2+rand(4))
        shape = centre(shape, rand_offset())
        shapes &= shape

        shape = sq_div(trimid(),1+rand(5))
        shape = centre(shape, rand_offset())
        shapes &= shape

        shape = sq_div(pyramid(3),3+rand(4))
        shape = centre(shape, rand_offset())
        shapes &= shape

        if 01 then
            shape = sq_div(jewel(i/3),3+rand(4))
            shape = centre(shape, rand_offset())
            shapes &= shape

            shape = sq_div(makeRandom(),3+rand(4))
            shape = centre(shape, rand_offset())
            shapes &= shape

            shape = sq_div(makeRegular(),3+rand(4))
            shape = centre(shape, rand_offset())
            shapes &= shape

        end if

    end for

    return shapes

end function


sequence coords, overall
point view_point
integer r
atom rot_speed
sequence shape

view_point = sq_div({6, 8, 7.5},2.2)
overall = view(view_point)
rot_speed = 0.09
sin_angle = sin(rot_speed)
cos_angle = cos(rot_speed)
axis = Z
if 01 then
    shape = makeShapes()
elsif 0 then
    shape = makeRegular()
else
    NUM_LINES = rand(10)
    shape = makeRandom()
end if
newColours(shape)

procedure spin()
    coords = new_coords(overall, shape)
    display(coords)

    r = rand(250)

    if r=1 then
        axis = X
    elsif r=2 then
        axis = Y
    elsif r=3 then
        axis = Z
    elsif r=7 then
        if rand(2)=1 then
            rot_speed = .03
        else
            rot_speed = .01*rand(5)
        end if
        sin_angle = sin(rot_speed)
        cos_angle = cos(rot_speed)
    end if
    shape = compute_rotate(axis, shape)
end procedure


function handler_TEST(integer id, integer msg, atom wParam, object lParam)
integer colour
    if msg=WM_PAINT then
        copyToScreen(wParam)
    elsif msg=WM_MOUSEMOVE then
--      spin()
    elsif msg=WM_CHAR 
      and wParam=VK_ESCAPE then
        closeWindow(TEST)
    elsif msg=WM_COMMAND then
        if id=START then
            make_Bak_dib()
        elsif id=FLIP then
            flipDib(bak_dib)
        elsif id=MIRROR then
            mirrorDib(bak_dib)
        elsif id=BLANK then
            blackDib(bak_dib)
        elsif id=ROT_90 then
            rotateDib90(bak_dib)
        elsif id=ROT_180 then
            rotateDib180(bak_dib)
        elsif id=ROT_270 then
            rotateDib270(bak_dib)
        end if
    end if
    return 0
end function
setHandler({TEST,START,FLIP, MIRROR, BLANK, ROT_90, ROT_180, ROT_270}, routine_id("handler_TEST"))
setHandler(IDLE, routine_id("spin"))
startIdle(50)

WinMain(TEST, SW_NORMAL)
void = deleteDib(0)
