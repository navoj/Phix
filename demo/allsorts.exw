                --------------------------------
                -- Sorting Algorithms in Phix --
                --------------------------------
-- Notes:

-- The slower sorts will be omitted after a while. 

-- Bucket sort looks really good, but remember that the other sorts are 
-- generic, and can handle integers, floating-point numbers, strings, etc.
-- Bucket sort can only sort integers, and the integers need to be 
-- in a reasonably small, well-defined range, as is the case in this
-- benchmark. It also uses more memory than some of the other sorts.

without type_check

--set_rand(9999)

constant MAX = 5000000
constant TRUE = 1, FALSE = 0

constant CHECK_RESULTS = FALSE -- TRUE for debugging new sorting algorithms

integer hybrid_limit

type natural(integer x)
    return x >= 0
end type

type file_number(integer x)
    return x >= -1
end type

function simple_sort(sequence x)
--
-- put x into ascending order using a very simple sort
--
object xj,xi

    for i = 1 to length(x)-1 do
        xi = x[i]
        for j = i+1 to length(x) do
            xj = x[j]
            if xj<xi then
                x[j] = xi
                x[i] = xj
                xi = xj
            end if
        end for
    end for
    return x
end function

function bubble_sort(sequence x)
--
-- put x into ascending order using bubble sort
--
object xi,xni
natural flip, limit

    flip = length(x)
    while flip > 0 do
        limit = flip
        flip = 0
        for i = 1 to limit-1 do
            xi = x[i]
            xni = x[i+1]
            if xni<xi then
                x[i+1] = xi
                x[i] = xni
                flip = i
            end if
        end for
    end while
    return x
end function

function insertion_sort(sequence x)
--
-- put x into ascending order using insertion sort
--
object xi
natural final

    for i = 2 to length(x) do
        xi = x[i]
        final = 1
        for j = i-1 to 1 by -1 do
            if xi<x[j] then
                x[j+1] = x[j]
            else
                final = j + 1
                exit
            end if
        end for
        x[final] = xi
    end for
    return x
end function

function shell_sort(sequence x)
--
-- Shell sort based on insertion sort
--
integer gap, j, first, last
object xi, xj

    last = length(x)
    gap = floor(last/10) + 1
    while TRUE do
        first = gap + 1
        for i = first to last do
            xi = x[i]
            j = i - gap
            while TRUE do
                xj = x[j]
                if xi>=xj then
                    j += gap
                    exit
                end if
                x[j+gap] = xj
                if j <= gap then
                    exit
                end if
                j -= gap
            end while
            x[j] = xi
        end for
        if gap = 1 then
            return x
        else
            gap = floor(gap/3.5) + 1
        end if
    end while
end function


function quick_sort(sequence x)
--
-- put x into ascending order using recursive quick sort
--
natural n, last, mid
object xi, midval

    n = length(x)
    if n < 2 then
        return x    -- already sorted (trivial case)
    end if

    mid = floor((n+1)/2)
    midval = x[mid]
    x[mid] = x[1]

    last = 1
    for i = 2 to n do
        xi = x[i]
        if xi<midval then
            last += 1
            x[i] = x[last]
            x[last] = xi
        end if
    end for

    return quick_sort(x[2..last]) & {midval} & quick_sort(x[last+1..n])
end function


function hybrid_sort(sequence x)
--
-- put x into ascending order using recursive quick sort,
-- but call insertion sort for short sequences
--
natural n, last, mid
object midval, xi

    n = length(x)
    if n < hybrid_limit then
        return insertion_sort(x)
    end if

    mid = floor((n+1)/2)
    midval = x[mid]
    x[mid] = x[1]

    last = 1
    for i = 2 to n do
        xi = x[i]
        if xi<midval then
            last += 1
            x[i] = x[last]
            x[last] = xi
        end if
    end for

    return hybrid_sort(x[2..last]) & {midval} & hybrid_sort(x[last+1..n])
end function

function g_insertion_sort(sequence x)
--
-- put x into ascending order using insertion sort of general objects
--
object xi
natural final

    for i = 2 to length(x) do
        xi = x[i]
        final = 1
        for j = i-1 to 1 by -1 do
            if xi<x[j] then
                x[j+1] = x[j]
            else
                final = j + 1
                exit
            end if
        end for
        x[final] = xi
    end for
    return x
end function

function best_sort(sequence x, natural m, natural n)
--
-- put x[m..n] into (roughly) ascending order using recursive quick sort 
--
natural last, mid
object midval, xi

    if n-m < hybrid_limit then 
        return x
    end if
    mid = floor((m+n)/2)
    midval = x[mid]
    x[mid] = x[m]

    last = m
    for i = m+1 to n do
        xi = x[i]
        if xi<midval then
            last += 1
            x[i] = x[last]
            x[last] = xi
        end if
    end for
    x[m] = x[last]
    x[last] = midval
    x = best_sort(x, m, last-1)
    x = best_sort(x, last+1, n)
    return x
end function

function great_sort(sequence x)
--
-- We only partition down to a certain degree, then do an insertion sort 
--  which runs fast because things are roughly in order.
-- See Knuth for the details.
--
    x = best_sort(x, 1, length(x))
    x = g_insertion_sort(x)
    return x
end function

function merge_sort(sequence x)
--
-- put x into ascending order using recursive merge sort
--
natural n, mid
sequence merged, a, b

    n = length(x)
    if n < 2 then
        return x
    end if

    mid = floor(n/2)
    a = merge_sort(x[1..mid])       -- sort the first half
    b = merge_sort(x[mid+1..n])     -- sort the second half
    
    -- merge the two sorted halves into one
    merged = {}
    while length(a) > 0 and length(b) > 0 do
        if a[1]<b[1] then
            merged = append(merged, a[1])
            a = a[2..$]
        else
            merged = append(merged, b[1])
            b = b[2..$]
        end if
    end while
    return merged & a & b -- merged data plus leftovers
end function

integer min_value, max_value -- for bucket sort

function bucket_sort(sequence s)
--
-- Sort s into ascending order. No elements are compared.
-- The values of s must be integers from min_value to max_value.
--
sequence count, sorted
integer v, k, offset, c
    
    count = repeat(0, max_value-min_value+1)
    offset = min_value - 1
    -- count the number of occurrences of each integer value:
    for i = 1 to length(s) do
        v = s[i] - offset
        count[v] += 1
    end for
    sorted = repeat(0, length(s))
    k = 1
    -- make the resulting sorted sequence
    for i = 1 to length(count) do
        c = count[i]
        if c then
            sorted[k..k+c-1] = i + offset
            k += c
        end if  
    end for
    return sorted 
end function

procedure check_results(sequence sdata, sequence data)
--
-- compare results with another sort to make sure they are correct
--
    if not equal(sdata, shell_sort(data)) then
        puts(2, "\nabort!\n")
        print(2, 1/0)
    end if
end procedure

integer nsquared_ok
        nsquared_ok = TRUE -- do N-squared sorts

integer iterations
sequence data
file_number printer

procedure measure(sequence name)
--
-- time one sort    
--
integer id
atom t0, t
sequence sdata

    id = routine_id(name)
    t0 = time()
    for i = 1 to iterations do
        sdata = call_func(id, {data[i]})
        
        if CHECK_RESULTS then
            check_results(sdata, data[i])
        end if
    end for
    t = time() - t0
    if t>6 then
        nsquared_ok = FALSE -- time to give up on the slow ones!
    end if
    printf(printer, "%15s %9.4f\n", {name, t/iterations})
end procedure

procedure all_sorts()
--
-- test all sorting routines over a range of numbers of items
--
natural nitems
    
    printer = 1  -- open("PRN", "w")
    hybrid_limit = 20
    
    nitems = 5
    
    while TRUE do
        iterations = floor(MAX/nitems)
        if iterations<1 then
            exit
        end if
        if iterations>100 then
            iterations = 100
        end if

        -- get several sets of data of length nitems
        printf(printer, "\ntime (sec.) to sort %d items (averaged over %d trials)\n",
                        {nitems, iterations})

        data = sq_rand(repeat(repeat(nitems, nitems), iterations))
        min_value = 1
        max_value = nitems

        if nsquared_ok then
            -- do the really slow ones
            measure("bubble_sort")
            measure("simple_sort")
            measure("insertion_sort")
        end if

        measure("merge_sort")
        measure("quick_sort")
        measure("hybrid_sort")  
        measure("great_sort")
        measure("shell_sort")
        measure("bucket_sort")      

        nitems *= 2
        
        puts(1, "\nPress Enter to continue. Press q to quit: ")
        if find('q', gets(0)) then
            abort(0)
        end if
    end while
end procedure

all_sorts()

