--
-- eacomp.ew    File comparison.
--

without trace

--/* 4.0.2
include builtins\file.e
--include builtins\wildcard.e
--*/
--/**/include builtins\pcase.e as pcase

--include eaplan9.e
--
integer dcompare

constant
    COMPARE    = create(Window, "",                      0, Main,    100, 100, 540, 151, {0,WS_EX_TOOLWINDOW}),
    dlab       = create(Label,xl("Directory"),           0, COMPARE,   8,  15, 110,  22, SS_RIGHT),
    directory  = create(ComboDropDown, "",               0, COMPARE, 125,  11, 300, 124, 0),
    flab       = create(Label,xl("Filename"),            0, COMPARE,   8,  42, 110,  22, SS_RIGHT),
    filename   = create(EditText, "",                    0, COMPARE, 125,  40, 300,  24, 0),
    filentxt   = create(Label,   "",                     0, COMPARE, 125,  41, 300,  24, 0),
    ignores    = create(CheckBox,xl("Ignore Whitespace"),0, COMPARE,   8,  65, 196,  20, 0),
    Overwrite  = create(CheckBox,xl("Overwrite?"),       0, COMPARE,   8,  89, 170,  24, 0),
    Rename     = create(CheckBox,xl("Rename?"),          0, COMPARE, 191,  89, 170,  24, 0),
    Browse     = create(Button,xl("Browse"),             0, COMPARE, 430,  40,  90,  25, 0),
    CompareBtn = create(Button,xl("Compare"),            0, COMPARE, 430,  85,  90,  25, 0)

setCheck(ignores,True)
setCheck(Overwrite,False)

constant PROGRESS = create(Window,xl("Progress"),      0, Main,     200, 300, 400, 210, 0)
         void     = create(Label,xl("Width"),          0, PROGRESS,   8,  15,  80,  24, 0)
constant wdth     = create(Label, "",                  0, PROGRESS, 100,  15, 260,  24, 0)
         void     = create(Label,xl("Stretch"),        0, PROGRESS,   8,  45,  80,  24, 0)
constant pbar     = create(ProgressBar,"",             0, PROGRESS, 100,  40, 260,  24, PBS_SMOOTH)
         void     = create(Label,xl("Complexity"),     0, PROGRESS,   8,  75,  80,  24, 0)
constant complxt  = create(Label, "",                  0, PROGRESS, 100,  75,  60,  24, 0)
         void     = create(Label,xl("Edit Distance"),  0, PROGRESS,   8, 105,  80,  24, 0)
constant edstnce  = create(Label, "",                  0, PROGRESS, 100, 105,  60,  24, 0)
constant CANCEL   = create(PushButton,xl("Cancel"),    0, PROGRESS, 160, 145,  80,  25, 0)

constant RESULTS  = create(Window,xl("Finished"),      0, COMPARE,  500, 400, 305, 160, 0)
constant rText    = create(Label,   "",                0, RESULTS,    8,  15, 180,  24, 0)
constant rOverite = create(CheckBox,xl("Overwrite?"),  0, RESULTS,    8,  40,  80,  24, 0)
constant rRename  = create(CheckBox,xl("Rename?"),     0, RESULTS,  135,  40,  80,  24, 0)
constant rOK      = create(PushButton,xl("OK"),        0, RESULTS,  110,  80,  80,  25, 0)



without trace
function pHandler(integer id, integer msg, atom wParam, object lParam)
    if wParam or object(lParam) then end if -- suppress warnings
    if msg=WM_TIMER then
        addFocus(PROGRESS)
        setVisible(PROGRESS,True)
        setText(wdth,sprintf("%d",width))
        setPos(pbar, 100*stretch/maxstretch)
        setText(complxt,sprintf("%d",complexity))
        setText(edstnce,sprintf("%d",editdistance))
    elsif msg=WM_COMMAND and id=CANCEL then
        terminate = 1
    end if
    return 0
end function
constant TIMER = createTimer()

sequence samefile
         samefile = {}

procedure setFocusBC()
--
-- Set the focus to Browse or Compare depending on the values set in the
-- window fields and whether or not a file exists, etc.
--
    if dcompare then
        if equal(getText(filentxt),"") then
            setFocus(Browse)
        else
            setFocus(CompareBtn)
        end if
    else
        if equal(samefile,getText(directory)&getText(filename))
        or atom(dir(getText(directory)&getText(filename))) then
            setFocus(Browse)
        else
            setFocus(CompareBtn)
        end if
    end if
end procedure

integer actuallyChangeTo
        actuallyChangeTo = 0

function CompareTarget(integer c)
-- if a file tab is clicked in the background, and it is not the same as the
-- source file, set it as the target.
    if c then
        if isVisible(COMPARE) and not actuallyChangeTo then
            setText(directory,filepaths[c])
            setText(filename,filenames[c])
            setFocusBC()
            return 1
        end if
    end if
    actuallyChangeTo = 0
    return 0
end function
rCompareTarget = routine_id("CompareTarget")


constant renset = {
                   "DXW",   -- Euphoria\Phix windows main files
                   "DW",    -- Euphoria\Phix windows include files
                   "DX",    -- Euphoria\Phix dos main files
                   "D", -- Euphoria\Phix general include files
                   "DXU",   -- Euphoria\Phix linux main files
                   "DU",    -- Euphoria\Phix linux include files
                   "DRR",   -- Euphoria\Phix error files
                   "SXT",   -- text files
                   "LE",    -- as in read.me
                   "COC",   -- documentation/word files
                   "LAN",   -- manual file
                   "CIZ",   -- info files
                   "MFO",   -- info files
                   "SAG",   -- info files
                   "KIC",   -- ? License files
                   "GST",   -- (version) history file
                   "0ST",   -- as in readme.1st
                   "GTM",   -- html files
                   "GTX",   -- html files
                   "BFG",   -- config files
                   "B", -- C files
                   "CEF",   -- def files(?)
                   "G", -- C header files
                   "HN",    -- C configuration file
                   "BPP",   -- C++ file
                   "BXX",   -- ? C++ file
                   "HNI",   -- configuration settings
                   "AAT",   -- batch files
                   "RYS",   -- system files
                   "QTF",   -- rich text format files
                   "HNF",   -- setup information files
                   "BUE",   -- cue (CD writing) files
                   "KOG"    -- log files
                  }

function isNotRenamed(sequence filename)
    --
    -- judge whether the passed filename has been renamed
    --
    for i=length(filename) to 1 by -1 do
        if filename[i]='.' then
--/**/      if find(pcase:upper(filename[i+1..length(filename)]),renset) then
--/*
            if find(upper(filename[i+1..length(filename)]),renset) then
--*/
                return False
            end if
            return True
        end if
    end for
    return True
end function

function getNewName(sequence filename)
    for i=length(filename) to 1 by -1 do
        if filename[i]='.' then
            filename[i+1] = filename[i+1]-1
            return filename
        end if
    end for
    return filename
end function

sequence filelist, InitialTopFile, dirlist, InitialTopDir, sublist
integer depth

function look_at(sequence path_name, sequence entryX)
    if length(path_name) then end if -- suppress warnings
    --
    -- responsible for setting the top level info in both <initial> and <target>
    --
    if find('d', entryX[D_ATTRIBUTES]) then
        dirlist &= {entryX[D_NAME]&'\\'}
    else
        if isNotRenamed(entryX[D_NAME]) then
            filelist &= {entryX[D_NAME]}
        end if
    end if
    return 0
end function

sequence initialdir

sequence sub
function look_dat(sequence path_name, sequence entryX)
    --
    -- depth scan of <initial> when sub-directories in <target> exist.
    -- Terminates when first matching file in equivalent directory is found.
    -- filelist should not be updated
    if find('d', entryX[D_ATTRIBUTES])=0 then
        if isNotRenamed(entryX[D_NAME]) then
            sub = path_name[length(initialdir)+1..length(path_name)]&'\\'
            if not atom(dir(getText(directory)&sub&entryX[D_NAME])) then
                setText(filentxt,sub&entryX[D_NAME])
                return 1    -- terminate scan
            end if
        end if
    end if
    return 0
end function

function look_flat(sequence path_name, sequence entryX)
integer k
    --
    -- depth scan of <initial> when no sub-directories in <target> exist.
    -- Full scan must be completed to eliminate sibling duplicates.
    -- filelist should be extended with possible matches.
    if find('d', entryX[D_ATTRIBUTES])=0 then
        if isNotRenamed(entryX[D_NAME])
        and not atom(dir(getText(directory)&entryX[D_NAME])) then
            k = find(entryX[D_NAME],filelist)
            if k then
                if isNotRenamed(filelist[k]) then
                    filelist[k] = getNewName(filelist[k])
                end if
            end if
            k = find(getNewName(entryX[D_NAME]),filelist)
            if k=0 then
                filelist &= {entryX[D_NAME]}
                sublist &= {path_name[length(initialdir)+1..length(path_name)]&'\\'}
            end if
        end if
    end if
    return 0
end function

procedure getFirstTarget()
--
-- sets filentxt to the first matching entry between <initial> and <target>
--
integer rid, ITDpack
sequence dirset, ITDset
--
-- if <target> is a subdirectory of <current> then ignore it in the scan of <current>
-- for simplicity, reject any attempt to make <current> a subdirectory of <target>?
-- if there are no subdirectories in <target> then do a full recursive scan of
-- <current>, dropping any duplicates found in sub-directories. Eg if we have:
--
-- Edit/files
--     /screen
--     /keyboard
--     /updates
--
-- If there is a readme.txt in edit & edit/screen, then just hang on to the edit/ one.
-- If there is one in files and screen, ignore both.
-- If there is one in edit/files and no-where else, keep it iff no subdirs in <target>.
--
-- Ignore any sub-directory of <target> which does not exist in <current>.
-- If there are any sub-directories in <target> then ignore any sub-directories in 
-- <current> which do not exist in <target>
--
-- Special case: Edit/ contains *only* the subdirectory updates/ and further that has
-- been selected as <target>: in which case Edit/ should be considered "flat".
--

    setText(filentxt,"")
    sub = ""
    depth = 0
    if dcompare=0
    or equal(getText(directory),"")
    or equal(getText(directory),initialdir) then
        return
    end if
--
-- Step 1. Build top-level file and directory lists for <initial> and <target>
--
    filelist = {}
    dirlist = {}
    void = walk_dir(initialdir, routine_id("look_at"), False)
    InitialTopFile = filelist
    InitialTopDir = dirlist
    filelist = {}
    dirlist = {}
    void = walk_dir(getText(directory), routine_id("look_at"), False)
    --
    -- process toplevel files first
    --
    for i=1 to length(filelist) do
        for j=1 to length(InitialTopFile) do
            if equal(filelist[i],InitialTopFile[j]) then
                setText(filentxt,filelist[i])
                setFocusBC()
                return
            end if
        end for
    end for
    --
    -- exclude <target> from InitialTopDir if that is where it is.
    --
    for i=length(InitialTopDir) to 1 by -1 do
        if equal(initialdir&InitialTopDir[i],getText(directory)) then
            InitialTopDir[i] = InitialTopDir[length(InitialTopDir)]
            InitialTopDir = InitialTopDir[1..length(InitialTopDir)-1]
        end if
    end for
    --
    -- exclude any sub-directories of <target> not in <initial>
    --
    dirset = repeat(0,length(dirlist))
    ITDset = repeat(0,length(InitialTopDir))
    ITDpack = 0
    for i=1 to length(dirlist) do
        for j=1 to length(InitialTopDir) do
            if equal(dirlist[i],InitialTopDir[j]) then
                dirset[i] = 1
                ITDset[j] = 1
            end if
        end for
        ITDpack = 1
    end for
    for i=length(dirlist) to 1 by -1 do
        if dirset[i]=0 then
            dirlist[i] = dirlist[length(dirlist)]
            dirlist = dirlist[1..length(dirlist)-1]
        end if
    end for
    --
    -- .. and any sub-directories of <initial> not in a <target> which
    -- has some sub-directories but not those..
    --
    if ITDpack then
        for i=length(ITDset) to 1 by -1 do
            if ITDset[i]=0 then
                InitialTopDir[i] = InitialTopDir[length(InitialTopDir)]
                InitialTopDir = InitialTopDir[1..length(InitialTopDir)-1]
            end if
        end for
    end if
    --
    -- now scan each sub-directory in InitialTopDir as follows:
    -- 1) if length(dirlist) then any file found must also exist in the same
    --    place in the directory structure in <target>
    -- 2) otherwise files found in sub-directories of <initial> must not
    --    exist either in the root directory (renamed or no) and must not
    --    co-exist in any other sub-directory. Hence at this point a full
    --    depth scan of <initial>'s sub-directories is required.
    --
    if length(dirlist) then
        --
        -- sanity check:
        --
        if length(dirlist)!=length(InitialTopDir) then
            stopTimer(TIMER)
            void = messageBox("Error", "Directory match failed",
                              MB_ICONEXCLAMATION+MB_OK)
            return
        end if
        rid = routine_id("look_dat")
        depth = 1
    else -- <target> is flat, full scan required
        rid = routine_id("look_flat")
        sublist = repeat(0,length(InitialTopFile))
    end if
    filelist = InitialTopFile
    for i=1 to length(InitialTopDir) do
        void = walk_dir(initialdir&InitialTopDir[i],rid,True)
        if compare(getText(filentxt),"")!=0 then return end if
    end for
    if length(filelist)!=length(InitialTopFile) then
        for i=length(InitialTopFile)+1 to length(filelist) do
            if isNotRenamed(filelist[i]) then
                setText(filentxt,filelist[i])
                sub = sublist[i]
                return
            end if
        end for
    end if
end procedure

-- used by eaxutil.ew:
global function outdiff(sequence x, sequence a, sequence b)
-- result is in CRLF format, placed on the clipboard
-- (a fraction slower, but it makes undo work as we want)
integer prevx, prevy, prevdiag, thisx, thisy, diagresult
sequence text

    prevx = 1
    prevy = 1
    prevdiag = 0
    text = {}
    for i=1 to length(x) by 2 do
        thisx = x[i]
        thisy = x[i+1]
        diagresult = thisx-thisy
        if diagresult<prevdiag then
            text = append(text,"<"&b[prevy])
            prevy += 1
        end if
        if diagresult>prevdiag then
            text = append(text,">"&a[prevx])
            prevx += 1
        end if
        for j=prevx to thisx-1 do
            text = append(text,a[j])
            prevy += 1
        end for
        prevx = thisx
        prevy = thisy
        prevdiag = diagresult
    end for
    return text
end function

procedure updateDirList()
sequence text
integer k
    text = getText(directory)
    if length(text) then
        k = getCount(directory)
        while k do
            if compare(text,getItem(directory,k))=0 then exit end if
            k -= 1
        end while
        if k=0 then
            void = insertItem(directory,text,0)
        end if
    end if
end procedure

procedure derror(integer i)
    setHandler(PROGRESS,-1)
    stopTimer(TIMER)
    removeFocus(PROGRESS)
    setVisible(PROGRESS,False)
    void = messageBox("Error",sprintf("Error opening indicated file(%d).",i),MB_OK)
    setFocusBC()
    return
end procedure

integer changes
sequence a, b, result
integer notpathmod  -- set to zero to preserve overidden pathname
        notpathmod = 1

integer initialfile, lastfile, justopenedfile, NumberOfFilesInitiallyOpen
    lastfile = 0
    NumberOfFilesInitiallyOpen = 0

procedure onclickOpen()
    if justopenedfile then
        if justopenedfile>NumberOfFilesInitiallyOpen then
            if justopenedfile!=currfile then
                actuallyChangeTo = 1
                changeTo(justopenedfile)
            end if
            closeTab()
        end if
        justopenedfile = 0
    end if
    lastfile = currfile
    void = openFile(getText(directory)&getText(filename),1,isLegacyTabHandling)
    if lastfile!=currfile then  -- file successfully opened
        justopenedfile = currfile
    end if
end procedure

function IgnoreWhitespace(sequence lines)
integer k, ch, wasSpace
sequence linei, newline
    for i=1 to length(lines) do
        linei = lines[i]
        k = find('\t',linei)
        if k=0 then
            k = match("  ",linei)
        end if
        if k then
            wasSpace = 0
            newline = repeat(' ',length(linei))
            k = 0
            for j=1 to length(linei) do
                ch = linei[j]
                if find(ch," \t") then
                    if not wasSpace then
                        k += 1
                        newline[k] = ' '
                    end if
                    wasSpace = 1
                else
                    k += 1
                    newline[k] = ch
                    wasSpace = 0
                end if
            end for
            lines[i] = newline[1..k-wasSpace]
        end if
    end for
    return lines
end function


procedure onclickCompare()
sequence x
    if dcompare then
        if justopenedfile then
            if justopenedfile>NumberOfFilesInitiallyOpen then
                if justopenedfile!=currfile then
                    actuallyChangeTo = 1
                    changeTo(justopenedfile)
                end if
                closeTab()
            end if
            justopenedfile = 0
        end if
        if equal(getText(filentxt),"") then
            derror(1)
            return
        end if
        x = initialdir
        if depth=0 then
            x &= sub
        end if
        if not openFile(x&getText(filentxt),0,isLegacyTabHandling) then
            derror(2)
            return
        end if
        x = filepaths[currfile]
        if length(x)<length(initialdir)
        or compare(x[1..length(initialdir)],initialdir)!=0 then
            derror(3)
            return
        end if
        x = getText(filentxt)
        if length(filenames[currfile])>length(x)
        or compare(x[length(x)-length(filenames[currfile])+1..length(x)],filenames[currfile])!=0 then
            derror(4)
            return
        end if
        initialfile = currfile
        if not openFile(getText(directory)&getText(filentxt),0,isLegacyTabHandling) then
            derror(5)
            return
        end if
        x = filepaths[currfile]
        if length(x)<length(getText(directory))
        or compare(x[1..length(getText(directory))],getText(directory))!=0 then
            derror(6)
            return
        end if
        x = getText(filentxt)
        if length(filenames[currfile])>length(x)
        or compare(x[length(x)-length(filenames[currfile])+1..length(x)],filenames[currfile])!=0 then
            derror(7)
            return
        end if
        justopenedfile = currfile
    end if

    if not justopenedfile then
        if not equal(getText(directory),filepaths[currfile])
        or not equal(getText(filename),filenames[currfile]) then
            onclickOpen()
        else
            void = messageBox(xl("Error"),
                              xl("Cannot compare file with itself"),
                              MB_OK)
            setFocusBC()
            return
        end if
    end if
    if justopenedfile then
        --#
        --# If the user has changed the directory, set a flag to preserve it
        --#
        actuallyChangeTo = 1
        changeTo(initialfile)
        if compare(getText(directory),filepaths[currfile])!=0 then
            notpathmod = 0
        end if
        updateDirList()
        terminate = 0
        --
        --# run the file comparison on analysed lines
        --
        a = filetext[currfile]

        b = filetext[justopenedfile]

        startTimer(TIMER, PROGRESS, 1000) -- one full second
        setScrollInfo(pbar, {1, 100}, 0)

        setHandler(PROGRESS,routine_id("pHandler"))


        if isChecked(ignores) then
            -- Note that a & b are NOT altered, they are passed to outdiff later.
            result = diff(IgnoreWhitespace(a),IgnoreWhitespace(b))
        else
            result = diff(a,b)
        end if

        setHandler(PROGRESS,-1)
        stopTimer(TIMER)
        removeFocus(PROGRESS)
        setVisible(PROGRESS,False)


        if not terminate then
            changes = length(result)/2-1
            setText(rText,sprintf(xl("%d differences found."),{changes}))
            if changes then
                setEnable(rOverite,True)
            else
                setEnable(rOverite,False)
                setCheck(Overwrite,False)
            end if
            setCheck(rOverite,isChecked(Overwrite))
            setCheck(rRename,isChecked(Rename))
            addFocus(RESULTS)
            openWindow(RESULTS,SW_NORMAL)
            setFocus(rOK)
            -- remainder of processing in onCloseRESULTS()
        else

            void = messageBox(xl("Interrupted"),
                              xl("Comparison interrupted."),
                              MB_OK)
        end if
    else
        void = messageBox(xl("Error"),
                          xl("File not opened to compare against!"),
                          MB_ICONEXCLAMATION+MB_OK)
        setFocusBC()
    end if
end procedure

procedure onCloseRESULTS()
sequence old_name, new_name
sequence ext
integer linelength

    setCheck(Rename,isChecked(rRename))

    ext = getFileExtension(filenames[justopenedfile])

    if justopenedfile>NumberOfFilesInitiallyOpen then
        if justopenedfile!=currfile then
            actuallyChangeTo = 1
            changeTo(justopenedfile)
        end if
        closeTab()
    end if
    justopenedfile = 0
    if isChecked(Rename) then
        old_name = getText(directory)
        if dcompare then
            old_name &= getText(filentxt)
        else
            old_name &= getText(filename)
        end if
        new_name = getNewName(old_name)
        if c_func(xMoveFile,{allocate_StringZ(old_name),allocate_StringZ(new_name)})=0 then
            stopTimer(TIMER)
            void = messageBox(xl("Warning"),
                              xl("Could not rename file."),
                              MB_OK)
        end if
    end if
    if changes then
        result = outdiff(result,a,b)
        if isChecked(Overwrite) then
            actuallyChangeTo = 1
            changeTo(initialfile)
        else
            if not equal(ext,getFileExtension(filenames[initialfile])) then
                ext = ""
            else
                ext = '.'&ext
            end if
            newFile(ext,{""},{1},0)
        end if
        --
        -- lastly, build a new linelengths table for edita
        --
        linelengths = repeat(0,80)
        for i=1 to length(result) do
            linelength = ExpLength(result[i])
            if linelength>=length(linelengths) then
                linelengths &= repeat(0,linelength-length(linelengths)+1)
            end if
            linelengths[linelength+1] = linelengths[linelength+1]+1
        end for
        filelinelengths[currfile] = linelengths
        filetext[currfile] = result
        bookmarks[currfile] = repeat(0,length(result))
        actions[currfile] = {}
        actionptr[currfile] = 0
        actionsave[currfile] = 0
        unpacked[currfile] = -1

        TopLine = 0
        CursorY = 0
        CursorX = 0
        selON = 0
        forceCursorOnscreen()
        paintall()

    else
        if dcompare then
            if initialfile>NumberOfFilesInitiallyOpen then
                if initialfile!=currfile then
                    actuallyChangeTo = 1
                    changeTo(initialfile)
                end if
                closeTab()
            end if
            initialfile = 0
            getFirstTarget()
            addFocus(COMPARE)
            setVisible(COMPARE,True)
            setFocusBC()
            return
        end if
    end if
end procedure



without trace
function cHandler(integer id, integer msg, atom wParam, object lParam)

    if wParam or object(lParam) then end if
--?{id,msg,wParam,lParam}
--?{id,msg,wParam,lParam,WM_NOTIFY,TCN_SELCHANGE}
    if msg=WM_CHAR then
        if wParam=VK_RETURN then
            if isVisible(RESULTS) then
                id = rOK
            elsif id!=Browse then
                id = CompareBtn
            end if
            msg = WM_COMMAND
        elsif wParam=VK_ESCAPE then
            if isVisible(RESULTS) then
                removeFocus(RESULTS)
                closeWindow(RESULTS)
            else
                removeFocus(COMPARE)
                setVisible(COMPARE,False)
                setFocus(Main)
            end if
        end if
    end if

    if msg=WM_KILLFOCUS and id=directory+1 then
        if sendMessage(directory,CB_GETDROPPEDSTATE,0,0) then
            void = sendMessage(directory,CB_SHOWDROPDOWN,0,0)
        end if
    end if
    if msg=WM_COMMAND then
        if find(id,{Overwrite,Rename,rOverite,rRename}) then
            if lParam=1 then    -- accelerator key
                setCheck(id,not isChecked(id))
            else                -- space bar or mouse click
                setCheck(id,isChecked(id))
            end if
            if find(id,{Overwrite,Rename}) then
                setFocusBC()
            elsif id=rOverite then
                setCheck(Overwrite,isChecked(rOverite))
                setFocus(rOK)
            end if
        elsif id=Browse then
            lParam = getOpenFileName(Main, getText(directory), {xl("All Files"), "*.*"}, 0, NULL)
            if sequence(lParam) and length(lParam)=1 then
                lParam = extractPathAndName(lParam[1])
                setText(directory,lParam[1])
                if dcompare then
                    getFirstTarget()
                else
                    setText(filename,lParam[2])
                end if
            end if
            setFocusBC()
        elsif id=CompareBtn then
            removeFocus(COMPARE)
            setVisible(COMPARE,False)
            onclickCompare()
            setFocus(Main)
        elsif id=dlab then
            setFocus(directory)
        elsif id=directory+1 then
            getFirstTarget()
        elsif id=flab and not dcompare then
            setFocus(filename)
        elsif id=rOK then
            removeFocus(RESULTS)
            closeWindow(RESULTS)
        end if
    end if
    if msg=WM_CLOSE then
        if id=RESULTS then
            onCloseRESULTS()
        else
            removeFocus(COMPARE)
            setVisible(COMPARE,False)
            setFocus(Main)
        end if
    end if
    return 0
end function
setHandler({COMPARE,directory,directory+1,filename,filename+1,
            Overwrite,Rename,Browse,CompareBtn,
            RESULTS,rOverite,rRename,rOK},routine_id("cHandler"))


procedure Compare(integer isDirectoryCompare)
sequence dtext,dfile
    if currfile then
        dcompare = isDirectoryCompare
        setVisible(filename,not dcompare)
        setVisible(filentxt,dcompare)
        if dcompare then
            dtext = xlna("Directory")
            setCheck(Rename,True)
            dfile = ""
        else
            dtext = ""
            dfile = filenames[currfile]
        end if
        setText(COMPARE,sprintf(xl("%s Compare  %s%s  with"),{dtext,filepaths[currfile],dfile}))
        if notpathmod then
            setText(directory,filepaths[currfile])
            updateDirList()
        end if
        NumberOfFilesInitiallyOpen = length(filenames)
        if dcompare then
            initialdir = filepaths[currfile]
            initialfile = 0
            getFirstTarget()
        else
            initialdir = ""
            samefile = filepaths[currfile]&filenames[currfile]
            initialfile = currfile
            setText(filename,filenames[currfile])
        end if
        justopenedfile = 0

        width = 0
        stretch = 0
        maxstretch = 1
        complexity = 0
        editdistance = 0

        addFocus(COMPARE)
        openWindow(COMPARE,SW_NORMAL)
        setFocusBC()
    end if
end procedure
global constant r_Compare = routine_id("Compare")
