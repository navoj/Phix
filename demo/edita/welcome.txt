Welcome.

Some suggestions to get you started. This document assumes you have installed
the plus version, or Euphoria + arwen + (full or source). Note that this is a
guide to using Edita, rather than programming in Euphoria - there are several
tutorials available on the web, see http://www.rapideuphoria.com/archive.htm
and search for "tutorial". As well as reading the documents that are shipped
with the standard versions of Euphoria, I recommend the tutorial by Wolfgang 
Fritz & Ad Rienks, and also the 'gateway' by Dan Moyer which is now shipped 
with win32lib.

You may want to print this file, as it may be easier to work with a hard copy.
Select File/Code Publisher, which opens a html version of the current file in 
the system browser (eg Internet Explorer) and you can use print/print preview 
from there.

Press Ctrl F1 to popup the Keyboard Help. There is no point trying to memorise
all the keyboard functions (there are at least 138 in total, and growing).
Resize the help window; this is the way most windows in Edita work.

Open ealtest.exw and press F5 to run it. (This will not work unless you have 
Euphoria or the "plus" version installed.) As you can see this test program
does very little and must be closed using the top right 'X'.

With ealtest.exw as the active filetab, select Tools/Window Painter. This should
tell you it found 1 window and give you the option of creating a new window; click
OK instead to edit the existing window. You should now see two windows, one which
looks identical to the running program, and the Window Painter control window.

Move the cursor over the right hand window and you should see the cursor change 
from a pointer to the standard resize and move cursors. Drag the button right a bit.
Right click on it, select the style button, and check BS_FLAT.

Now close all open windows and press F5 to run ealtest.exw again. Close it, and 
press Ctrl Z repeatedly (at least four times) to undo the changes made and press 
F5 to run it a third time.

Back in ealtest.exw, press Ctrl L to open the file panel. You should see a project 
tree containing ealtest.exw and an expandable entry for arwen.ew. In the source,
comment out the include arwen.ew line by inserting two minus signs ("--") at the
start of the line and save the changes by pressing Ctrl S. The triangle around the
little workman in the toolbar should briefly turn red, indicating that background
processing is in progress; by the time it returns to grey, the project tree should
be updated and the arwen.ew branch removed. Undo the change and save the file to put
it back. Files listed in the project tree can be opened by double clicking on them,
or by pressing Alt up/down/left/right followed by Alt Enter. Obviously the project
tree is much more useful on a file such as edita.exw than it is on ealtest.exw.

Arbitrary entries can be added to the project tree. For example, insert a line,
beginning in column 1, "--#include welcome.txt" and save the file.

Press Ctrl F2 to bookmark a line, then press Ctrl Home to jump to line 1, and F2 
to jump to the next bookmark. Block select several lines and press Ctrl - to fold 
them. Left click on the '>' to expand the fold. When editing a Euphoria source, 
ideally with the Fold margin permanent (see Options/Display), clicking on the 
margin next to a routine, loop, or if statement, folds and unfolds it.

Block select several lines and press Ctrl >, Ctrl <, Alt >, Alt <.
Repeat using the edit area pop-up menu (right click on the selected text).

Back in ealtest.exw, select Tools/Recovery. You should see a list of backups
and be able to decipher the encoded names into year (mod 10), month (1-9,ABC), 
day, and time (possibly artificially advanced to keep the names unique). Select 
an entry; you can now compare this against the original (Tools, Compare, click 
on the ealtest.exw tab, and press the compare button). If you do not check 
Overwrite (which can, obviously, be somewhat dangerous) it will open a new 
"[untitled]" tab (without syntax colouring). If you want syntax colouring,
save it as eg temp.exw (ie any file with the right extension). Press F4 to
jump to the next difference detected. Close the comparison results file.

To restore a backup in its entirety, right click on the edit area after opening
the file and select Yes on the restore prompt which appears. Alternatively cut 
and paste selected parts of the text, or try another backup. Note that restoring
a file will create another backup, when the restored file is next saved.

Automatic backups may be disabled completely or automatically deleted after a 
specified number of days (see Options/Edit).

Record a macro by pressing Ctrl F6 followed by "ABC" Return, and stop 
recording by pressing Ctrl F6 again. Pressing F6 now repeats the recorded
keystrokes. Press Shift F6 to open the Macro management screen. You can 
permanently save this macro as a default for F6 by clicking on the text
to the right of the F6 checkbox, and changing the top edit box to say
"F6 default" (anything beginning with, but longer than, "F6"). Alternatively,
you could save the macro as eg "abc", and in the next edit session reload
it to F6 by checking the F6 checkbox, selecting the abc entry from the lower
listview, and pressing Load. Note that by default macros are not preserved
between sessions, you need to use the macro management screen to make any
permanent changes.

It has to be said that keystroke macros are a bit of an art form, but they
can save hours of repetitive typing, once you get adept with them.

Note that while it is possible to edit macros, caution is advised and no
support is offered should problems arise, other than deleting the macro and 
re-recording it. Macros are covered in more detail in the manual.

And finally, change the editor fonts and colours using the entries on the 
Options menu. Edita is shipped with several programming language definition
files in the syn subdirectory, eg Euphoria.syn. One of the most important
things in these files is the line (eg) FileExtensions e ex ew exw eu exu exh
which tells Edita which syntax rules to apply, based on the filename.
As an experiment, edit syn\Euphoria.syn and change "constant" (~line 182) to
"konstant", in the "ReservedWords" section, and switch back to ealtest.exw, 
where you can make the same change, but make sure to undo all these changes 
before exiting. I am of course demonstrating Edita syntax colouring, not 
suggesting this is a way to change the Euphoria programming language. That
is done a different way:

Foreign language files (German and Dutch are supplied as standard with
Edita) are kept in the lang subdirectory, eg elng_DEU.txt. There is also
an English file, elng_ENG.txt which should be considered the "master",
and will be overwritten whenever a new version of Edita is installed.
Were you to find and edit the line "constant" = "constant" (and uncomment
it if necessary) to eg "constant" = "konstant", then the files would be
saved with "constant" but displayed with "konstant". Of course the real
purpose of the elng_XXX.txt files is to translate menu entries and prompts.
Foreign language users need to (manually) update these files when each new
version is installed; the Tools/Translation Assistant utility is designed
to make this as easy as possible. If you change any elng_ENG.txt file then
to have it preserved over the installation of a new version, you need to 
send me a copy.

Back in the Colour options window, when ealtest.exw is open, select the
"Reserved Words" checkbox and change the colour by clicking on one of the
standard colour swatches on the right, entering a known hex colour in the
top right edit box, or selecting the custom colour picker. You should see the
change applied instantly. Notice that "ReservedWords" is an arbitrary section
name, you can add new sections at will (eg for another standard library that
you use), or delete them (provided you also delete any corresponding entries
in the final Scheme section and the corrsponding .clr file).

Colour changes only apply to the current syntax class (as determined from the
current filename and the FileExtensions statements). Font changes apply equally 
to all files.

There are many other options to explore, such as creating foreign language files
(Dutch and German files are supplied in the standard package), directory compare,
find in files, capture console output, etc. These are detailed in the manual.

If you think Edita is too complex for your needs, please at least send me a list
of the features you deem unnecessary, before you go. All feedback is welcome,
good or bad, and you should know that I consider bad feeback the more useful.
Visit http://www.listfilter.com/EUforum/ to ask questions or request help.

-- ends --
