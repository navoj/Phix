--
-- Dummy header file for routine scan.
-- Contains details of Euphoria built-in procedures and functions.
-- Most of these descriptions are taken from the euphoria reference manual.
--
global procedure abort(integer i)
--
-- Abort execution of the program. The argument i is a small integer status value to be 
-- returned to the operating system. A value of 0 generally indicates successful completion 
-- of the program. Other values can indicate various kinds of errors.
-- DOS batch (.bat) programs can read this value using the errorlevel feature.
-- A Euphoria program can read this value using system_exec(). 
--
end procedure
global function allocate(integer n)
end function
global function and_bits(object x1, object x2)
--
-- Perform the logical AND operation on corresponding bits in x1 and x2.
-- Result bits will be 1 only if the corresponding bits in x1 and x2 are both 1.
--
end function
global function append(sequence s1, object x)
-- 
-- Create a new sequence identical to s1 but with x added on the end as the last element.
-- The length of s2 will be length(s1) + 1.  
-- If x is an atom this is equivalent to s2 = s1 & x. If x is a sequence it is not equivalent. 
-- Highly optimised for the case k=append(k,something_else)
--
end function
global function arctan(object x1)
-- Return an angle with tangent equal to x1.
end function
global function atom(object x)
-- Return 1 if x is an atom else return 0. 
end function
global procedure call(integer a)
-- Call a machine language routine that starts at address a.
-- This routine must execute a RET instruction #C3 to return control to Euphoria.
-- The routine should save and restore any registers that it uses. 
end procedure
global function c_func(integer rid, sequence args)
-- Call the C function with routine id rid.
-- rid must be a valid routine id returned by define_c_func().
-- s is a sequence of argument values of length n, where n is the number of arguments
-- required by the function.
end function
global procedure c_proc(integer rid, sequence args)
-- Call the C function with routine id rid.
-- rid must be a valid routine id returned by define_c_proc().
-- s is a sequence of argument values of length n, where n is the number of arguments
-- required by the function. 
end procedure
global function call_func(integer rid, sequence params)
--
-- Call the user-defined Euphoria function with routine id rid.
-- rid must be a valid routine id returned by routine_id().
-- s must be a sequence of argument values of length n, where n is the number of arguments
-- required by function rid.
--
end function
global procedure call_proc(integer rid, sequence params)
--
-- Call the user-defined Euphoria procedure with routine id rid.
-- rid must be a valid routine id returned by routine_id().
-- s must be a sequence of argument values of length n, where n is the number of arguments
-- required by procedure rid. 
--
end procedure
global procedure clear_screen()
-- Clear the screen using the current background color (may be set by bk_color()).  
end procedure
global procedure close(integer fn)
-- Close a file or device and flush out any still-buffered characters. 
end procedure
global function command_line()
--
-- Return a sequence of strings, where each string is a word from the command-line that 
-- started your program. The first word will be the path to either the Euphoria executable, 
-- ex.exe, exw.exe or exu, or to your bound executable file. The next word is either the 
-- name of your Euphoria main file, or (again) the path to your bound executable file.
--  After that will come any extra words typed by the user.
--
end function
global function compare(object x1, object x2)
--
-- Return 0 if objects x1 and x2 are identical,
-- 1 if x1 is greater than x2,
-- -1 if x1 is less than x2.
-- Atoms are considered to be less than sequences.
-- Sequences are compared "alphabetically" starting with the first element until a 
-- difference is found.
--
end function
global function cos(object x1)
-- Return the cosine of x1, where x1 is in radians.
end function
global function date()
--
--Return a sequence with the following information:  
--<                       { year,  -- since 1900
--                        { year,  -- 4 digit
--                        month,  -- January = 1
--                              day,  -- day of month, starting at 1
--                         hour,  -- 0 to 23
--                       minute,  -- 0 to 59
--                       second,  -- 0 to 59
--      day of the week,  -- Sunday = 1
--      day of the year}  -- January 1st = 1
-- 
end function
global function equal(object x1, object x2)
--
-- Compare two Euphoria objects to see if they are the same.
-- Return 1 (true) if they are the same. Return 0 (false) if they are different.
--
end function
global function find(object x, sequence s)
--
-- Find x as an element of s.
-- If successful, return the index of the first element of s that matches.
-- If unsuccessful return 0. 
--
end function
global function floor(object x1)
--
-- Return the greatest integer less than or equal to x1. (Round down to an integer.) 
--
end function
global function get_key()
--
-- Return the key that was pressed by the user, without waiting.
-- Return -1 if no key was pressed.
-- Special codes are returned for the function keys, arrow keys etc. 
--
end function
global function get_pixel(sequence s)
--
-- When s is a 2-element screen coordinate {x, y}, get_pixel() returns the color
-- (a small integer) of the pixel on the pixel-graphics screen at that point.
--
-- When s is a 3-element sequence of the form: {x, y, n} get_pixel() returns a
-- sequence of n colors for the points starting at {x, y} and moving to the right
-- {x+1, y}, {x+2, y} etc. 
--
-- Points off the screen have unpredictable color values. DOS32.
--
end function
global function getc(integer fn)
--
-- Get the next character (byte) from file or device fn.
-- The character will have a value from 0 to 255. -1 is returned at end of file.
--
end function
global function getenv(sequence s)
--
-- Return the value of a DOS environment variable. If the variable is undefined return -1. 
--
end function
global function gets(integer fn) 
--
-- Get the next sequence (one line, including '\n') of characters from file or device fn.
-- The characters will have values from 0 to 255. The atom -1 is returned on end of file.       
--
end function
global function integer(object x)
--
-- Return 1 if x is an integer in the range -1073741824 to +1073741823. Otherwise return 0.  
--
end function
global function length(sequence x)
--
-- Description: Return the length of s. s must be a sequence.
-- An error will occur if s is an atom.  
--
end function
global function log(object x1) 
--
-- Return the natural logarithm of x1.  
--
end function
global function machine_func(atom a, object x)
end function
global procedure machine_proc(atom a, object x)
end procedure
global function match(sequence s1, sequence s2) 
--
-- Try to match s1 against some slice of s2.
-- If successful, return the element number of s2 where the (first) matching slice begins,
-- else return 0.  
--
end function
global procedure mem_copy(atom a1, atom a2, integer i)
-- Copy a block of i bytes of memory from address a2 to address a1.
end procedure
global procedure mem_set(atom a1, integer i1, integer i2) 
-- Set i2 bytes of memory, starting at address a1, to the value of i1. 
end procedure
global function not_bits(object x1)
--
-- Perform the logical NOT operation on each bit in x1.
-- A bit in x2 will be 1 when the corresponding bit in x1 is 0,
-- and will be 0 when the corresponding bit in x1 is 1.
--
end function
global function object(object x)
--
-- Test if x is of type object. This will always be true, so object() will always return 1
--
end function
global function open(sequence filename, sequence mode) 
--
-- Open a file or device, to get the file number. -1 is returned if the open fails.
-- single character modes are used for text handling: "r"ead, "w"rite, "u"pdate, "a"ppend.
-- Output to text files will have carriage-return characters (\r) automatically added before
-- linefeed characters (\n). On input, these carriage-return characters are removed.
-- A control-Z character (ASCII 26) will signal an immediate end of file. 
-- Binary mode used the same one-character mode as above plus a "b", ie "rb","wb","ub","ab".
--
end function
global function or_bits(object x1, object x2) 
-- Perform the logical OR operation on corresponding bits in x1 and x2.
-- Result bit will be 1 when a corresponding bit in either x1 or x2 is 1.
end function
global function peek(object s)
--
-- When s is an integer, returns a single byte value 0..255 from machine address a.
-- When s is of the form {a,i}, returns a sequence of i bytes starting from address a.
--
end function
global function peek1s(object s)
end function
global function peek1u(object s)
end function
global function peek2s(object s)
end function
global function peek2u(object s)
end function
global function peek4s(object s)
--
-- when s is an integer, returns a 4-byte (32-bit) signed value in the range -2147483648
-- to +2147483647 from machine address a1, or when s if of the form {a,i} returns a sequence
-- containing i consecutive 4-byte signed values starting at address a1 in memory.
--
end function
global function peek4u(object s)
--
-- when s is an integer, returns a 4-byte (32-bit) unsigned value in the range 0 to
-- 4294967295 from machine address a1, or when s if of the form {a,i} returns a sequence
-- containing i consecutive 4-byte unsigned values starting at address a1 in memory.
--
end function
global function peek8s(object s)
end function
global function peek8u(object s)
end function
global procedure pixel(object x1, sequence s)
-- Set one or more pixels on a pixel-graphics screen starting at point s, where s is a
-- 2-element screen coordinate {x, y}. If x1 is an atom, one pixel will be set to the
-- color indicated by x1. If x1 is a sequence then a number of pixels will be set,
-- starting at s and moving to the right (increasing x value, same y value). 
end procedure
global function platform()
-- platform() is a function built-in to the interpreter.
-- It indicates the platform that the program is being executed on: DOS32, WIN32 or Linux. 
end function
global procedure poke(integer a, object x)
-- If x is an atom, write a single byte value to memory address a.
-- If x is a sequence, write a sequence of byte values to consecutive memory locations
-- starting at location a. 
end procedure
global procedure poke1(integer a, object x)
end procedure
global procedure poke2(integer a, object x)
end procedure
global procedure poke4(integer a, object x)
-- If x is an atom, write a 4-byte (32-bit) value to memory address a.
-- If x is a sequence, write a sequence of 4-byte values to consecutive memory locations
-- starting at location a.
end procedure
global procedure poke8(integer a, object x)
end procedure
global procedure position(integer i1, integer i2)
-- Set the cursor to line i1, column i2, where the top left corner of the screen is line 1,
-- column 1. The next character displayed on the screen will be printed at this location.
-- position() will report an error if the location is off the screen
end procedure
global function power(object x1, object x2) 
-- Raise (each element of) x1 to the power (matching element of) x2
end function
global function prepend(sequence s1, object x) 
-- Prepend x to the start of sequence s1. The length of s2 will be length(s1) + 1.
-- Highly optimised for the case k=prepend(k,something_else)
end function
global procedure print(integer fn, object x) 
-- Print, to file or device fn, an object x with braces { , , , } to show the structure.        
-- NOTE: for general output, eg "Hello", use printf or puts.
end procedure
global procedure printf(integer fn, sequence st, object x) 
--
-- Print x, to file or device fn, using format string st.
-- If x is an atom then a single value will be printed.
-- If x is a sequence, then formats from st are applied to successive elements of x.
-- Thus printf() always takes exactly 3 arguments.
-- Only the length of the last argument, containing the values to be printed, will vary.
-- The basic formats are:
-- %d - print an atom as a decimal integer
-- %x - print an atom as a hexadecimal integer
-- %o - print an atom as an octal integer
-- %s - print a sequence as a string of characters, or print an atom as a single character
-- %e - print an atom as a floating point number with exponential notation
-- %f - print an atom as a floating-point number with a decimal point but no exponent
-- %g - print an atom as a floating point number using either the %f or %e format,
--              whichever seems more appropriate
-- %% - print the '%' character itself
--
-- Field widths can be added to the basic formats, e.g. %5d, %8.2f, %10.4s. 
-- The number before the decimal point is the minimum field width to be used. 
-- The number after the decimal point is the precision to be used. 
--
-- If field width is negative, e.g. %-5d then value will be left-justified within field.
-- Normally it will be right-justified. If the field width starts with a leading 0,
-- e.g. %08d then leading zeros will be supplied to fill up the field.
-- If the field width starts with a '+' e.g. %+7d then a plus sign will be printed for
-- positive values. 
-- 
-- Comments: Watch out for the following common mistake:  
--       name="John Smith"
--      printf(1, "%s", name)           -- error!       Prints "J" only - applies %s to 1st element of x
--      printf(1, "%s", {name})         -- correct! - applies %s to 1st element of {}, name in full.
--
end procedure
global procedure profile(integer i)
-- Enable(1) or disable(0) profiling.
end procedure
global procedure puts(integer fn, object x) 
-- Output, to file or device fn, a single byte (atom) or sequence of bytes.
end procedure
global function rand(object x1) 
-- Return a random integer from 1 to x1. x1 is integer or sequence of integer.
end function
global function remainder(object x1, object x2) 
-- Compute the remainder after dividing x1 by x2.
end function
global function repeat(object x, integer a)
-- Create a sequence of length a where each element is x.
end function
global function routine_id(sequence st)
-- Return an integer id number, known as a routine id, for a user-defined Euphoria procedure 
-- or function. The name of the procedure or function is given by the string sequence st.
-- -1 is returned if the named routine can't be found.
end function
global function sequence(object x)
-- Return 1 if x is a sequence else return 0.
end function
global function sin(object x)
-- Return the sine of x1, where x1 is in radians.
end function
global function sprintf(sequence st, object x)
--
-- As printf but returns a string rather than prints to file.
-- If x is an atom then a single value will be returned.
-- If x is a sequence, then formats from st are applied to successive elements of x.
-- Thus printf() always takes exactly 2 arguments.
-- Only the length of the last argument, containing the values to be printed, will vary.
-- The basic formats are:
-- %d - print an atom as a decimal integer
-- %x - print an atom as a hexadecimal integer
-- %o - print an atom as an octal integer
-- %s - print a sequence as a string of characters, or print an atom as a single character
-- %e - print an atom as a floating point number with exponential notation
-- %f - print an atom as a floating-point number with a decimal point but no exponent
-- %g - print an atom as a floating point number using either the %f or %e format,
--              whichever seems more appropriate
-- %% - print the '%' character itself
--
-- Field widths can be added to the basic formats, e.g. %5d, %8.2f, %10.4s. 
-- The number before the decimal point is the minimum field width to be used. 
-- The number after the decimal point is the precision to be used. 
--
-- If field width is negative, e.g. %-5d then value will be left-justified within field.
-- Normally it will be right-justified. If the field width starts with a leading 0,
-- e.g. %08d then leading zeros will be supplied to fill up the field.
-- If the field width starts with a '+' e.g. %+7d then a plus sign will be printed for
-- positive values. 
-- 
-- Comments: Watch out for the following common mistake:  
--       name="John Smith"
--      printf(1, "%s", name)           -- error!       Prints "J" only - applies %s to 1st element of x
--      printf(1, "%s", {name})         -- correct! - applies %s to 1st element of {}, name in full.
--
end function
global function sqrt(object x1)
-- Calculate the square root of x1
end function
global procedure system(sequence st, integer mode) 
-- Pass a command string st to the operating system command interpreter.
-- mode=0 to restore graphics mode, 1 to beep/prompt beforehand, 2 not restore or clear.
end procedure
global function system_exec(sequence st, integer mode) 
-- Try to run the command given by st. st must be a command to run an executable program,
-- possibly with some command-line arguments. If the program can be run, returns the exit
-- code from the program. If it is not possible to run the program, system_exec() returns -1.
-- mode=0 to restore graphics mode, 1 to beep/prompt beforehand, 2 not restore or clear.
end function
global function tan(object x1) 
-- Return the tangent of x1, where x1 is in radians.
end function
global function time()
-- Return the number of seconds since some fixed point in the past.
-- accurate to 0.01 on windows. Use the difference between two calls to measure time/speed.
-- use date() to get the time of day.
end function
global procedure trace(integer i)
-- 0: disable tracing/debugging. 1: in colour. 2: monochrome. 3. create ctrace.out
end procedure
global function xor_bits(object x1, object x2)
-- Perform the logical XOR (exclusive OR) operation on corresponding bits in x1 and x2.
-- Result bit is 1 when one of the two corresponding bits in x1 or x2 is 1, and the other is 0.  
end function
