<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">suspend_thread</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
         suspend_thread(<a href="atom.htm">atom</a> hThread)
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>
            Suspend execution of a thread.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Comments:</b>
         </td>
         <td>
            This method is intended primarily for use in <a href="mtask.htm">multitasking</a>, which is implemented 
            in phix as a collection of threads, all but one of which are suspended at any given moment. Therefore 
            locking is not required, which makes multitasking simpler than multithreading, but should any task stall, 
            for instance waiting for a network connection, then the entire app stalls, a problem which does not 
            afflict multithreading.
            <br>
            <br>
            Generally speaking the only sensible use of suspend_thread() is by the thread itself, since arbitrarily 
            suspending another active thread is quite likely to lead to deadlock.
            <br>
            <br>
            In the phix implementation of <a href="mtask.htm">multitasking</a>, when a task invokes 
            <a href="task_yield.htm">task_yield</a>(), assuming that there is indeed another task that control should 
            now be transfered to, it invokes <a href="resume_thread.htm">resume_thread</a>() on that other thread(/task), 
            before invoking suspend_thread() on itself. Of course the line of code immediately following 
            suspend_thread(me) is only ever executed if somebody else graciously invokes resume_thread(you).
            <br>
            <br>
            The thread handles used in builtins\VM\pTask.e are private to that module, which thankfully prevents 
            accidentally invoking suspend_thread() on one of them, which without anything still running to invoke 
            <a href="resume_thread.htm">resume_thread</a>() would effectively stop all running tasks permanently.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="mtask.htm">multitasking</a>,
          <a href="task_yield.htm">task_yield</a>,
          <a href="resume_thread.htm">resume_thread</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
