<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">bigatom</h1>
      <div id="mainSection">
        arbitrary precision arithmetic, by Carlos Gómez Andreu (cargoan)
        <br>
        <br>
        Incluled in the distribution as builtins\bigatom.e (not an autoinclude).
        <br>
        <br>
        I (Pete Lomax) have translated the comments as best I can, and renamed the overrides log/exp/sqrt as b_a_log/b_a_exp/b_a_sqrt.
        <br>
        (Phix does not allow and in fact has recently been modified to expressly prohibit any builtin overides.)
        <br>
        Be advised that internally this uses simple digit-by-digit mechanisms and is not a high performance implementation.
        <br>
        (If it is possible that instead of digits 0..9 it used "digits" 0..999,999,999 then it might be ten times faster... Maybe...)
        <br>
        <br>
        Once you understand how to create and display bigatoms, the rest is all pretty straightforward.
        <br>
        <br>
        <a href="bigatom_type.htm">bigatom</a> - the bigatom type
        <br>
        <a href="ba_new.htm">bigatom ba = ba_new(object x)</a> - create a bigatom instance value
        <br>
        <a href="ba_scale.htm">sequence prev = ba_scale(object decs=-1, integer mode=-1)</a> - set library precision and/or mode
        <br>
        <a href="ba_sprintf.htm">string s = ba_sprintf(sequence fmt, bigatom N)</a> - get formatted string (%B) representation
        <br>
        ba_printf(integer file, sequence fmt, bigatom N) - print formatted sting (%B) representation
        <br>
        string s = ba_sprint(bigatom N) - get standard string representation 
        <br>
        ba_print(integer file, bigatom N) - print standard string representation
        <br>
        integer i = ba_scale_of(bigatom N) -- the number of decimals before the decimal point, eg ba_scale_of(ba_new(123.456)) is 3
        <br>
        integer i = ba_compare(bigatom A, bigatom B)    -- -1/0/1 (A&lt;B/A=B/A&gt;B) as per compare()
        <br>
        bigatom ba = ba_add(object A, object B)         -- A,B can be atom/string/bigatom
        <br>
        bigatom ba = ba_sub(object A, object B)         -- A,B can be atom/string/bigatom
        <br>
        bigatom ba = ba_multiply(object A, object B)    -- A,B can be atom/string/bigatom
        <br>
        bigatom ba = ba_idivide(object A, object B)     -- A,B can be atom/string/bigatom
        <br>
        bigatom ba = ba_divide(object A, object B)      -- A,B can be atom/string/bigatom
        <br>
        bigatom ba = ba_remainder(object A, object B)   -- A,B can be atom/string/bigatom
        <br>
        <a href="ba_round.htm">bigatom ba = ba_round(object N, object B)</a> -- rounding function
        <br>
        bigatom ba = ba_abs(bigatom N) - absolute (unsigned) value
        <br>
        bigatom ba = ba_trunc(bigatom N) - integer part of a bigatom
        <br>
        bigatom ba = ba_frac(bigatom N) - fractional part of a bigatom
        <br>
        bigatom ba = ba_floor(bigatom N) - integer equal to or immediately less 
        <br>
        bigatom ba = ba_ceil(bigatom N) - integer equal to or immediately greater
        <br>
        atom a = b_a_log(atom x) -- adapted from bigfixedmath.e, apparently better than log()
        <br>
        atom a = logb(atom x, atom base=10)
        <br>
        atom a = b_a_exp(atom x) -- adapted from library bc, apparently better than exp()
        <br>
        atom a = b_a_sqrt(atom x) -- apparently better than sqrt()
        <br>
        bigatom ba = ba_log(object x, integer bRound=0) -- x can be atom/string/bigatom
        <br>
        bigatom ba = ba_exp(object x, integer bRound=0) -- x can be atom/string/bigatom
        <br>
        bigatom ba = ba_power(object x, object n, integer bRound=0) -- x,n can be atom/string/bigatom (x^n)
        <br>
        bigatom ba = ba_sqrt(object x, integer bRound=0)    -- x can be atom/string/bigatom
        <br>
        bigatom ba = ba_root(object x, object n, integer bRound=0) -- x,n can be atom/string/bigatom (x^(1/n))
        <br>
        bigatom ba = ba_log10(object x, integer bRound=0)   -- x can be atom/string/bigatom
        <br>
        bigatom ba = ba_logb(object x, object base=10, integer bRound=0) -- x,base can be atom/string/bigatom
        <br>
        atom a = bigatom_to_atom(bigatom N) -- an atom with approximately the value of a bigatom
        <br>
        object x = ba_euler(integer decs, integer o=0) -- e to decs places, as string(o=0) or bignum
        <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
