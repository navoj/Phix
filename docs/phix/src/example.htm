<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Example Program</h1>
      <div id="mainSection">
       <p>The following is an example of a complete phix program. If you are looking for something you can run, you are better off
          trying "p pdemo" (or "phix pdemo" on linux).</p>
       <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
        <div class="codeSnippetContainerCodeContainer">
         <div class="codeSnippetToolBar">
          <div class="codeSnippetToolBarText">
           <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_12a65b96-c3ab-4175-936c-8d2195c81946');">Copy</a>
          </div>
         </div>
         <div id="CodeSnippetContainerCode_12a65b96-c3ab-4175-936c-8d2195c81946" class="codeSnippetContainerCode" dir="ltr">
          <div style="color:Black;">
<!--eucode>
function merge_sort(sequence x)
-- put x into ascending order using a recursive merge sort
integer midpoint
sequence merged, first_half, second_half
     if length(x)<=1 then
         return x  -- trivial case
     end if
     midpoint = floor(length(x)/2)
     first_half = merge_sort(x[1..midpoint])
     second_half = merge_sort(x[midpoint+1..$])
     -- merge the two sorted halves into one
     merged = {}
     while length(first_half)>0 
       and length(second_half)>0 do
         if first_half[1]<=second_half[1] then
             merged = append(merged, first_half[1])
             first_half = first_half[2..$]
         else
             merged = append(merged, second_half[1])
             second_half = second_half[2..$]
         end if
     end while
     -- result is the merged data plus any leftovers
     return merged & first_half & second_half
end function

sequence list = {9, 10, 3, 1, 4, 5, 8, 7, 6, 2}
     ? merge_sort(list)
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">function</font><font color="#000000"> merge_sort</font><font color="#0000FF">(</font><font color="#004080">sequence</font><font color="#000000"> x</font><font color="#0000FF">)
</font><font color="#000080"><i>-- put x into ascending order using a recursive merge sort
</i></font><font color="#004080">integer</font><font color="#000000"> midpoint
</font><font color="#004080">sequence</font><font color="#000000"> merged</font><font color="#0000FF">,</font><font color="#000000"> first_half</font><font color="#0000FF">,</font><font color="#000000"> second_half
</font><font color="#008080">     if</font><font color="#7060A8"> length</font><font color="#0000FF">(</font><font color="#000000">x</font><font color="#0000FF">)&lt;=</font><font color="#000000">1</font><font color="#008080"> then
         return</font><font color="#000000"> x </font><font color="#000080"><i> -- trivial case
</i></font><font color="#008080">     end if
</font><font color="#000000">     midpoint</font><font color="#0000FF"> =</font><font color="#7060A8"> floor</font><font color="#0000FF">(</font><font color="#7060A8">length</font><font color="#800000">(</font><font color="#000000">x</font><font color="#800000">)</font><font color="#0000FF">/</font><font color="#000000">2</font><font color="#0000FF">)
</font><font color="#000000">     first_half</font><font color="#0000FF"> =</font><font color="#000000"> merge_sort</font><font color="#0000FF">(</font><font color="#000000">x</font><font color="#800000">[</font><font color="#000000">1</font><font color="#0000FF">..</font><font color="#000000">midpoint</font><font color="#800000">]</font><font color="#0000FF">)
</font><font color="#000000">     second_half</font><font color="#0000FF"> =</font><font color="#000000"> merge_sort</font><font color="#0000FF">(</font><font color="#000000">x</font><font color="#800000">[</font><font color="#000000">midpoint</font><font color="#0000FF">+</font><font color="#000000">1</font><font color="#0000FF">..</font><font color="#000000">$</font><font color="#800000">]</font><font color="#0000FF">)
</font><font color="#000080"><i>     -- merge the two sorted halves into one
</i></font><font color="#000000">     merged</font><font color="#0000FF"> = {}
</font><font color="#008080">     while</font><font color="#7060A8"> length</font><font color="#0000FF">(</font><font color="#000000">first_half</font><font color="#0000FF">)&gt;</font><font color="#000000">0 
</font><font color="#008080">       and</font><font color="#7060A8"> length</font><font color="#0000FF">(</font><font color="#000000">second_half</font><font color="#0000FF">)&gt;</font><font color="#000000">0</font><font color="#008080"> do
         if</font><font color="#000000"> first_half</font><font color="#0000FF">[</font><font color="#000000">1</font><font color="#0000FF">]&lt;=</font><font color="#000000">second_half</font><font color="#0000FF">[</font><font color="#000000">1</font><font color="#0000FF">]</font><font color="#008080"> then
</font><font color="#000000">             merged</font><font color="#0000FF"> =</font><font color="#7060A8"> append</font><font color="#0000FF">(</font><font color="#000000">merged</font><font color="#0000FF">,</font><font color="#000000"> first_half</font><font color="#800000">[</font><font color="#000000">1</font><font color="#800000">]</font><font color="#0000FF">)
</font><font color="#000000">             first_half</font><font color="#0000FF"> =</font><font color="#000000"> first_half</font><font color="#0000FF">[</font><font color="#000000">2</font><font color="#0000FF">..</font><font color="#000000">$</font><font color="#0000FF">]
</font><font color="#008080">         else
</font><font color="#000000">             merged</font><font color="#0000FF"> =</font><font color="#7060A8"> append</font><font color="#0000FF">(</font><font color="#000000">merged</font><font color="#0000FF">,</font><font color="#000000"> second_half</font><font color="#800000">[</font><font color="#000000">1</font><font color="#800000">]</font><font color="#0000FF">)
</font><font color="#000000">             second_half</font><font color="#0000FF"> =</font><font color="#000000"> second_half</font><font color="#0000FF">[</font><font color="#000000">2</font><font color="#0000FF">..</font><font color="#000000">$</font><font color="#0000FF">]
</font><font color="#008080">         end if
     end while
</font><font color="#000080"><i>     -- result is the merged data plus any leftovers
</i></font><font color="#008080">     return</font><font color="#000000"> merged</font><font color="#0000FF"> &amp;</font><font color="#000000"> first_half</font><font color="#0000FF"> &amp;</font><font color="#000000"> second_half
</font><font color="#008080">end function

</font><font color="#004080">sequence</font><font color="#000000"> list</font><font color="#0000FF"> = {</font><font color="#000000">9</font><font color="#0000FF">,</font><font color="#000000"> 10</font><font color="#0000FF">,</font><font color="#000000"> 3</font><font color="#0000FF">,</font><font color="#000000"> 1</font><font color="#0000FF">,</font><font color="#000000"> 4</font><font color="#0000FF">,</font><font color="#000000"> 5</font><font color="#0000FF">,</font><font color="#000000"> 8</font><font color="#0000FF">,</font><font color="#000000"> 7</font><font color="#0000FF">,</font><font color="#000000"> 6</font><font color="#0000FF">,</font><font color="#000000"> 2</font><font color="#0000FF">}
     ?</font><font color="#000000"> merge_sort</font><font color="#0000FF">(</font><font color="#000000">list</font><font color="#0000FF">)</font>
</pre>
          </div>
         </div>
        </div>
       </div>
        The above example delares a
        <a href="functions.htm">function</a>, a
        <a href="Sequences.htm">sequence</a>, and 
        then invokes the function and displays the results. It also demonstrates how 
        <a href="sequence.htm">sequences</a> (flexible arrays) are the real powerhouse of phix.
       <br>
       <br>
         The output from the program is:
<!--eucode>
    {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
</eucode-->
<pre>
<font color="#000000"></font><font color="#0000FF">    {</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000"> 2</font><font color="#0000FF">,</font><font color="#000000"> 3</font><font color="#0000FF">,</font><font color="#000000"> 4</font><font color="#0000FF">,</font><font color="#000000"> 5</font><font color="#0000FF">,</font><font color="#000000"> 6</font><font color="#0000FF">,</font><font color="#000000"> 7</font><font color="#0000FF">,</font><font color="#000000"> 8</font><font color="#0000FF">,</font><font color="#000000"> 9</font><font color="#0000FF">,</font><font color="#000000"> 10</font><font color="#0000FF">}</font>
</pre>
        <font color="#020202">
         merge_sort() will just as easily sort
         <font face="Arial, Helvetica">{1.5, -9, 1e6, 100} </font>or
         <font face="Arial, Helvetica">{"oranges", "apples", "bananas"} </font>.
        </font>
       <br>
       <br>
         This example is stored as
        <b>demo\mergesort.exw</b>.
        The standard phix distribution also contains over 100 other sample programs, including pdemo.exw which lists
        them all with a simple filter/search mechanism, and can run or edit any that interest you.
       <br>
       <br>
         Note that you would normally just use the builtin sort rather than write
         your own routine. If you need to sort huge amounts of data and would like
         to investigate alternative algorithms to find which works best with that
         data, see
        <b>demo\allsorts.exw</b> which contains nine of them along with
         testing/timing code to show performance with increasing amounts of data.
         The example
        <b>demo\filesort.exw</b> demonstrates practical use of
         the generic builtin sort routine.
       <br>
       <br>
         In fact, the following single line of code is also a complete phix program and gets exactly the same results as above
       <br>
       <br>
       <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
        <div class="codeSnippetContainerCodeContainer">
         <div class="codeSnippetToolBar">
          <div class="codeSnippetToolBarText">
           <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_92a65b96-c3ab-4875-936c-8d2195c81946');">Copy</a>
          </div>
         </div>
         <div id="CodeSnippetContainerCode_92a65b96-c3ab-4875-936c-8d2195c81946" class="codeSnippetContainerCode" dir="ltr">
          <div style="color:Black;">
<!--eucode>
    ? sort({9, 10, 3, 1, 4, 5, 8, 7, 6, 2})
</eucode-->
<pre>
<font color="#000000"></font><font color="#0000FF">    ?</font><font color="#5E005E"> sort</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#000000">9</font><font color="#0000FF">,</font><font color="#000000"> 10</font><font color="#0000FF">,</font><font color="#000000"> 3</font><font color="#0000FF">,</font><font color="#000000"> 1</font><font color="#0000FF">,</font><font color="#000000"> 4</font><font color="#0000FF">,</font><font color="#000000"> 5</font><font color="#0000FF">,</font><font color="#000000"> 8</font><font color="#0000FF">,</font><font color="#000000"> 7</font><font color="#0000FF">,</font><font color="#000000"> 6</font><font color="#0000FF">,</font><font color="#000000"> 2</font><font color="#800000">}</font><font color="#0000FF">)</font>
</pre>
          </div>
         </div>
        </div>
       </div>
        <b>Compatibility note:</b> RDS Eu/OpenEuphoria require "compare(first_half[1],second_half[1])&lt;=0" 
        in place of "first_half[1]&lt;=second_half[1]" in the first example, and "include sort.e" in 
        the second; the resulting source code also works on phix. Obviously any
        further examples in this document are likewise written as clearly and 
        succinctly as possible, rather than to maximise compatibility.
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
