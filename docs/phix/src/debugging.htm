<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Debugging and Profiling</h1>
      <div id="mainSection">
         Debugging in Phix is much easier than in most other programming languages.
         Extensive run-time checking provided by the phix interpreter
         catches many bugs that in other languages might take hours of
         your time to track down. When the interpreter catches an error, you will always get
         a brief report on your screen, and a detailed report in a file called
        <font color="#030303">
         <b>ex.err</b>
        </font>. These reports include a full English description of what happened, along with a
         call-stack traceback. The file
        <font color="#030303">
         <b>ex.err</b>
        </font>
         will also have a dump of all variable values, and optionally a list of 
         the most recently executed statements. For extremely large <a href="sequence.htm">sequences</a>, 
         only a partial dump is shown. If
        <font color="#030303">
         <b>ex.err</b>
        </font> 
         is not convenient, you can choose another file name, anywhere on your system, 
         by calling
        <a href="crash_file.htm">crash_file</a>().
       <br>
       <br>
         In addition, you are able to create
        <a href="usingtypes.htm#type">user-defined types</a> that precisely
         determine the set of legal values for each of your variables. An error report
         will occur the moment that one of your variables is assigned an illegal value.
       <br>
       <br>
         Sometimes a program will misbehave without failing any run-time checks. In
         any programming language it may be a good idea to simply study the source
         code and rethink the algorithm that you have coded. It may also be useful
         to insert print statements at strategic locations in order to monitor the
         internal logic of the program. This approach is particularly convenient in
         an interpreted language like phix since you can simply edit the source
         and rerun the program without waiting for a re-compile/re-link.
       <br>
        <a name=trace></a>
       <br>
         The interpreter provides you with additional powerful tools for debugging. 
         Using trace(1) you can
        <font color="#030303">
         <b>
          <i>trace</i>
         </b>
        </font>
         the execution of your program on one screen while
         you witness the output of your program on another. 
         trace(2) is the same as trace(1) but the trace screen will be 
         in monochrome. Finally, using trace(3), you can log all 
         executed statements to a file called
        <b>ctrace.out</b>.
       <br>
       <br>
        <b>
         <a href="with.htm">
          <font color="#2C5C2C">with trace</font>
         </a> /
         <a href="with.htm">
          <font color="#2C5C2C">without trace</font>
         </a>
        </b>
         special statements select the
         parts of your program that are available for tracing. Often you
         will simply insert a
        <font color="#2C5C2C">
         <b>with trace</b>
        </font>
         statement at the very beginning of
         your source code to make it all traceable. Sometimes it is better to place
         the first
        <font color="#2C5C2C">
         <b>with trace</b>
        </font>
         after all of your
        <a href="usingtypes.htm#type">user-defined types</a>, so
         you do not trace into these routines after each assignment to a variable.
         At other times, you may know exactly which routine or routines you are
         interested in tracing, and you will want to select only these ones. Of
         course, once you are in the trace window you can interactively skip over
         the execution of any routine by pressing down-arrow on the keyboard rather
         than Enter.
       <br>
       <br>
DEV (ctrace.out not yet supported)<br>
         Only traceable lines can appear in
        <font color="#030303">
         <b>ctrace.out</b>
        </font> or in
        <font color="#030303">
         <b>ex.err</b>
        </font>
         as "Traced lines leading up to the failure" should a run-time error occur.
         If you want this information and did not get it, you should insert a
        <font color="#2C5C2C">
         <b>with trace</b>
        </font>
         and then rerun your program.
         Execution will be slower when lines compiled
        <font color="#2C5C2C">
         <b>with trace</b>
        </font> are executed, especially when trace(3) is used.
       <br>
       <br>
         After you have predetermined the lines that are traceable, your program must
         then dynamically cause the trace facility to be activated by executing a
        <a href="trace.htm">trace</a>() statement.
         You could simply say:
<!--eucode>
        with trace
        trace(1)
</eucode-->
<pre>
<font color="#000000"></font><font color="#2C5C2C">        with trace
        trace</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">)</font>
</pre>
         at the top of your program, so you can start tracing from the beginning of
         execution. More commonly, you will want to trigger tracing when a certain
         routine is entered, or when some condition arises. e.g.
<!--eucode>
        if x < 0 then
            trace(1)
        end if
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">        if</font><font color="#000000"> x</font><font color="#0000FF"> &lt;</font><font color="#000000"> 0</font><font color="#008080"> then
</font><font color="#2C5C2C">            trace</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">)
</font><font color="#008080">        end if</font>
</pre>
         You can turn off tracing by executing a
        <a href="trace.htm">trace(0)</a> statement. You can also
         turn it off interactively by typing 'q' to quit tracing. Remember that
        <font color="#2C5C2C">
         <b>with trace</b>
        </font> must appear
        <b>
         <i>outside</i>
        </b> of any routine, whereas trace() can appear
        <b>
         <i>inside</i>
        </b> a routine
        <b>
         <i>or outside</i>
        </b>.
       <br>
       <br>
         You might want to turn on tracing from within a
        <a href="types.htm">type</a>. Suppose you run your
         program and it fails, with the
        <font color="#030303">
         <b>ex.err</b>
        </font>
         file showing that one of your variables has been set to a strange,
         although not illegal value, and you wonder how it could have happened. Simply
        <a href="usingtypes.htm#type">create a type</a> for that variable that executes
        <font color="#006699">trace(1)</font> if the value being
         assigned to the variable is the strange one that you are interested in. e.g.
<!--eucode>
        type positive_int(integer x)
            if x = 99 then
                trace(1) -- how can this be???
                return 1 -- keep going
            else
                return x > 0
            end if
        end type
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">        type</font><font color="#7060A8"> positive_int</font><font color="#0000FF">(</font><font color="#004080">integer</font><font color="#000000"> x</font><font color="#0000FF">)
</font><font color="#008080">            if</font><font color="#000000"> x</font><font color="#0000FF"> =</font><font color="#000000"> 99</font><font color="#008080"> then
</font><font color="#2C5C2C">                trace</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">)</font><font color="#000080"><i> -- how can this be???
</i></font><font color="#008080">                return</font><font color="#000000"> 1</font><font color="#000080"><i> -- keep going
</i></font><font color="#008080">            else
                return</font><font color="#000000"> x</font><font color="#0000FF"> &gt;</font><font color="#000000"> 0
</font><font color="#008080">            end if
        end type</font>
</pre>
         When positive_int() returns,
         you will see the exact statement that caused your variable to be set to the
         strange value, and you will be able to check the values of other variables.
         You will also be able to check the output screen to
         see what has happened up to this precise moment. If you define
         positive_int() so it returns 0 for the strange value (99) instead of 1, you
         can force a diagnostic dump into
        <font color="#030303">
         <b>ex.err</b>
        </font>.
       <br>
       <a name=11></a>
       <br>
       <font color="#010101" size=+1>
3.1.1 The Trace Screen
       </font>
       <br>
       <br>
         When a
        <a href="trace.htm">trace(1)</a> or trace(2) 
         statement is executed by the interpreter,
         your main output screen is saved and a
        <font color="#030303">
         <b>trace screen</b>
        </font> appears.
         It shows a view of your program with the statement
         that will be executed next highlighted, and several statements before and
         after showing as well. Several lines at the bottom of the screen are
         reserved for displaying variable names and values. The top line shows the
         commands that you can enter at this point:
       <br>
       <br>
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>
           <font color="#030303">F1</font>
          </b>
         </td>
         <td width=10 align=center valign=top>-</td>
         <td>display main output screen - take a look at your program&rsquo;s output so far
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>
           <font color="#030303">F2</font>
          </b>
         </td>
         <td width=10 align=center valign=top>-</td>
         <td>redisplay trace screen. Press this key while viewing the main output screen to return to the trace display.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>
           <font color="#030303">Enter</font>
          </b>
         </td>
         <td width=10 align=center valign=top>-</td>
         <td>execute the currently-highlighted statement only</td>
        </tr>
        <tr>
         <td valign=top>
          <b>
           <font color="#030303">down-arrow</font>
          </b>
         </td>
         <td width=10 align=center valign=top>-</td>
         <td>continue execution and break when any statement coming after
           this one in the source listing is about to be executed. This lets you skip
           over subroutine calls. It also lets you stop on the first statement
           following the end of a
          <a href="for.htm">for-loop</a> or
          <a href="while.htm">while-loop</a> without having to witness
           all iterations of the loop.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>
           <font color="#030303">?</font>
          </b>
         </td>
         <td width=10 align=center valign=top>-</td>
         <td>display the value of a variable. Many variables are displayed
         automatically as they are assigned a value, but sometimes you will have
         to explicitly ask for one that is not on display. After hitting
          <font color="#030303">
           <b>?</b>
          </font>
         you will be prompted for the name of the variable. Variables that are
         not defined at this point cannot be shown. Variables that have not yet
         been initialized will have "&lt; NO VALUE &gt;" beside their name. Only
         variables, not general expressions, can be displayed.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>
           <font color="#030303">q</font>
          </b>
         </td>
         <td width=10 align=center valign=top>-</td>
         <td>quit tracing and resume normal execution. Tracing will
             start again when the next trace(1) is executed.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>
           <font color="#030303">Q</font>
          </b>
         </td>
         <td width=10 align=center valign=top>-</td>
         <td>quit tracing and let the program run freely to its normal
             completion. trace() statements will be ignored.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>
           <font color="#030303">!</font>
          </b>
         </td>
         <td width=10 align=center valign=top>-</td>
         <td>this will abort execution of your program. A traceback
             and dump of variable values will go to
          <font color="#030303">
           <b>ex.err</b>
          </font>.
         </td>
        </tr>
       </table>
       <br>
        &nbsp;
       <br>
         As you trace your program, variable names and values appear automatically in
         the bottom portion of the screen. Whenever a variable is assigned-to, you will
         see its name and new value appear at the bottom. This value is always kept
         up-to-date. Private variables are automatically cleared from the screen
         when their routine returns. When the variable display area is full,
         least-recently referenced variables will be discarded to make room for
         new variables. The value of a long <a href="sequence.htm">sequence</a> will be cut off after 80
         characters.
       <br>
       <br>
         For your convenience, numbers that are in the range of printable ASCII
         characters (32-127) are displayed along with the ASCII character itself. The
         ASCII character will be in a different color (or in quotes in a mono display).
         This is done for all variables, since phix does not know in general
         whether you are thinking of a number as an ASCII character or not. You will
         also see ASCII characters (in quotes) in
        <font color="#030303">
         <b>ex.err</b>
        </font>. This can make for a rather
         "busy" display, but the ASCII information is often very useful.
       <br>
       <br>
         When a traced program requests keyboard input, the main output screen will
         appear, to let you type your input as you normally would. This works fine for
        <a href="gets.htm">gets</a>() (read one line) input.
         When
        <a href="get_key.htm">get_key</a>() (quickly sample the keyboard) is
         called you will be given 8 seconds to type a character, otherwise it is
         assumed that there is no input for this call to get_key(). This allows you to
         test the case of input and also the case of no input for get_key().
       <br>
       <br>
       <font color="#010101" size=+1>
3.1.2 The Trace File
       </font>
       <br>
       <br>
        When your program calls trace(3), tracing to a file is activated.
        The file,
        <b>ctrace.out</b> will be created in the current directory.
        It contains the last 500 phix statements that your program executed.
        It is set up as a circular buffer that holds a maximum of 500
        statements. The very last statement executed is
        always followed by "=== THE END ===". Because it is circular, the
        last statement executed could appear anywhere in
        <b>ctrace.out</b>.
        The statement coming after "=== THE END ===" is the 500th-last.
        When the end of
        <b>ctrace.out</b> is reached, the next statement
        is written at the beginning of the file.
       <br>
       <br>
<br>DEV (ctrace.out not yet supported)<br>
        This form of tracing is supported by both the interpreter and
        compiler. It is particularly useful when a machine-level error 
        occurs that prevents phix from writing out an
        <b>ex.err</b> diagnostic file. By looking at the last
        statement executed, you may be able to guess why the program
        crashed. Perhaps the last statement was a <a href="poke.htm">poke</a>() into an illegal
        area of memory. Perhaps it was a call to a C routine. In some
        cases it might be a bug in the interpreter or compiler.
       <br>
       <br>
        Statements are written to
        <b>ctrace.out</b>, and flushed, just
        <i>before</i> the statement is performed, so the crash will likely have happened
        <i>during</i>
        execution of the final statement.
       <br>
       <a name=2></a>
       <br>
       <font color="#010101" size=+1>
3.2 Profiling
       </font>
       <br>
        If you specify
        <a href="with.htm">
         <font color="#2C5C2C">
          <b>with profile</b>
         </font>
        </a> or
        <a href="with.htm">
         <font color="#2C5C2C">
          <b>with profile_time</b>
         </font>
        </a>
         then a special listing of your program, called a
        <font color="#030303">
         <b>
          <i>profile</i>
         </b>
        </font>,
         will be produced by the interpreter when your program finishes execution. 
         This listing is
         written to the file
        <font color="#030303">
         <b>ex.pro</b>
        </font> in the current directory.
       <br>
       <br>
         There are two types of profiling available:
        <font color="#030303">
         <b>execution-count profiling</b>
        </font>,
         and
        <font color="#030303">
         <b>time profiling</b>
        </font>.
         You get execution-count profiling when you specify
        <font color="#2C5C2C">
         <b>with profile</b>
        </font>. You get time profiling when you specify
        <font color="#2C5C2C">
         <b>with profile_time</b>
        </font>.
         You cannot mix the two types of profiling in a single run of your program.
         You need to make two separate runs.
       <br>
       <br>
         We ran the
        <font color="#5500FF">
         <b>sieve.ex</b>
        </font> benchmark program in
        <font color="#5500FF">
         <b>demo\bench</b>
        </font> under both types of profiling. The results are in
        <font color="#5500FF">
         <b>sieve1.pro</b>
        </font> (execution-count profiling)
         and
        <font color="#5500FF">
         <b>sieve2.pro</b>
        </font> (time profiling).
       <br>
       <br>
         Execution-count profiling shows precisely how many times each statement
         in your program was executed. If the statement was never executed the
         count field will be blank.
       <br>
       <br>
         Time profiling shows an estimate of the total time spent
         executing each statement. This estimate is expressed as a percentage of the
         time spent profiling your program. If a statement was never sampled, 
         the percentage field will be blank. If you see 0.00 it means the 
         statement was sampled, but not enough to get a score of 0.01.
       <br>
       <br>
         Only statements compiled
        <font color="#2C5C2C">
         <b>with profile</b>
        </font>
         or
        <font color="#2C5C2C">
         <b>with profile_time</b>
        </font> are shown in the listing. Normally you will specify either
        <font color="#2C5C2C">
         <b>with profile</b>
        </font>
         or
        <font color="#2C5C2C">
         <b>with profile_time</b>
        </font> at the top of your main
        <b>.ex</b> file, so you can get a complete listing.
         View this file with Edita/Edix to see a color display.
       <br>
       <br>
         Profiling can help you in many ways:
       <ul>
        <li>
         it lets you see which statements are heavily executed,
         as a clue to speeding up your program
        </li>
        <li>
         it lets you verify that your program is actually working
         the way you intended
        </li>
        <li>
         it can provide you with statistics about the input data
        </li>
        <li>
         it lets you see which sections of code were never tested
         - don&rsquo;t let your users be the first!
        </li>
       </ul>
         Sometimes you will want to focus on a particular action performed by your
         program. For example, in the Language War game, we found that the game
         in general was fast enough, but when a planet exploded, shooting 2500
         pixels off in all directions, the game slowed down. We wanted to speed
         up the explosion routine. We didn&rsquo;t care about the rest of the code. The
         solution was to call
        <a href="profile.htm">profile(0)</a>
         at the beginning of Language War, just after
        <font color="#2C5C2C">
         <b>with profile_time</b>
        </font>,
         to turn off profiling, and then to call
        <font color="#006699">profile(1)</font> at the beginning of the
         explosion routine and
        <font color="#006699">profile(0)</font>
         at the end of the routine. In this way
         we could run the game, creating numerous explosions, and logging a lot
         of samples, just for the explosion effect. If samples were charged against
         other lower-level routines, we knew that those samples occurred during
         an explosion. If we had simply profiled the whole program, the picture
         would not have been clear, as the lower-level routines would also
         have been used for moving ships, drawing phasors etc. profile() can help
         in the same way when you do execution-count profiling.
       <br>
       <br>
         Sometimes you will see a significant percentage beside a return statement.
         This is usually due to time spent deallocating storage for temporary and
         private variables used within the routine. Significant storage deallocation
         time can also occur when you assign a new value to a large <a href="sequence.htm">sequence</a>.
       <br>
       <br>
         If disk swapping starts to happen, you may see large times attributed to
         statements that need to access the swap file, such as statements
         that access elements of a large swapped-out <a href="sequence.htm">sequence</a>.
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
