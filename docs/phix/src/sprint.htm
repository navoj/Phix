<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">sprint</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
          <a href="string.htm">string</a> s = sprint(<a href="object.htm">object</a> x, <a href="integer.htm">integer</a> maxlen=-1)
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>
            The representation of x as a string of characters is returned.<br>
            This is exactly the same as
          <b>print(fn, x[, maxlen])</b>, except that the output
            is returned as a <a href="string.htm">string</a>, rather than being sent to a file or device. <br>
            x can be any phix <a href="object.htm">object</a>.
          <br>
          <br>
            The optional second parameter indicates the maximum desired length in characters of the returned result. <br>
            Anything beyond this is indicated by a trailing "..", potentially in addition to the specified length.<br>
            See the Technicalia drop-down below for more details.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Comments:</b>
         </td>
         <td>
            The atoms contained within x will be displayed to a maximum of 10 significant digits, just as with print().
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Example 1:</b>
         </td>
         <td>
<!--eucode>
s = sprint(12345)   -- s is "12345"
</eucode-->
<pre>
<font color="#000000">s</font><font color="#0000FF"> =</font><font color="#5E005E"> sprint</font><font color="#0000FF">(</font><font color="#000000">12345</font><font color="#0000FF">)  </font><font color="#000080"><i> -- s is "12345"</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Example 2:</b>
         </td>
         <td>
<!--eucode>
s = sprint({1,2.5,"hello",{4,5.5}})
-- s is "{1,2.5,\"hello\",{4,5.5}}"
</eucode-->
<pre>
<font color="#000000">s</font><font color="#0000FF"> =</font><font color="#5E005E"> sprint</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">2.5</font><font color="#0000FF">,</font><font color="#008000">"hello"</font><font color="#0000FF">,</font><font color="#800080">{</font><font color="#000000">4</font><font color="#0000FF">,</font><font color="#000000">5.5</font><font color="#800080">}</font><font color="#800000">}</font><font color="#0000FF">)
</font><font color="#000080"><i>-- s is "{1,2.5,\"hello\",{4,5.5}}"</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Example 3:</b>
         </td>
         <td>
<!--eucode>
s = sprint("hello")
-- s is "\"hello\""
</eucode-->
<pre>
<font color="#000000">s</font><font color="#0000FF"> =</font><font color="#5E005E"> sprint</font><font color="#0000FF">(</font><font color="#008000">"hello"</font><font color="#0000FF">)
</font><font color="#000080"><i>-- s is "\"hello\""</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Implementation:</b>
         </td>
         <td>
            See builtins\VM\psprintN.e (an autoinclude) for details of the actual implementation.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="print.htm">print</a>,
          <a href="sprintf.htm">sprintf</a>,
          <a href="value.htm">value</a>,
          <a href="get.htm">get</a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td valign=top>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            For reasons of simplicity, the desired length, if specified, may be
            exceeded by a few characters, especially when a very small value is
            passed (eg sprint(12345,1) yields 12345, a length of 5), or when it
            adds quotes, braces and trailing double dots. It is obviously simpler 
            to leave a small margin rather than try and post-process the results,
            or of course write a small loop that re-invokes sprint with decreasing
            length until the result passes muster.
            <br>
            <br>
            There is in fact a third parameter, nest, which is intended only for 
            internal use to signify recursive calls, and controls whether or not
            ".." should be appended when the length exceeds maxlen (if specified).
<!--            and also whether strings should be quoted.-->
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
