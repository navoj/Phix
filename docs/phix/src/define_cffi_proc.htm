<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">define_cffi_proc</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
          include cffi.e<br>
          <a href="integer.htm">integer</a> id = define_cffi_proc(<a href="object.htm">object</a> lib,
                                                                  <a href="string.htm">string</a> cdef,
                                                                  <a href="integer.htm">integer</a> machine=machine_bits())<br>
          <small><i>(note: this is a text-based wrapper of <a href="define_c_proc.htm">define_c_proc</a>)</i></a></small>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>
            parse a string containing a C void function definition and obtain a routine id.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Comments:</b>
         </td>
         <td>
            Converts a textual C void function definition, such as one copied directly from MSDN, to the parameters expected by <a href="define_c_proc.htm">define_c_proc</a>(), 
            and returns the routine_id obtained by calling that function. In other words <code>define_cffi_proc("... HWND ...")</code> is equivalent to, and in fact maps to 
            <code>define_c_proc(...{.. C_PTR ..}...)</code>, with most of the previously manual conversion automated for you.<br>
            a proc is expected to begin with a "void" return type.<br>
            lib can be a string or the previous result of open_dll.<br>
            The machine parameter can be set to 32 or 64, for testing purposes.<br>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
include cffi.e
constant tSleep="""
VOID WINAPI Sleep(
  _In_  DWORD dwMilliseconds
);
"""
constant xSleep = define_cffi_proc("kernel32.dll",tSleep)
c_proc(xSleep,{500})
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">include</font><font color="#000000"> cffi.e
</font><font color="#008080">constant</font><font color="#000000"> tSleep</font><font color="#0000FF">=</font><font color="#008000">"""
VOID WINAPI Sleep(
  _In_  DWORD dwMilliseconds
);
"""
</font><font color="#008080">constant</font><font color="#000000"> xSleep</font><font color="#0000FF"> =</font><font color="#5E005E"> define_cffi_proc</font><font color="#0000FF">(</font><font color="#008000">"kernel32.dll"</font><font color="#0000FF">,</font><font color="#000000">tSleep</font><font color="#0000FF">)
</font><font color="#5E005E">c_proc</font><font color="#0000FF">(</font><font color="#000000">xSleep</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">500</font><font color="#800000">}</font><font color="#0000FF">)</font>
</pre>
            <br>
            set_unicode() is needed before any auto "A/W" handling.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="define_c_proc.htm">define_c_proc</a>,
          <a href="c_proc.htm">c_proc</a>,
          <a href="set_unicode.htm">set_unicode</a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td valign=top>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            <a href="define_c_proc.htm">define_c_proc</a> is rather carefree regarding type: if something is a 4 byte dword (or an 8 byte qword), 
            it does not care whether it is signed, a BOOL, an INT, a PTR, etc.
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
