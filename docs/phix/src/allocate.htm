<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">allocate</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
         <a href="atom.htm">atom</a> a = allocate(<a href="integer.htm">integer</a> i, <a href="integer.htm#bool">bool</a> cleanup=false)
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>Allocate i contiguous bytes of memory. Return the address of the block of memory, or return 0 if the memory cannot be allocated.
             The address returned will be at least 4-byte aligned.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Comments:</b>
         </td>
         <td>If the optional cleanup flag is non-zero, the memory will be automatically released once it is no longer required, otherwise the 
            application should invoke <code><a href="free.htm">free</a>()</code> manually.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
buffer = allocate(100)
-- (mem_set(buffer,0,100) could be used instead of the following)
for i=0 to 99 do
    poke(buffer+i, 0)
end for
</eucode-->
<pre>
<font color="#000000">buffer</font><font color="#0000FF"> =</font><font color="#7060A8"> allocate</font><font color="#0000FF">(</font><font color="#000000">100</font><font color="#0000FF">)
</font><font color="#000080"><i>-- (mem_set(buffer,0,100) could be used instead of the following)
</i></font><font color="#008080">for</font><font color="#000000"> i</font><font color="#0000FF">=</font><font color="#000000">0</font><font color="#008080"> to</font><font color="#000000"> 99</font><font color="#008080"> do
</font><font color="#7060A8">    poke</font><font color="#0000FF">(</font><font color="#000000">buffer</font><font color="#0000FF">+</font><font color="#000000">i</font><font color="#0000FF">,</font><font color="#000000"> 0</font><font color="#0000FF">)
</font><font color="#008080">end for</font>
</pre>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="free.htm">free</a>,
          <a href="mem_set.htm">mem_set</a>,
          <a href="peek.htm">peek</a>,
          <a href="poke.htm">poke</a>,
          <a href="call.htm">call</a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td valign=top>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
          OpenEuphoria allows say allocate(107.5) and provisions 107 or 108 bytes as it sees fit, whereas in phix the programmer is forced to explicitly 
          round non-integers in the required direction before invoking allocate(). Technically the first parameter is an atom, to allow values above 
          #3FFFFFFF (on 32-bit, though a hard limit of #5FFFFFF8 applies, whereas 63-bit integers will exceed available hardware for decades yet), but it 
          is explicitly checked to be an exact and non-negative integer (see builtins\pAlloc.e for details).
          <br>
          <br>
          Certain algorithms are simplified by permitting allocate(0). However the application had better not try and use that memory, and unless the flag
          for automatically doing so has been used it still has to remember to free() it. In practice, allocate(0) will yield 12 or 20 bytes of useable
          memory on 32/64 bit systems respectively, not that I recommend relying on that.
          <br>
          <br>
          A minor point is that technically allocate() on 32-bit yields an unsigned address whereas on 64-bit it is treated as signed, though that is only 
          likely to have any effect should there be some strange OS-level address mapping going on.
          <br>
          <br>
          As explained in builtins\VM\pHeap.e, 32-bit phix deliberately limits allocations to 1,610,612,728 bytes (8 bytes shy of #60000000) whereas in 
          tests 32-bit OpenEuphoria managed 1,873,463,796 (#6FAAC9F4) bytes; it is assumed this will not be an issue for any sensibly-written application.
          In any case, the ability of 32-bit phix to construct (hll) strings up to 1,610,612,711 characters compared to the 32-bit OpenEuphoria (hll) 
          <a href="sequence.htm">sequence</a> limit of 468,365,949 elements(/characters) is considered to be completely exhonorating here.
          Similar limits are theoretically present in 64-bit versions but significantly in excess of any machine that could physically be constructed.
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
