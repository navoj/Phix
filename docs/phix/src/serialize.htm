<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">serialize</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
          include builtins\serialize.e
          <br>
          <br>
          <a href="sequence.htm">sequence</a> s = serialize(<a href="object.htm">object</a> x)
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>
            Converts any Phix object to a serialized (flat series of bytes) version of it.
            <br>
            <br>
            x: any valid object (integer, floating point, string, or [nested] sequence).
            <br>
            <br>
            Returns: the serialized version of x.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Comments:</b>
         </td>
         <td>
            A serialized object is one that has been converted to a set of byte values.
            <br>
            <br>
            This can then be written directly out to a file for storage, or poked into shared memory, etc.
            <br>
            <br>
            You can use the <a href="deserialize.htm">deserialize</a> function to convert it back into a standard phix object.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Example 1:</b>
         </td>
         <td>
<!--eucode>
integer fh = open("cust.dat", "wb")
puts(fh, serialize(FirstName))
puts(fh, serialize(LastName))
puts(fh, serialize(PhoneNumber))
puts(fh, serialize(Address))
close(fh)

fh = open("cust.dat", "rb")
FirstName = deserialize(fh)
LastName = deserialize(fh)
PhoneNumber = deserialize(fh)
Address = deserialize(fh)
close(fh)
</eucode-->
<pre>
<font color="#000000"></font><font color="#004080">integer</font><font color="#000000"> fh</font><font color="#0000FF"> =</font><font color="#7060A8"> open</font><font color="#0000FF">(</font><font color="#008000">"cust.dat"</font><font color="#0000FF">,</font><font color="#008000"> "wb"</font><font color="#0000FF">)
</font><font color="#7060A8">puts</font><font color="#0000FF">(</font><font color="#000000">fh</font><font color="#0000FF">,</font><font color="#5E005E"> serialize</font><font color="#800000">(</font><font color="#000000">FirstName</font><font color="#800000">)</font><font color="#0000FF">)
</font><font color="#7060A8">puts</font><font color="#0000FF">(</font><font color="#000000">fh</font><font color="#0000FF">,</font><font color="#5E005E"> serialize</font><font color="#800000">(</font><font color="#000000">LastName</font><font color="#800000">)</font><font color="#0000FF">)
</font><font color="#7060A8">puts</font><font color="#0000FF">(</font><font color="#000000">fh</font><font color="#0000FF">,</font><font color="#5E005E"> serialize</font><font color="#800000">(</font><font color="#000000">PhoneNumber</font><font color="#800000">)</font><font color="#0000FF">)
</font><font color="#7060A8">puts</font><font color="#0000FF">(</font><font color="#000000">fh</font><font color="#0000FF">,</font><font color="#5E005E"> serialize</font><font color="#800000">(</font><font color="#000000">Address</font><font color="#800000">)</font><font color="#0000FF">)
</font><font color="#7060A8">close</font><font color="#0000FF">(</font><font color="#000000">fh</font><font color="#0000FF">)

</font><font color="#000000">fh</font><font color="#0000FF"> =</font><font color="#7060A8"> open</font><font color="#0000FF">(</font><font color="#008000">"cust.dat"</font><font color="#0000FF">,</font><font color="#008000"> "rb"</font><font color="#0000FF">)
</font><font color="#000000">FirstName</font><font color="#0000FF"> =</font><font color="#5E005E"> deserialize</font><font color="#0000FF">(</font><font color="#000000">fh</font><font color="#0000FF">)
</font><font color="#000000">LastName</font><font color="#0000FF"> =</font><font color="#5E005E"> deserialize</font><font color="#0000FF">(</font><font color="#000000">fh</font><font color="#0000FF">)
</font><font color="#000000">PhoneNumber</font><font color="#0000FF"> =</font><font color="#5E005E"> deserialize</font><font color="#0000FF">(</font><font color="#000000">fh</font><font color="#0000FF">)
</font><font color="#000000">Address</font><font color="#0000FF"> =</font><font color="#5E005E"> deserialize</font><font color="#0000FF">(</font><font color="#000000">fh</font><font color="#0000FF">)
</font><font color="#7060A8">close</font><font color="#0000FF">(</font><font color="#000000">fh</font><font color="#0000FF">)</font>
</pre>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Example 2:</b>
         </td>
         <td>
<!--eucode>
integer fh
fh = open("cust.dat", "wb")
puts(fh, serialize({FirstName,LastName,PhoneNumber,Address}))
close(fh)

fh = open("cust.dat", "rb")
{FirstName,LastName,PhoneNumber,Address} = deserialize(fh)
close(fh)
</eucode-->
<pre>
<font color="#000000"></font><font color="#004080">integer</font><font color="#000000"> fh
fh</font><font color="#0000FF"> =</font><font color="#7060A8"> open</font><font color="#0000FF">(</font><font color="#008000">"cust.dat"</font><font color="#0000FF">,</font><font color="#008000"> "wb"</font><font color="#0000FF">)
</font><font color="#7060A8">puts</font><font color="#0000FF">(</font><font color="#000000">fh</font><font color="#0000FF">,</font><font color="#5E005E"> serialize</font><font color="#800000">(</font><font color="#800080">{</font><font color="#000000">FirstName</font><font color="#0000FF">,</font><font color="#000000">LastName</font><font color="#0000FF">,</font><font color="#000000">PhoneNumber</font><font color="#0000FF">,</font><font color="#000000">Address</font><font color="#800080">}</font><font color="#800000">)</font><font color="#0000FF">)
</font><font color="#7060A8">close</font><font color="#0000FF">(</font><font color="#000000">fh</font><font color="#0000FF">)

</font><font color="#000000">fh</font><font color="#0000FF"> =</font><font color="#7060A8"> open</font><font color="#0000FF">(</font><font color="#008000">"cust.dat"</font><font color="#0000FF">,</font><font color="#008000"> "rb"</font><font color="#0000FF">)
{</font><font color="#000000">FirstName</font><font color="#0000FF">,</font><font color="#000000">LastName</font><font color="#0000FF">,</font><font color="#000000">PhoneNumber</font><font color="#0000FF">,</font><font color="#000000">Address</font><font color="#0000FF">} =</font><font color="#5E005E"> deserialize</font><font color="#0000FF">(</font><font color="#000000">fh</font><font color="#0000FF">)
</font><font color="#7060A8">close</font><font color="#0000FF">(</font><font color="#000000">fh</font><font color="#0000FF">)</font>
</pre>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Example 3:</b>
         </td>
         <td>
<!--eucode>
include builtins\serialize.e
sequence s = serialize({"Pete",{1,0,-1},PI,-PI})
?s      -- {254,4,254,4,89,110,125,110,254,3,10,9,8,253,24,45,
        --  68,84,251,33,9,64,253,24,45,68,84,251,33,9,192}
?deserialize(s) -- {"Pete",{1,0,-1},3.141592654,-3.141592654}
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">include</font><font color="#000000"> builtins\serialize.e
</font><font color="#004080">sequence</font><font color="#000000"> s</font><font color="#0000FF"> =</font><font color="#5E005E"> serialize</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#008000">"Pete"</font><font color="#0000FF">,</font><font color="#800080">{</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">0</font><font color="#0000FF">,-</font><font color="#000000">1</font><font color="#800080">}</font><font color="#0000FF">,</font><font color="#004600">PI</font><font color="#0000FF">,-</font><font color="#004600">PI</font><font color="#800000">}</font><font color="#0000FF">)
?</font><font color="#000000">s     </font><font color="#000080"><i> -- {254,4,254,4,89,110,125,110,254,3,10,9,8,253,24,45,
        --  68,84,251,33,9,64,253,24,45,68,84,251,33,9,192}
</i></font><font color="#0000FF">?</font><font color="#5E005E">deserialize</font><font color="#0000FF">(</font><font color="#000000">s</font><font color="#0000FF">)</font><font color="#000080"><i> -- {"Pete",{1,0,-1},3.141592654,-3.141592654}</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="deserialize.htm">deserialize</a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td valign=top>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            Technically the result is a <a href="html/glossary.htm#dwordseq">dword-sequence</a>, but can be treated as a binary string that only contains 
            integer values in the range 0..255.
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
