<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">pGetPool</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Syntax:</b>
         </td>
         <td>
       <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
        <div class="codeSnippetContainerCodeContainer">
         <div class="codeSnippetToolBar">
          <div class="codeSnippetToolBarText">
           <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_12a63b96-f7ab-4178-936c-8d2496d81946');">Copy</a>
          </div>
         </div>
         <div id="CodeSnippetContainerCode_12a63b96-f7ab-4178-936c-8d2496d81946" class="codeSnippetContainerCode" dir="ltr">
          <div style="color:Black;">
<!--eucode>
#ilASM{ 
    [32]
        mov ecx,<required size in bytes>
        mov edx,<era>
    [64]
        mov rcx,<required size in bytes>
        mov rdx,<era>
    []
        call :%pGetPool
      }
</eucode-->
<pre>
<font color="#000000">#</font><font color="#008080">ilASM</font><font color="#0000FF">{ 
</font><font color="#800000">    [</font><font color="#000000">32</font><font color="#800000">]
</font><font color="#000000">        mov ecx</font><font color="#0000FF">,&lt;</font><font color="#000000">required size in bytes</font><font color="#0000FF">&gt;
</font><font color="#000000">        mov edx</font><font color="#0000FF">,&lt;</font><font color="#000000">era</font><font color="#0000FF">&gt;
</font><font color="#800000">    [</font><font color="#000000">64</font><font color="#800000">]
</font><font color="#000000">        mov rcx</font><font color="#0000FF">,&lt;</font><font color="#000000">required size in bytes</font><font color="#0000FF">&gt;
</font><font color="#000000">        mov rdx</font><font color="#0000FF">,&lt;</font><font color="#000000">era</font><font color="#0000FF">&gt;
</font><font color="#800000">    []
</font><font color="#7060A8">        call</font><font color="#0000FF"> :</font><font color="#000000">%pGetPool
</font><font color="#0000FF">      }</font>
</pre>
          </div>
         </div>
        </div>
       </div>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>
            Internal routine to obtain raw memory, intended for use by the likes of pAllocStr, pAllocSeq, pStoreFlt, pStoreMint, pStack, and pAlloc.
            The latter (the hll <a href="allocate.htm">allocate</a>() function) is in fact just a slim wrapper that remembers the actual size yielded, 
            as needed for pFreePool.
            <br>
            <br>
            The <a href="html/glossary.htm#era">era</a>, or effective return address, is the value which is translated to a line number when reporting a fatal error. 
            Obviously it is much better to report errors on a line such as <code>s[i] = x</code> in preference to a <code>call :%pGetPool</code> in pAllocStr 
            etc, and to complicate matters further, the era should be that of say the call to :%opConcat rather than the call of :%pAllocStr within 
            that function. Any such errors should only occur after a rogue poke, incorrect memory allocation size, or similar. 
            <br>
            <br>
            Can return 0, which should be fatal for everything except <a href="allocate.htm">allocate</a>().
            <br>
            Returned memory contains whatever garbage was already there.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>On return:</b>
         </td>
         <td>
          [32] eax is raw pointer, edx is allocated size, all other registers (except ebx/ebp/esp) trashed
          <br>
          [64] rax is raw pointer, rdx is allocated size, all other registers (except rbx/rbp/rsp) trashed
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Defined in:</b>
         </td>
         <td>builtins\VM\pHeap.e
         </td>
        </tr>
       </table>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
