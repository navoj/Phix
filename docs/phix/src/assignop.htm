<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Assignment with Operator</h1>
      <div id="mainSection">
        Phix also provides some additional forms of the assignment statement.
       <br>
       <br>
        To save typing, and to make your code a bit neater, you can combine
        assignment with one of the operators:
<!--eucode>
         + - / * &
</eucode-->
<pre>
<font color="#000000"></font><font color="#0000FF">         + - / * &amp;</font>
</pre>
       For example, instead of saying:
<!--eucode>
   mylongvarname = mylongvarname + 1
</eucode-->
<pre>
<font color="#000000">   mylongvarname</font><font color="#0000FF"> =</font><font color="#000000"> mylongvarname</font><font color="#0000FF"> +</font><font color="#000000"> 1</font>
</pre>
       You can say:
<!--eucode>
   mylongvarname += 1
</eucode-->
<pre>
<font color="#000000">   mylongvarname</font><font color="#0000FF"> +=</font><font color="#000000"> 1</font>
</pre>
       Instead of saying:
<!--eucode>
   galaxy[q_row][q_col][q_size] = galaxy[q_row][q_col][q_size] * 10
</eucode-->
<pre>
<font color="#000000">   galaxy</font><font color="#0000FF">[</font><font color="#000000">q_row</font><font color="#0000FF">][</font><font color="#000000">q_col</font><font color="#0000FF">][</font><font color="#000000">q_size</font><font color="#0000FF">] =</font><font color="#000000"> galaxy</font><font color="#0000FF">[</font><font color="#000000">q_row</font><font color="#0000FF">][</font><font color="#000000">q_col</font><font color="#0000FF">][</font><font color="#000000">q_size</font><font color="#0000FF">] *</font><font color="#000000"> 10</font>
</pre>
       You can say:
<!--eucode>
   galaxy[q_row][q_col][q_size] *= 10
</eucode-->
<pre>
<font color="#000000">   galaxy</font><font color="#0000FF">[</font><font color="#000000">q_row</font><font color="#0000FF">][</font><font color="#000000">q_col</font><font color="#0000FF">][</font><font color="#000000">q_size</font><font color="#0000FF">] *=</font><font color="#000000"> 10</font>
</pre>
       and instead of saying:
<!--eucode>
   accounts[start..finish] = accounts[start..finish] / 10
</eucode-->
<pre>
<font color="#000000">   accounts</font><font color="#0000FF">[</font><font color="#000000">start</font><font color="#0000FF">..</font><font color="#000000">finish</font><font color="#0000FF">] =</font><font color="#000000"> accounts</font><font color="#0000FF">[</font><font color="#000000">start</font><font color="#0000FF">..</font><font color="#000000">finish</font><font color="#0000FF">] /</font><font color="#000000"> 10</font>
</pre>
       You can say:
<!--eucode>
   accounts[start..finish] /= 10
</eucode-->
<pre>
<font color="#000000">   accounts</font><font color="#0000FF">[</font><font color="#000000">start</font><font color="#0000FF">..</font><font color="#000000">finish</font><font color="#0000FF">] /=</font><font color="#000000"> 10</font>
</pre>
        In general, whenever you have an assignment of the form:
 <pre>
    <b><i>left-hand-side = left-hand-side op expression</i></b>
 </pre>
       You can say:
 <pre>
    <b><i>left-hand-side op= expression</i></b>
 </pre>
      where
        <b>
         <i>op</i>
        </b> is one of:&nbsp;&nbsp;&nbsp;
        <font color="#030303">
         <b>+ &nbsp; - &nbsp; * &nbsp; / &nbsp; &</b>
        </font>
       <br>
       <br>
        When the left-hand-side contains multiple subscripts/slices, the
        <font color="#030303">
         <b>
          <i>op=</i>
         </b>
        </font>
        form will usually execute faster than the longer form. When you get used
        to it, you may find the
        <font color="#030303">
         <b>
          <i>op=</i>
         </b>
        </font>
        form to be slightly more readable than the long form, since you do not
        have to visually compare the left-hand-side against the copy of itself
        on the right side.
       <br>
       <br>
<!--DEV (once coded and tested [if ever] [@+=])
        You can also prefix assignment ops with an '@' symbol to make them explicit
        sequence operations, for example a @+= b is equivalent to a += sq_add(a,b).
       <br>
       <br>
-->
       Note the explicit assignment ':=' operator does
        <b>not</b> have any assignment with operator forms since the latter are 
        already explicit assignment operations anyway.
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
