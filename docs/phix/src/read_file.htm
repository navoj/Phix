<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">read_file</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
         include builtins\read_file.e<br>
         <a href="object.htm">object</a> o = read_file(<a href="object.htm">object</a> file, <a href="integer.htm">integer</a> as_text = BINARY_MODE)
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>Return the contents of a file as a single <a href="string.htm">string</a> (<a href="sequence.htm">sequence</a> of bytes), or -1 if the file cannot be opened.
            <br>
            <br>
            file: an object, either a file path or the handle to an open file.<br>
            as_text: integer, BINARY_MODE (the default) assumes binary mode that causes every byte to be read in, 
                     whereas TEXT_MODE assumes text mode that ensures lines end with just a Ctrl-J (NewLine) character, 
                     with the first byte value of 26 (Ctrl-Z) interpreted as end-of-file.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Comments:</b>
         </td>
         <td>
            When using BINARY_MODE, each byte in the file is returned as an element in the return sequence.<br>
            When not using BINARY_MODE, the file will be interpreted as a text file. This means that all line endings 
            will be transformed to a single 0x0A character and the first 0x1A character (Ctrl-Z) will indicate the end 
            of file (all data after this will not be returned to the caller.)
            <br>
            <br>
            As this is a simple compatibility shim for OpenEuphoria, the constants BINARY_MODE and TEXT_MODE are declared
            in builtins\read_file.e, rather than psym.e, and cannot be used before the include statement.
            <br>
            <br>
            The file parameter can be a string, in which case the file is opened and closed by this
            routine, or an integer from a previous call to <a href="open.htm">open</a>(), in which case
            it is not closed by this routine.
            <br>
            <br>
            If the file cannot be opened, -1 is returned.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Example 1:</b>
         </td>
         <td>
<!--eucode>
data = read_file("my_file.txt")
-- data contains the entire contents of my_file.txt
</eucode-->
<pre>
<font color="#000000">data</font><font color="#0000FF"> =</font><font color="#7060A8"> read_file</font><font color="#0000FF">(</font><font color="#008000">"my_file.txt"</font><font color="#0000FF">)
</font><font color="#000080"><i>-- data contains the entire contents of my_file.txt</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Example 2:</b>
         </td>
         <td>
<!--eucode>
fh = open("my_file.txt", "r")
data = read_file(fh)
close(fh)
-- data contains the entire contents of my_file.txt
</eucode-->
<pre>
<font color="#000000">fh</font><font color="#0000FF"> =</font><font color="#7060A8"> open</font><font color="#0000FF">(</font><font color="#008000">"my_file.txt"</font><font color="#0000FF">,</font><font color="#008000"> "r"</font><font color="#0000FF">)
</font><font color="#000000">data</font><font color="#0000FF"> =</font><font color="#7060A8"> read_file</font><font color="#0000FF">(</font><font color="#000000">fh</font><font color="#0000FF">)
</font><font color="#7060A8">close</font><font color="#0000FF">(</font><font color="#000000">fh</font><font color="#0000FF">)
</font><font color="#000080"><i>-- data contains the entire contents of my_file.txt</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Example 3:</b>
         </td>
         <td>
<!--eucode>
{} = system_exec("dir > lsoutput",4) 
object results = read_file("lsoutput",TEXT_MODE) 
puts(1,results)
</eucode-->
<pre>
<font color="#000000"></font><font color="#0000FF">{} =</font><font color="#5E005E"> system_exec</font><font color="#0000FF">(</font><font color="#008000">"dir &gt; lsoutput"</font><font color="#0000FF">,</font><font color="#000000">4</font><font color="#0000FF">) 
</font><font color="#004080">object</font><font color="#000000"> results</font><font color="#0000FF"> =</font><font color="#7060A8"> read_file</font><font color="#0000FF">(</font><font color="#008000">"lsoutput"</font><font color="#0000FF">,</font><font color="#000000">TEXT_MODE</font><font color="#0000FF">) 
</font><font color="#7060A8">puts</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">results</font><font color="#0000FF">)</font>
</pre>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="read_lines.htm">read_lines</a>,
          <a href="system_exec.htm">system_exec</a>
         </td>
        </tr>
       </table>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
