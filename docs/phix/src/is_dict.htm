<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">is_dict</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
          <a href="integer.htm#bool">bool</a> d = is_dict(<a href="object.htm">object</a> tid)
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>
            A simple function that
          <i>can</i> be used to determine whether something is plausibly a valid dictionary index.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Comments:</b>
         </td>
         <td>
            As noted in
          <a href="usingtypes.htm#can">using types</a> (although this is a function, not a type), you should
            not overly rely on the result of this or other similar functions, although you can always trust it when it says
            definitely not.
          <!--
(if we ever change this to type dictionary, also perhaps a reference in using types?, maybe: 
            There is also a subtle but obvious point regarding user defined types which is excruciating detailed in the 
            documentation of the 
          !a href="dictionary.htm">dictionary!/a> type.
)
          <br>
          <br>
            Further, and fairly obviously,
          <a href="destroy_dict.htm">destroy_dict</a>() changes the validity, so
<!!--eucode>
    dictionary myid = new_dict()
    ...
    destroy_dict(myid)
    dictionary myid2 = myid
</eucode- - ! >

<pre>
<font color="#000000">    dictionary myid</font><font color="#0000FF"> =</font><font color="#5E005E"> new_dict</font><font color="#0000FF">()
    ..</font><font color="#FF0000">.
</font><font color="#5E005E">    destroy_dict</font><font color="#0000FF">(</font><font color="#000000">myid</font><font color="#0000FF">)
</font><font color="#000000">    dictionary myid2</font><font color="#0000FF"> =</font><font color="#000000"> myid</font>
</pre>
            has predictable results: despite assigning a variable declared as dictionary to another variable of the same
            type, a typecheck will still occur, and obviously invoking delete_dict(myid) cannot and should not trigger a 
            typecheck on the existing value already held in myid; any error occurs on assignment to myid2, not before.
-->
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
integer tid = new_dict()
if not is_dict(tid) then ?9/0 end if
</eucode-->
<pre>
<font color="#000000"></font><font color="#004080">integer</font><font color="#000000"> tid</font><font color="#0000FF"> =</font><font color="#5E005E"> new_dict</font><font color="#0000FF">()
</font><font color="#008080">if not</font><font color="#5E005E"> is_dict</font><font color="#0000FF">(</font><font color="#000000">tid</font><font color="#0000FF">)</font><font color="#008080"> then</font><font color="#0000FF"> ?</font><font color="#000000">9</font><font color="#0000FF">/</font><font color="#000000">0</font><font color="#008080"> end if</font>
</pre>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="new_dict.htm">new_dict</a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td valign=top>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            In truth, I would prefer "global type dictionary", but "forward type" has not yet been implemented/tested, and
            the equivalent would be needed in psym.e to replace the existing initialAutoEntry("is_dict",S_Func,..) entry.
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
