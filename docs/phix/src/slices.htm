<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Slices</h1>
      <div id="mainSection">
         A sequence of consecutive elements may be selected by giving the starting and
         ending element numbers. For example:
       <br>
<!--eucode>
        y = {"fred", "george", "mary"}
        y = y[1..2]                     -- y is now {"fred", "george"}.
        x = {1,1,2,2,2,1,1,1}
        y = x[3..5]             -- y is now {2,2,2}
        y = x[3..3]             -- y is now {2}
        y = x[3..2]             -- y is now {}
</eucode-->
<pre>
<font color="#000000">        y</font><font color="#0000FF"> = {</font><font color="#008000">"fred"</font><font color="#0000FF">,</font><font color="#008000"> "george"</font><font color="#0000FF">,</font><font color="#008000"> "mary"</font><font color="#0000FF">}
</font><font color="#000000">        y</font><font color="#0000FF"> =</font><font color="#000000"> y</font><font color="#0000FF">[</font><font color="#000000">1</font><font color="#0000FF">..</font><font color="#000000">2</font><font color="#0000FF">]                    </font><font color="#000080"><i> -- y is now {"fred", "george"}.
</i></font><font color="#000000">        x</font><font color="#0000FF"> = {</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">2</font><font color="#0000FF">,</font><font color="#000000">2</font><font color="#0000FF">,</font><font color="#000000">2</font><font color="#0000FF">,</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">1</font><font color="#0000FF">}
</font><font color="#000000">        y</font><font color="#0000FF"> =</font><font color="#000000"> x</font><font color="#0000FF">[</font><font color="#000000">3</font><font color="#0000FF">..</font><font color="#000000">5</font><font color="#0000FF">]            </font><font color="#000080"><i> -- y is now {2,2,2}
</i></font><font color="#000000">        y</font><font color="#0000FF"> =</font><font color="#000000"> x</font><font color="#0000FF">[</font><font color="#000000">3</font><font color="#0000FF">..</font><font color="#000000">3</font><font color="#0000FF">]            </font><font color="#000080"><i> -- y is now {2}
</i></font><font color="#000000">        y</font><font color="#0000FF"> =</font><font color="#000000"> x</font><font color="#0000FF">[</font><font color="#000000">3</font><font color="#0000FF">..</font><font color="#000000">2</font><font color="#0000FF">]            </font><font color="#000080"><i> -- y is now {}</i></font>
</pre>
        The last line evaluates to the length-0 sequence {}.
       <br>
       <br>
         We can also use slices for overwriting portions of variables.
       <br>
<!--eucode>
        x = {1,1,2,2,2,1,1,1}
        x[3..5] = {9,9,9}       -- x is now {1,1,9,9,9,1,1,1}
        x[3..5] = 8             -- x is now {1,1,8,8,8,1,1,1}
        y = {0, "Phix", 1, 1}
        z = y[2][2..3]          -- z is now "hi"
        y[2][2..4]="ete"        -- y is now {0,"Pete",1,1}
</eucode-->
<pre>
<font color="#000000">        x</font><font color="#0000FF"> = {</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">2</font><font color="#0000FF">,</font><font color="#000000">2</font><font color="#0000FF">,</font><font color="#000000">2</font><font color="#0000FF">,</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">1</font><font color="#0000FF">}
</font><font color="#000000">        x</font><font color="#0000FF">[</font><font color="#000000">3</font><font color="#0000FF">..</font><font color="#000000">5</font><font color="#0000FF">] = {</font><font color="#000000">9</font><font color="#0000FF">,</font><font color="#000000">9</font><font color="#0000FF">,</font><font color="#000000">9</font><font color="#0000FF">}      </font><font color="#000080"><i> -- x is now {1,1,9,9,9,1,1,1}
</i></font><font color="#000000">        x</font><font color="#0000FF">[</font><font color="#000000">3</font><font color="#0000FF">..</font><font color="#000000">5</font><font color="#0000FF">] =</font><font color="#000000"> 8            </font><font color="#000080"><i> -- x is now {1,1,8,8,8,1,1,1}
</i></font><font color="#000000">        y</font><font color="#0000FF"> = {</font><font color="#000000">0</font><font color="#0000FF">,</font><font color="#008000"> "Phix"</font><font color="#0000FF">,</font><font color="#000000"> 1</font><font color="#0000FF">,</font><font color="#000000"> 1</font><font color="#0000FF">}
</font><font color="#000000">        z</font><font color="#0000FF"> =</font><font color="#000000"> y</font><font color="#0000FF">[</font><font color="#000000">2</font><font color="#0000FF">][</font><font color="#000000">2</font><font color="#0000FF">..</font><font color="#000000">3</font><font color="#0000FF">]         </font><font color="#000080"><i> -- z is now "hi"
</i></font><font color="#000000">        y</font><font color="#0000FF">[</font><font color="#000000">2</font><font color="#0000FF">][</font><font color="#000000">2</font><font color="#0000FF">..</font><font color="#000000">4</font><font color="#0000FF">]=</font><font color="#008000">"ete"       </font><font color="#000080"><i> -- y is now {0,"Pete",1,1}</i></font>
</pre>
         In general, a variable name can be followed by 0 or more subscripts,
         optionally followed by at most 1 slice. A slice operation cannot be
         followed by any further subcripting or slicing (though if absolutely
         necessary, you can force the issue by adding extra parenthesis).
       <br>
       <br>
         We need to be a bit more precise in defining the rules for
         <b>empty slices</b>. Consider a slice s[i..j]
         where s is of length n. A slice from i to j, where j = i-1 and i &gt;= 1
         produces the
        <a href="Strings.htm#empty_seq">empty sequence</a>, even if
         i = n+1. Thus 1..0 and n+1..n and everything in between are legal
        <b>(empty) slices</b>.
         Empty slices are quite useful in many algorithms. A slice from i to j where
         j &lt; i-1 is illegal, i.e. "reverse" slices such as s[5..3] are not allowed.
       <br>
       <br>
        It is also perfectly legal to use negative indexes for the start and end of a 
        slice, though it is left as an exercise for the reader to determine what is and
        what is not a valid empty slice should you mix positive and negative start and
        end points, however I will mention that it is, perhaps surprisingly, perfectly 
        legal to use s[0..-1] with the same meaning as s[length(s)+1..length(s)], both
        of course being "" or {}, and similarly s[-length(s)..-length(s)-1] is exactly
        the same as s[1..0]. A much better example of a proper (all-negative) slice is:
       <br>
<!--eucode>
        filename = "filename.txt"
        extension = filename[-4..-1]        -- extension is now ".txt"
</eucode-->
<pre>
<font color="#000000">        filename</font><font color="#0000FF"> =</font><font color="#008000"> "filename.txt"
</font><font color="#000000">        extension</font><font color="#0000FF"> =</font><font color="#000000"> filename</font><font color="#0000FF">[-</font><font color="#000000">4</font><font color="#0000FF">..-</font><font color="#000000">1</font><font color="#0000FF">]       </font><font color="#000080"><i> -- extension is now ".txt"</i></font>
</pre>
        The $ shorthand and <code>to</code> keyword can also be used in slices, for example:
<!--eucode>
        filename = "filename.txt"
        k = find('.',filename)
        extension = filename[k+1..$]        -- extension is now "txt"
        extension = filename[k+1 to $]      -- (same as above, if you prefer it)
        filename = filename[1..k-1]         -- filename is now "filename"
</eucode-->
<pre>
<font color="#000000">        filename</font><font color="#0000FF"> =</font><font color="#008000"> "filename.txt"
</font><font color="#000000">        k</font><font color="#0000FF"> =</font><font color="#7060A8"> find</font><font color="#0000FF">(</font><font color="#008000">'.'</font><font color="#0000FF">,</font><font color="#000000">filename</font><font color="#0000FF">)
</font><font color="#000000">        extension</font><font color="#0000FF"> =</font><font color="#000000"> filename</font><font color="#0000FF">[</font><font color="#000000">k</font><font color="#0000FF">+</font><font color="#000000">1</font><font color="#0000FF">..</font><font color="#000000">$</font><font color="#0000FF">]       </font><font color="#000080"><i> -- extension is now "txt"
</i></font><font color="#000000">        extension</font><font color="#0000FF"> =</font><font color="#000000"> filename</font><font color="#0000FF">[</font><font color="#000000">k</font><font color="#0000FF">+</font><font color="#000000">1</font><font color="#008080"> to</font><font color="#000000"> $</font><font color="#0000FF">]     </font><font color="#000080"><i> -- (same as above, if you prefer it)
</i></font><font color="#000000">        filename</font><font color="#0000FF"> =</font><font color="#000000"> filename</font><font color="#0000FF">[</font><font color="#000000">1</font><font color="#0000FF">..</font><font color="#000000">k</font><font color="#0000FF">-</font><font color="#000000">1</font><font color="#0000FF">]        </font><font color="#000080"><i> -- filename is now "filename"</i></font>
</pre>
        If you replace a slice with an atom, it replaces each element, for example:
       <br>
<!--eucode>
        s = "food"
        s[2..3] = 'e'       -- s is now "feed"
</eucode-->
<pre>
<font color="#000000">        s</font><font color="#0000FF"> =</font><font color="#008000"> "food"
</font><font color="#000000">        s</font><font color="#0000FF">[</font><font color="#000000">2</font><font color="#0000FF">..</font><font color="#000000">3</font><font color="#0000FF">] =</font><font color="#008000"> 'e'      </font><font color="#000080"><i> -- s is now "feed"</i></font>
</pre>
        Phix also allows variable length slice substitution, for example:
       <br>
<!--eucode>
        s = "food"
        s[2..3] = "e"       -- s is now "fed" (contrast with the previous example)
        s[2..1] = "ill"     -- s is now "filled" 
</eucode-->
<pre>
<font color="#000000">        s</font><font color="#0000FF"> =</font><font color="#008000"> "food"
</font><font color="#000000">        s</font><font color="#0000FF">[</font><font color="#000000">2</font><font color="#0000FF">..</font><font color="#000000">3</font><font color="#0000FF">] =</font><font color="#008000"> "e"      </font><font color="#000080"><i> -- s is now "fed" (contrast with the previous example)
</i></font><font color="#000000">        s</font><font color="#0000FF">[</font><font color="#000000">2</font><font color="#0000FF">..</font><font color="#000000">1</font><font color="#0000FF">] =</font><font color="#008000"> "ill"    </font><font color="#000080"><i> -- s is now "filled" </i></font>
</pre>
        Note that performing thousands of such length-altering substitutions on a very long string/sequence can often be performed 
        much faster by chopping it up into thousands of pieces and reassembling everything once at the end. (See the library
        routine <a href="substitute.htm">substitute</a>() and its implementation in builtins\substitute.e) It should be obvious 
        that moving the last element and many things before it, each thousands of times, is inevitably going to be exponentially 
        slower than moving them just twice. However for a single substitution (or thousands of non-length-altering substitutions) 
        the obvious neat one-liner is also the fastest possible method.
       <br>
       <br>
        Compatibility Note: variable length slice substitution is not supported by RDS Eu or OpenEuphoria, which must use say 
        <code>s = s[1..1]&"e"&s[4..4]</code>, as explained next.
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
