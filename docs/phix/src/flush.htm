<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">flush</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
         flush(<a href="integer.htm">integer</a> fn)
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>When you write data to a file, phix normally stores the data
            in a memory buffer until a large enough chunk of data has accumulated. 
            This large chunk can then be written to disk very efficiently. 
            Sometimes you may want to force, or flush, all data out immediately, 
            even if the memory buffer is not full. To do this you can invoke flush(fn),
            where fn is the file number of a file open for writing or appending.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Comments:</b>
         </td>
         <td>
            When a file is closed, all buffered data is automatically flushed out. 
            There is absolutely no need to invoke flush() before invoking close().
            When a program terminates, all open files are flushed and closed 
            automatically.
          <br>
          <br>
            Use flush() when another process may need to see all of the data written 
            so far, but you are not ready to close the file yet.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
f = open("logfile", "w")
puts(f, "Record#1\n")
puts(1, "Press Enter when ready\n")
flush(f)  -- This forces "Record #1" into "logfile" on disk.
          -- Without this, "logfile" will appear to have 
          -- 0 characters when we stop for keyboard input.
s = gets(0) -- wait for keyboard input
</eucode-->
<pre>
<font color="#000000">f</font><font color="#0000FF"> =</font><font color="#7060A8"> open</font><font color="#0000FF">(</font><font color="#008000">"logfile"</font><font color="#0000FF">,</font><font color="#008000"> "w"</font><font color="#0000FF">)
</font><font color="#7060A8">puts</font><font color="#0000FF">(</font><font color="#000000">f</font><font color="#0000FF">,</font><font color="#008000"> "Record#1\n"</font><font color="#0000FF">)
</font><font color="#7060A8">puts</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#008000"> "Press Enter when ready\n"</font><font color="#0000FF">)
</font><font color="#7060A8">flush</font><font color="#0000FF">(</font><font color="#000000">f</font><font color="#0000FF">) </font><font color="#000080"><i> -- This forces "Record #1" into "logfile" on disk.
          -- Without this, "logfile" will appear to have 
          -- 0 characters when we stop for keyboard input.
</i></font><font color="#000000">s</font><font color="#0000FF"> =</font><font color="#7060A8"> gets</font><font color="#0000FF">(</font><font color="#000000">0</font><font color="#0000FF">)</font><font color="#000080"><i> -- wait for keyboard input</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Implementation:</b>
         </td>
         <td>
              via :%opFlush / fflush() in builtins\VM\pfileioN.e (an autoinclude) - be warned however it is low-level complicated stuff that you do not need to know.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="close.htm">close</a>,
          <a href="lock_file.htm">lock_file</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
