<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Timers</h1>
      <div id="mainSection">
        <br>
            A Timer can be used to generate a periodic event. You could use this to
            implement a background save capability or to issue time-out
            warnings or maybe just to build your own custom digital clock. To
            create a timer use this code:
        <br>
        <br>
        <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
         <div class="codeSnippetContainerCodeContainer">
          <div class="codeSnippetToolBar">
           <div class="codeSnippetToolBarText">
            <a id="copytext" href="javascript:CopyToClipboard('ohgod-c3ab-4175-936c-8d2195c81946');">Copy</a>
           </div>
          </div>
          <div id="ohgod-c3ab-4175-936c-8d2195c81946" class="codeSnippetContainerCode" dir="ltr">
           <div style="color:Black;">
<!--eucode>
constant TIMER = createTimer() -- TIMER is now the ID of the new timer
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">constant</font><font color="#000000"> TIMER</font><font color="#0000FF"> =</font><font color="#000000"> createTimer</font><font color="#0000FF">()</font><font color="#000080"> -- TIMER is now the ID of the new timer</font>
</pre>
           </div>
          </div>
         </div>
        </div>
            To start a timer operating use:
        <br>
        <br>
        <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
         <div class="codeSnippetContainerCodeContainer">
          <div class="codeSnippetToolBar">
           <div class="codeSnippetToolBarText">
            <a id="copytext" href="javascript:CopyToClipboard('tedium-c3ab-4175-936c-8d2195c81946');">Copy</a>
           </div>
          </div>
          <div id="tedium-c3ab-4175-936c-8d2195c81946" class="codeSnippetContainerCode" dir="ltr">
           <div style="color:Black;">
<!--eucode>
    startTimer(TimerID, OwnerID, n)
    -- TimerID is the ID of the timer
    -- OwnerID is the ID of the window that WM_TIMER messages will be sent to
    -- n is the number of milliseconds between each timer event.
</eucode-->
<pre>
<font color="#000000">    startTimer</font><font color="#0000FF">(</font><font color="#000000">TimerID</font><font color="#0000FF">,</font><font color="#000000"> OwnerID</font><font color="#0000FF">,</font><font color="#000000"> n</font><font color="#0000FF">)
</font><font color="#000080">    -- TimerID is the ID of the timer
    -- OwnerID is the ID of the window that WM_TIMER messages will be sent to
    -- n is the number of milliseconds between each timer event.</font>
</pre>
           </div>
          </div>
         </div>
        </div>
            To stop a timer use:
        <br>
        <br>
        <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
         <div class="codeSnippetContainerCodeContainer">
          <div class="codeSnippetToolBar">
           <div class="codeSnippetToolBarText">
            <a id="copytext" href="javascript:CopyToClipboard('orange5-c3ab-4175-936c-8d2195c81946');">Copy</a>
           </div>
          </div>
          <div id="orange5-c3ab-4175-936c-8d2195c81946" class="codeSnippetContainerCode" dir="ltr">
           <div style="color:Black;">
<!--eucode>
stopTimer(TimerID)
</eucode-->
<pre>
<font color="#000000">stopTimer</font><font color="#0000FF">(</font><font color="#000000">TimerID</font><font color="#0000FF">)</font>
</pre>
           </div>
          </div>
         </div>
        </div>
            Later on you can restart the timer by invoking startTimer() again
            and you can use a different timing value or destination window if
            you wish. The timing events are sent to the associated window's
            handler as a WM_TIMER message.
        <br>
            Please note that if any WM_TIMER messages are still in the
            message queue at the time that stopTimer() is invoked then those
            queued messages will still be sent to the handler. Because of
            program latency timing messages will never be accurate. Also, the
            user will not be able to time very fine events because of the
            Windows-pegged event resolution. Additionally, Windows only
            releases WM_TIMER messages when the message queue buffer is
            otherwise empty so a very &quot;busy&quot; window may miss some
            timer events when a fresh timer rollover occurs but the previous
            timer event is still in the message queue. I don't know how many
            timers are allowed to exist at any one time but I think the fewer
            there are the better.
        <br>
       <p></p>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
