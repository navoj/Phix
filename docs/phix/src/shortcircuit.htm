<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Short-Circuit Evaluation</h1>
      <div id="mainSection">
        In phix, all conditional expressions containing
        <font color="#030303">
         <b>and</b>
        </font> or
        <font color="#030303">
         <b>or</b>
        </font> operators use 
        <font color="#030303">
         <b>
          <i>short-circuit</i>
         </b>
        </font> evaluation. For example,
<!--eucode>
    if a<0 and b>0 then ...
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">    if</font><font color="#000000"> a</font><font color="#0000FF">&lt;</font><font color="#000000">0</font><font color="#008080"> and</font><font color="#000000"> b</font><font color="#0000FF">&gt;</font><font color="#000000">0</font><font color="#008080"> then</font><font color="#0000FF"> ...</font>
</pre>
       If a&lt;0 is <b>false</b>, then phix does not bother to test whether b is greater than 0. 
        It immediately assumes that the overall result is <b>false</b>. Similarly,
<!--eucode>
    if a<0 or b>0 then ...
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">    if</font><font color="#000000"> a</font><font color="#0000FF">&lt;</font><font color="#000000">0</font><font color="#008080"> or</font><font color="#000000"> b</font><font color="#0000FF">&gt;</font><font color="#000000">0</font><font color="#008080"> then</font><font color="#0000FF"> ...</font>
</pre>
        if a&lt;0 is <b>true</b>, then phix immediately decides that the overall result is <b>true</b>, without testing the value of b.
       <br>
       <br>
         In general, whenever we have a condition of the form:
<!--eucode>
    A and B
</eucode-->
<pre>
<font color="#000000">    A</font><font color="#008080"> and</font><font color="#000000"> B</font>
</pre>
        where A and B can be any two expressions, phix takes a short-cut when A is false and immediately
        makes the overall result false, without even looking at expression B.
       <br>
       <br>
         Similarly, with:
<!--eucode>
    A or B
</eucode-->
<pre>
<font color="#000000">    A</font><font color="#008080"> or</font><font color="#000000"> B</font>
</pre>
        when A is true, phix skips the evaluation of expression B, and declares the result to be true.
       <br>
       <br>
        The expression B could contain something that would normally cause a run-time error. 
        If phix skips the evaluation of B, then obviously that error does not occur. For instance:
<!--eucode>
    if x!=0 and 1/x>10 then                 -- divide by zero error avoided
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">    if</font><font color="#000000"> x</font><font color="#0000FF">!=</font><font color="#000000">0</font><font color="#008080"> and</font><font color="#000000"> 1</font><font color="#0000FF">/</font><font color="#000000">x</font><font color="#0000FF">&gt;</font><font color="#000000">10</font><font color="#008080"> then                </font><font color="#000080"><i> -- divide by zero error avoided</i></font>
</pre>
       B could even contain uninitialized variables, out-of-bounds subscripts etc.
       <br>
       <br>
        This may look like sloppy coding, but in fact it often allows you to
        write something in a simpler and more readable way. For instance:
<!--eucode>
    if atom(x) or length(x)=1 then
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">    if</font><font color="#004080"> atom</font><font color="#0000FF">(</font><font color="#000000">x</font><font color="#0000FF">)</font><font color="#008080"> or</font><font color="#7060A8"> length</font><font color="#0000FF">(</font><font color="#000000">x</font><font color="#0000FF">)=</font><font color="#000000">1</font><font color="#008080"> then</font>
</pre>
        Without short-circuiting, you would have a problem when x was an atom,
        since length is not defined for atoms. With short-circuiting, length(x)
        will only be checked when x is a sequence. Similarly:
<!--eucode>
    -- find 'a' or 'A' in s
    i = 1
    while i<=length(s) and s[i]!='a' and s[i]!='A' do
         i += 1
    end while
</eucode-->
<pre>
<font color="#000000"></font><font color="#000080"><i>    -- find 'a' or 'A' in s
</i></font><font color="#000000">    i</font><font color="#0000FF"> =</font><font color="#000000"> 1
</font><font color="#008080">    while</font><font color="#000000"> i</font><font color="#0000FF">&lt;=</font><font color="#7060A8">length</font><font color="#0000FF">(</font><font color="#000000">s</font><font color="#0000FF">)</font><font color="#008080"> and</font><font color="#000000"> s</font><font color="#0000FF">[</font><font color="#000000">i</font><font color="#0000FF">]!=</font><font color="#008000">'a'</font><font color="#008080"> and</font><font color="#000000"> s</font><font color="#0000FF">[</font><font color="#000000">i</font><font color="#0000FF">]!=</font><font color="#008000">'A'</font><font color="#008080"> do
</font><font color="#000000">         i</font><font color="#0000FF"> +=</font><font color="#000000"> 1
</font><font color="#008080">    end while</font>
</pre>
        In this loop the variable i might eventually become (or initially be)
        greater than length(s). Without short-circuit evaluation, a subscript
        out-of-bounds error would occur when s[i] is evaluated on the final
        iteration. With short-circuiting, the loop terminates immediately when
        i&lt;=length(s) becomes false. Phix will not evaluate s[i]!='a'
        and will not evaluate s[i]!='A'. No subscript error will occur.
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
