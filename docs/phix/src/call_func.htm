<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">call_func</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
          <a href="object.htm">object</a> x = call_func(<a href="integer.htm">integer</a> rid, <a href="sequence.htm">sequence</a> params)
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>
            Dynamically invoke the user-defined function with <a href="routine_id.htm">routine_id</a> rid.
            <br>
            <br>
            rid must be a valid routine id returned by routine_id(), and params must be a <a href="sequence.htm">sequence</a> of argument 
            values of length n, where n is compatible with the number of arguments required by function rid.
            x will be the result returned by function rid.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Comments:</b>
         </td>
         <td>
            Calling a routine directly is known as a static call: it is determined at compile-time and cannot be
            changed at run-time. Conversely, invoking a routine via a routine_id is known as a dynamic call: the
            value of the routine_id can be altered at run-time and hence the routine being called can be altered
            at run-time. While the trivial example below shows no benefits, the ability to store routine_ids in
            tables (etc) is much more flexible, and often quite necessary for gui programming. Historically, a
            routine_id was the only way to effect a forward call, but that is no longer the case.
            <br>
            <br>
            If function rid does not take any arguments then s should be {}.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
function sum2(integer a, inteber b)
    return a+b
end function
integer r_sum2 = routine_id("sum2")

?sum2(1,2)                  -- direct/static call
?call_func(r_sum2,{1,2})    -- indirect/dynamic call (equivalent)
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">function</font><font color="#000000"> sum2</font><font color="#0000FF">(</font><font color="#004080">integer</font><font color="#000000"> a</font><font color="#0000FF">,</font><font color="#000000"> inteber b</font><font color="#0000FF">)
</font><font color="#008080">    return</font><font color="#000000"> a</font><font color="#0000FF">+</font><font color="#000000">b
</font><font color="#008080">end function
</font><font color="#004080">integer</font><font color="#000000"> r_sum2</font><font color="#0000FF"> =</font><font color="#5E005E"> routine_id</font><font color="#0000FF">(</font><font color="#008000">"sum2"</font><font color="#0000FF">)

?</font><font color="#000000">sum2</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">2</font><font color="#0000FF">)                 </font><font color="#000080"><i> -- direct/static call
</i></font><font color="#0000FF">?</font><font color="#7060A8">call_func</font><font color="#0000FF">(</font><font color="#000000">r_sum2</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">2</font><font color="#800000">}</font><font color="#0000FF">)   </font><font color="#000080"><i> -- indirect/dynamic call (equivalent)</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="call_proc.htm">call_proc</a>,
          <a href="routine_id.htm">routine_id</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
