<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">seek</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
         <a href="integer.htm">integer</a> i0 = seek(<a href="integer.htm">integer</a> fn, <a href="integer.htm">integer</a> pos)
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>Seek (move) to any byte position in the file fn or to the end of
             file if pos is -1. For each open file there is a current byte
             position that is updated as a result of I/O operations on the
             file. The initial file position is 0 for files opened for read,
             write or update. The initial position is the end of file for
             files opened for append.
            <br>
            <br>
            Returns SEEK_OK (0) if the seek was successful, and non-zero if unsuccessful. 
            <br>
            <br>
            It is possible to seek past the end of a file. If you seek past the end
             of the file, and write some data, undefined bytes will be inserted 
             into the gap between the original end of file and your new data.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Comments:</b>
         </td>
         <td>After seeking and reading (writing) a series of bytes, you may need to 
             call seek() explicitly before you switch to writing (reading) bytes, 
             even though the file position should already be what you want.
          <br>
          <br>
             This function is normally used with files opened in binary mode.
             In text mode, DOS converts CR LF to LF on input, and LF to CR LF
             on output, which can cause great confusion when you are 
             trying to count bytes.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
integer fn = open("mydata", "rb")
-- read and display first line of file 3 times:
for i=1 to 3 do
    puts(1, gets(fn))
    if seek(fn, 0)!=SEEK_OK then
        puts(1, "rewind failed!\n")
    end if
end for
</eucode-->
<pre>
<font color="#000000"></font><font color="#004080">integer</font><font color="#000000"> fn</font><font color="#0000FF"> =</font><font color="#7060A8"> open</font><font color="#0000FF">(</font><font color="#008000">"mydata"</font><font color="#0000FF">,</font><font color="#008000"> "rb"</font><font color="#0000FF">)
</font><font color="#000080"><i>-- read and display first line of file 3 times:
</i></font><font color="#008080">for</font><font color="#000000"> i</font><font color="#0000FF">=</font><font color="#000000">1</font><font color="#008080"> to</font><font color="#000000"> 3</font><font color="#008080"> do
</font><font color="#7060A8">    puts</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#7060A8"> gets</font><font color="#800000">(</font><font color="#000000">fn</font><font color="#800000">)</font><font color="#0000FF">)
</font><font color="#008080">    if</font><font color="#7060A8"> seek</font><font color="#0000FF">(</font><font color="#000000">fn</font><font color="#0000FF">,</font><font color="#000000"> 0</font><font color="#0000FF">)!=</font><font color="#000000">SEEK_OK</font><font color="#008080"> then
</font><font color="#7060A8">        puts</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#008000"> "rewind failed!\n"</font><font color="#0000FF">)
</font><font color="#008080">    end if
end for</font>
</pre>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Implementation:</b>
         </td>
         <td>
              via :%opSeek / fseek() in builtins\VM\pfileioN.e (an autoinclude) - be warned however it is low-level complicated stuff that you do not need to know.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="where.htm">where</a>,
          <a href="open.htm">open</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
