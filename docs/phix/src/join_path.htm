<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">join_path</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
          <a href="string.htm">string</a> path = join_path(<a href="sequence.htm">sequence</a> path_elements, <a href="integer.htm#bool">bool</a> trailsep=false)
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>
            Join several path segments together using the appropriate separator.
            <br>
            <br>
            path_elements: fragments to be joined together, each of which must be a string.<br>
            trailsep: if true, ensure any non-empty result has a trailing separator.
            <br>
            <br>
            Returns: a <a href="string.htm">string</a>, the joined path.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Comments:</b>
         </td>
         <td>
            Unlike some other routines here, any path separators already present in any path_elements fragments should 
            be appropriate for the operating system, namely backslash ('\\') on Windows and forwardslash ('/') on Linux,
            though it should handle/replace incorrect separators at the end of fragments correctly - just not those at 
            the start or somewhere in the middle.
            As far as reasonably possible (not mid-fragment), duplicate path separators are eliminated from the result.
            <br>
            <br>
            Empty fragments are permitted, and ignored.
            <br>
            <br>
            A leading separator is preserved, as per the examples. By default the result never has a trailing slash, 
            which makes the routine suitable for constructing both file and directory paths, however that can be
            overriden (for directory path use) by specifying a non-zero trailsep, as long as the result would not
            otherwise be "".
            <br>
            <br>
            There is also a <a href="split_path.htm">split_path</a>(<a href="string.htm">string</a> path) function, which is the logical counterpart to join_path().
            <br>
            <br>
            The relatively trivial implementation of this routine can be found in the autoinclude builtins\pflatten.e
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Examples:</b>
         </td>
         <td>
<!--eucode>
?join_path({"demo","edix"})                 -- "demo\\edix" (on Windows)
?join_path({"\\demo\\","\\edix\\"})         -- "\\demo\\edix" (on Windows)
?join_path({"home/","/john"})               -- "home/john" (on Linux)
?join_path({"/home","john"})                -- "/home/john" (on Linux)
?join_path({"demo","edix"},trailsep:=true)  -- "demo\\edix\\" (on Windows)
?join_path({"demo","edix"},trailsep:=true)  -- "demo/edix/" (on Linux)
?join_path({"",""},trailsep:=true)          -- "" (0-length string, on Windows and Linux)
?join_path({},trailsep:=true)               -- "" (ditto)
?join_path({})                              -- "" (ditto)
</eucode-->
<pre>
<font color="#000000"></font><font color="#0000FF">?</font><font color="#5E005E">join_path</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#008000">"demo"</font><font color="#0000FF">,</font><font color="#008000">"edix"</font><font color="#800000">}</font><font color="#0000FF">)                </font><font color="#000080"><i> -- "demo\\edix" (on Windows)
</i></font><font color="#0000FF">?</font><font color="#5E005E">join_path</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#008000">"\\demo\\"</font><font color="#0000FF">,</font><font color="#008000">"\\edix\\"</font><font color="#800000">}</font><font color="#0000FF">)        </font><font color="#000080"><i> -- "\\demo\\edix" (on Windows)
</i></font><font color="#0000FF">?</font><font color="#5E005E">join_path</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#008000">"home/"</font><font color="#0000FF">,</font><font color="#008000">"/john"</font><font color="#800000">}</font><font color="#0000FF">)              </font><font color="#000080"><i> -- "home/john" (on Linux)
</i></font><font color="#0000FF">?</font><font color="#5E005E">join_path</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#008000">"/home"</font><font color="#0000FF">,</font><font color="#008000">"john"</font><font color="#800000">}</font><font color="#0000FF">)               </font><font color="#000080"><i> -- "/home/john" (on Linux)
</i></font><font color="#0000FF">?</font><font color="#5E005E">join_path</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#008000">"demo"</font><font color="#0000FF">,</font><font color="#008000">"edix"</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#000000">trailsep</font><font color="#0000FF">:=</font><font color="#004600">true</font><font color="#0000FF">) </font><font color="#000080"><i> -- "demo\\edix\\" (on Windows)
</i></font><font color="#0000FF">?</font><font color="#5E005E">join_path</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#008000">"demo"</font><font color="#0000FF">,</font><font color="#008000">"edix"</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#000000">trailsep</font><font color="#0000FF">:=</font><font color="#004600">true</font><font color="#0000FF">) </font><font color="#000080"><i> -- "demo/edix/" (on Linux)
</i></font><font color="#0000FF">?</font><font color="#5E005E">join_path</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#008000">""</font><font color="#0000FF">,</font><font color="#008000">""</font><font color="#800000">}</font><font color="#0000FF">,</font><font color="#000000">trailsep</font><font color="#0000FF">:=</font><font color="#004600">true</font><font color="#0000FF">)         </font><font color="#000080"><i> -- "" (0-length string, on Windows and Linux)
</i></font><font color="#0000FF">?</font><font color="#5E005E">join_path</font><font color="#0000FF">(</font><font color="#800000">{}</font><font color="#0000FF">,</font><font color="#000000">trailsep</font><font color="#0000FF">:=</font><font color="#004600">true</font><font color="#0000FF">)              </font><font color="#000080"><i> -- "" (ditto)
</i></font><font color="#0000FF">?</font><font color="#5E005E">join_path</font><font color="#0000FF">(</font><font color="#800000">{}</font><font color="#0000FF">)                             </font><font color="#000080"><i> -- "" (ditto)</i></font>
</pre>
            <br>
            The use of a <a href="procedures.htm#namedparams">named parameter</a> for trailsep makes the intent much clearer.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Implementation:</b>
         </td>
         <td>
            See builtins\pflatten.e (an autoinclude) for details of the actual implementation.
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
