<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">nopoll_conn_get_msg</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
          include nopoll.e
          <br>
          <br>
          <a href="atom.htm">atom</a> pMsg = nopoll_conn_get_msg(<a href="atom.htm">atom</a> conn)
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>
            Get the next message available on the provided connection.
            <br>
            <br>
            The function returns NULL in the case no message is still ready to be returned.
            <br>
            <br>
            This function is design to not block the caller. <br>
            However, connection socket must be in non-blocking configuration. <br>
            If you have not configured anything, this is the default.
            <br>
            <br>
            If the function blocks caller then the socket associated to noPollConn is configured to make blocking I/O 
            (maybe because you configured like this or the socket was passed to another library that did such configuration 
            or maybe because you are using nopoll_conn_new_with_socket).
            <br>
            <br>
            conn: The connection where the read operation will take place.
            <br>
            <br>
            Returns: A reference to a noPollMsg object or NULL if there is nothing available. <br>
            In case the function returns NULL, check connection status with <a href="nopoll_conn_is_ok.htm">nopoll_conn_is_ok</a>().
            <br>
            <br>
            The returned value should be considered opaque and contents from it retrieved using routines such as
            <a href="nopoll_msg_get_payload.htm">nopoll_msg_get_payload</a>() and 
            <a href="nopoll_msg_opcode.htm">nopoll_msg_opcode</a>().
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Example:</b>
         </td>
         <td>
           <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
            <div class="codeSnippetContainerCodeContainer">
             <div class="codeSnippetToolBar">
              <div class="codeSnippetToolBarText">
               <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-d4qx-4273-986j-8b2483c92846');">Copy</a>
              </div>
             </div>
             <div id="CodeSnippetContainerCode_13a75j95-d4qx-4273-986j-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
              <div style="color:Black;">
<!--eucode>
--DEV not tested!
include nopoll.e

function on_message(atom /*ctx*/, /*conn*/, pMsg, /*user_data*/)
    printf(1,"%s\nThe size of message is %d bytes\n",
             {nopoll_msg_get_payload(pMsg),
              nopoll_msg_get_payload_size(pMsg)})
--  ?nopoll_conn_send_text(conn, "Hello World")
    return 0 -- (rqd for call_back, otherwise ignored)
end function
constant on_message_cb = call_back(routine_id("on_message"))

atom ctx = nopoll_ctx_new()
if ctx=NULL then ?9/0 end if

--DEV?? conn = ??
-- create a listener to receive connections on port 1234
atom listener = nopoll_listener_new(ctx, "0.0.0.0", "9999");
if not nopoll_conn_is_ok(listener) then ?9/0 end if

-- now set a handler that will be called when a message (fragment or not) is received
nopoll_conn_set_on_msg(conn, on_message_cb, NULL)

-- now call to wait for the loop to notify events
integer error_code = nopoll_loop_wait(ctx, 0)

nopoll_ctx_unref(ctx)
</eucode-->
<pre>
<font color="#000000"></font><font color="#000080"><i>--DEV not tested!
</i></font><font color="#008080">include</font><font color="#000000"> nopoll.e

</font><font color="#008080">function</font><font color="#000000"> on_message</font><font color="#0000FF">(</font><font color="#004080">atom</font><font color="#000080"><i> /*ctx*/</i></font><font color="#0000FF">,</font><font color="#000000"> conn</font><font color="#0000FF">,</font><font color="#000000"> pMsg</font><font color="#0000FF">,</font><font color="#000080"><i> /*user_data*/</i></font><font color="#0000FF">)
</font><font color="#5E005E">    printf</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#008000">"%s\nThe size of message is %d bytes\n"</font><font color="#0000FF">,
</font><font color="#800000">             {</font><font color="#5E005E">nopoll_msg_get_payload</font><font color="#800080">(</font><font color="#000000">pMsg</font><font color="#800080">)</font><font color="#0000FF">,
</font><font color="#5E005E">              nopoll_msg_get_payload_size</font><font color="#800080">(</font><font color="#000000">pMsg</font><font color="#800080">)</font><font color="#800000">}</font><font color="#0000FF">)
    ?</font><font color="#5E005E">nopoll_conn_send_text</font><font color="#0000FF">(</font><font color="#000000">conn</font><font color="#0000FF">,</font><font color="#008000"> "Hello World"</font><font color="#0000FF">)
</font><font color="#008080">    return</font><font color="#000000"> 0</font><font color="#000080"><i> -- (rqd for call_back, otherwise ignored)
</i></font><font color="#008080">end function
constant</font><font color="#000000"> on_message_cb</font><font color="#0000FF"> =</font><font color="#5E005E"> call_back</font><font color="#0000FF">(</font><font color="#5E005E">routine_id</font><font color="#800000">(</font><font color="#008000">"on_message"</font><font color="#800000">)</font><font color="#0000FF">)

</font><font color="#004080">atom</font><font color="#000000"> ctx</font><font color="#0000FF"> =</font><font color="#5E005E"> nopoll_ctx_new</font><font color="#0000FF">()
</font><font color="#008080">if</font><font color="#000000"> ctx</font><font color="#0000FF">=</font><font color="#004600">NULL</font><font color="#008080"> then</font><font color="#0000FF"> ?</font><font color="#000000">9</font><font color="#0000FF">/</font><font color="#000000">0</font><font color="#008080"> end if

</font><font color="#000080"><i>--DEV?? conn = ??
-- create a listener to receive connections on port 1234
</i></font><font color="#004080">atom</font><font color="#000000"> listener</font><font color="#0000FF"> =</font><font color="#000000"> nopoll_listener_new</font><font color="#0000FF">(</font><font color="#000000">ctx</font><font color="#0000FF">,</font><font color="#008000"> "0.0.0.0"</font><font color="#0000FF">,</font><font color="#008000"> "9999"</font><font color="#0000FF">);
</font><font color="#008080">if not</font><font color="#5E005E"> nopoll_conn_is_ok</font><font color="#0000FF">(</font><font color="#000000">listener</font><font color="#0000FF">)</font><font color="#008080"> then</font><font color="#0000FF"> ?</font><font color="#000000">9</font><font color="#0000FF">/</font><font color="#000000">0</font><font color="#008080"> end if

</font><font color="#000080"><i>-- now set a handler that will be called when a message (fragment or not) is received
</i></font><font color="#5E005E">nopoll_conn_set_on_msg</font><font color="#0000FF">(</font><font color="#000000">conn</font><font color="#0000FF">,</font><font color="#000000"> on_message_cb</font><font color="#0000FF">,</font><font color="#004600"> NULL</font><font color="#0000FF">)

</font><font color="#000080"><i>-- now call to wait for the loop to notify events
</i></font><font color="#004080">integer</font><font color="#000000"> error_code</font><font color="#0000FF"> =</font><font color="#5E005E"> nopoll_loop_wait</font><font color="#0000FF">(</font><font color="#000000">ctx</font><font color="#0000FF">,</font><font color="#000000"> 0</font><font color="#0000FF">)

</font><font color="#000000">nopoll_ctx_unref</font><font color="#0000FF">(</font><font color="#000000">ctx</font><font color="#0000FF">)</font>
</pre>
              </div>
             </div>
            </div>
           </div>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
<!-- maybe:
References NOPOLL_CLOSE_FRAME, nopoll_conn_complete_handshake(), nopoll_conn_set_sock_block(), nopoll_conn_shutdown(), 
NOPOLL_EWOULDBLOCK, nopoll_get_32bit(), NOPOLL_LEVEL_CRITICAL, NOPOLL_LEVEL_DEBUG, NOPOLL_LEVEL_WARNING, 
nopoll_msg_ref(), nopoll_msg_unref(), nopoll_mutex_lock(), 
nopoll_mutex_unlock(), NOPOLL_PING_FRAME, NOPOLL_PONG_FRAME, NOPOLL_ROLE_LISTENER, nopoll_strdup().
-->
          <a href="nopoll_conn_is_ok.htm">nopoll_conn_is_ok</a>,
          <a href="nopoll_msg_get_payload.htm">nopoll_msg_get_payload</a>,
          <a href="nopoll_msg_get_payload_size.htm">nopoll_msg_get_payload_size</a>,
          <a href="nopoll_conn_is_ready.htm">nopoll_conn_is_ready</a>,
          <a href="nopoll_conn_read.htm">nopoll_conn_read</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
