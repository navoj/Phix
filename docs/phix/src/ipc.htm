<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">ipc</h1>
      <div id="mainSection">
        Simple ipc using shared memory.
        <br>
        <br>
        Allows two or more applications to share a block of contiguous memory, identified by a unique null-terminated string.
        <br>
        <br>
        The shared memory address used/returned by the routines is a standard memory address which is similar to that returned by 
        <a href="allocate.htm">allocate</a>() and can be referenced using the standard routines <a href="peek.htm">peek</a>() and 
        <a href="poke.htm">poke</a>(), and contain any phix <a href="object.htm">object</a> thanks to 
        <a href="serialize.htm">serialize</a>() and 
        <a href="deserialize.htm">deserialize</a>().
        <br>
        <br>
        Each application that requests a handle to shared memory must close it&rsquo;s handle before the memory will be returned 
        to the system. This operates a little differently from standard allocated memory, in that the application that originally 
        allocated the memory can close it&rsquo;s handle, but the memory will continue to exist for other applications to use as 
        long as at least one other application has an open handle to it.
        <br>
        <br>
        Based heavily on the work of Jason Mirwald and Mario Steele (Windows), and Elliott Sales de Andrade (Linux), however
        the file builtins\ipc.e (not an autoinclude) unifies those two (memshare) code bases into a single cross-platform file.
        <br>
        <a name=smerr></a>
        <br>
        <b>Predefined Error Values:</b>
        <br>
        The routines contained in this library will return one of the following values if an error occurs while trying to create or open shared memory. <br>
        The values are all negative integers, and can be used to help identify what specific error occurred during the calls.
        <br>
        SM_CREATE_EXIST - Shared memory already exists<br>
        SM_CREATE_FAIL - Failed to create Shared Memory<br>
        SM_OPEN_FAIL - Failed to obtain a valid Memory Address<br>
        SM_MEM_FAIL - Failed to allocate Standard Memory for the operation<br>
        SM_STAT_FAIL - Failed to retrieve the status of a block (Linux only)
        <br>
        <br>
        Note: there are (as yet) no synchronisation primitives, for now I suggest using file locking. As it stands,
        without said, this is only suitable for one-way, 1:1, and non-critical uses, such as:
        <ul>
         <li>compiler sending error and warning messages to Edix</li>
         <li>pdemo sending edit requests to Edix</li>
         <li>p -isense signalling intellisense info ready to read in /tmp</li>
         <li>implementation of single instance on Linux (may supercede the Windows-only SINGLEINSTANCE of IUP)</i>
        </ul>
        In all the above, the worst case scenario is only going to be "try clicking it again", although single
        instance creating two instances could potentially be more troublesome than when two overlapping 
        communications mean that eg &quot;C:\UC:\Users\Me\myfile.exwsers\Me\myfile.exw&quot; cannot be opened.
        <br>
        <br>
        It is also reasonable that, slowly, over time, this is extended with implementions of Message Queues,
        Named Pipes, and Sockets - there is a reason why there are half a dozen wildly different approaches to
        ipc, which is that "there is no one size fits all". Progress will most likely be rather leisurely, not
        least because any and all Windows-only or Linux-only solutions are less than worthless.
        <br>
        <br>
        <table>
         <col style="width: 5%"/>
         <tr>
          <td valign=top>
           <a href="sm_create.htm">
            <b>sm_create</b>
           </a>
          </td>
          <td width=10 align=center valign=top>-</td>
          <td>Create a uniquely-named block of shared memory
          </td>
         </tr>
         <tr>
          <td valign=top>
           <a href="sm_open.htm">
            <b>sm_open</b>
           </a>
          </td>
          <td width=10 align=center valign=top>-</td>
          <td>Retrieve the address of an existing block of shared memory, identified by name
          </td>
         </tr>
         <tr>
          <td valign=top>
           <a href="sm_alloc_lpsz.htm">
            <b>sm_alloc_lpsz</b>
           </a>
          </td>
          <td width=10 align=center valign=top>-</td>
          <td>Create and fill a named block of shared memory.
          </td>
         </tr>
         <tr>
          <td valign=top>
           <a href="sm_close.htm">
            <b>sm_close</b>
           </a>
          </td>
          <td width=10 align=center valign=top>-</td>
          <td>Close a handle to a block of shared memory
          </td>
         </tr>
        </table>
        <br>
        <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
