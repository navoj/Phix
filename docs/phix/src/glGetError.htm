<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">glGetError</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
          include pGUI.e
          <br>
          include opengl.e
          <br>
          <br>
          <a href="integer.htm">integer</a> res = glGetError()
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>
            The glGetError function returns one of the following error codes, as defined in opengl.e:
<!--eucode>
global constant GL_NO_ERROR             = 0,        -- No error has been recorded.
                GL_INVALID_ENUM         = #0500,    -- Unacceptable value specified for an enumerated argument.
                GL_INVALID_VALUE        = #0501,    -- A numeric argument is out of range. 
                GL_INVALID_OPERATION    = #0502,    -- Specified operation not allowed in the current state.
                GL_STACK_OVERFLOW       = #0503,    -- This function would cause a stack overflow.
                GL_STACK_UNDERFLOW      = #0504,    -- This function would cause a stack underflow.
                GL_OUT_OF_MEMORY        = #0505     -- There is not enough memory left to execute the function.
                                                    -- The state of OpenGL is undefined, except for the state 
                                                    --  of the error flags, after this error is recorded.
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">global constant</font><font color="#004600"> GL_NO_ERROR            </font><font color="#0000FF"> =</font><font color="#000000"> 0</font><font color="#0000FF">,       </font><font color="#000080"><i> -- No error has been recorded.
</i></font><font color="#004600">                GL_INVALID_ENUM        </font><font color="#0000FF"> =</font><font color="#000000"> #0500</font><font color="#0000FF">,   </font><font color="#000080"><i> -- Unacceptable value specified for an enumerated argument.
</i></font><font color="#004600">                GL_INVALID_VALUE       </font><font color="#0000FF"> =</font><font color="#000000"> #0501</font><font color="#0000FF">,   </font><font color="#000080"><i> -- A numeric argument is out of range. 
</i></font><font color="#004600">                GL_INVALID_OPERATION   </font><font color="#0000FF"> =</font><font color="#000000"> #0502</font><font color="#0000FF">,   </font><font color="#000080"><i> -- Specified operation not allowed in the current state.
</i></font><font color="#004600">                GL_STACK_OVERFLOW      </font><font color="#0000FF"> =</font><font color="#000000"> #0503</font><font color="#0000FF">,   </font><font color="#000080"><i> -- This function would cause a stack overflow.
</i></font><font color="#004600">                GL_STACK_UNDERFLOW     </font><font color="#0000FF"> =</font><font color="#000000"> #0504</font><font color="#0000FF">,   </font><font color="#000080"><i> -- This function would cause a stack underflow.
</i></font><font color="#004600">                GL_OUT_OF_MEMORY       </font><font color="#0000FF"> =</font><font color="#000000"> #0505    </font><font color="#000080"><i> -- There is not enough memory left to execute the function.
                                                    -- The state of OpenGL is undefined, except for the state 
                                                    --  of the error flags, after this error is recorded.</i></font>
</pre>
            <br>
            <br>
            The GL_INVALID_OPERATION error code is returned if any function other than 
<!--eucode>
            glCallList,   glColor,     glEvalCoord,  glIndex,     glNormal,   glVertex 
            glCallLists,  glEdgeFlag,  glEvalPoint,  glMaterial,  glTexCoord
</eucode-->
<pre>
<font color="#000000"></font><font color="#5E005E">            glCallList</font><font color="#0000FF">,  </font><font color="#5E005E"> glColor</font><font color="#0000FF">,    </font><font color="#000000"> glEvalCoord</font><font color="#0000FF">, </font><font color="#000000"> glIndex</font><font color="#0000FF">,    </font><font color="#5E005E"> glNormal</font><font color="#0000FF">,  </font><font color="#5E005E"> glVertex 
</font><font color="#000000">            glCallLists</font><font color="#0000FF">, </font><font color="#000000"> glEdgeFlag</font><font color="#0000FF">, </font><font color="#000000"> glEvalPoint</font><font color="#0000FF">, </font><font color="#000000"> glMaterial</font><font color="#0000FF">, </font><font color="#5E005E"> glTexCoord</font>
</pre>
            <br>
            was called between <a href="glBegin.htm">glBegin</a> and the corresponding glEnd. In my tests I have found that it <i>is</i> safe to call glGetError between
            such calls, but it is likely that is a sensible but specific implementation detail, rather than a formal OpenGL specification, and
            on some systems you may need to defer the call until after the glEnd.
            <br>
            <br>
            The same error is also returned if glEnd was called before the corresponding glBegin was called, or glBegin was called within a 
            glBegin/glEnd sequence.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Remarks</b>
         </td>
         <td>
            Each detectable error is assigned a numeric code and symbolic name. <br>
            When an error occurs, the error flag is set to the appropriate error code value. <br>
            No other errors are recorded until glGetError is called, the error code is returned, and the flag is reset to GL_NO_ERROR. <br>
            If a call to glGetError returns GL_NO_ERROR, there has been no detectable error since the last call to glGetError, or since OpenGL was initialized.
            <br>
            <br>
            To allow for distributed implementations, there may be several error flags. <br>
            If any single error flag has recorded an error, the value of that flag is returned and that flag is reset to GL_NO_ERROR when glGetError is called. <br>
            If more than one flag has recorded an error, glGetError returns and clears an arbitrary error flag value. <br>
            If all error flags are to be reset, you should always call glGetError in a loop until it returns GL_NO_ERROR.
            <br>
            <br>
            Initially, all error flags are set to GL_NO_ERROR.<br>
            When an error flag is set, results of an OpenGL operation are undefined only if GL_OUT_OF_MEMORY has occurred. <br>
            In all other cases, the function generating the error is ignored and has no effect on the OpenGL state or framebuffer contents.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="glBegin.htm">glBegin</a>,
          <a href="glBegin.htm">glEnd</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
