<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">define_c_proc</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
             <a href="integer.htm">integer</a> rid = define_c_proc(<a href="object.htm">object</a> lib,
                                                                   <a href="object.htm">object</a> fname,
                                                                   <a href="sequence.htm">sequence</a> args)
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>Define the characteristics of a C function that you wish to
             call as a procedure from your Phix program. A small <a href="integer.htm">integer</a>, known as a
          <font color="#030303">
           <b>routine id</b>
          </font>,
            will be returned, or -1 if the function cannot be found.
            <br>
            <br>
            The <a href="define_cffi_proc.htm">define_cffi_proc</a> routine is a string-based wrapper of this routine, 
            which you may find easier to use.
            <br>
            <br>
            lib is an address returned by open_dll(), or {}.
            <br>
            if lib is an atom, fname is the name of a function within that dll, optionally as 
            either {'+',"name"} or "+name" to specify the CDECL calling convention.
            <br>
            if lib is {}, fname is the (atom) address of a machine code function, optionally
            as {'+',addr} to specify the CDECL calling convention.
            <br>
            <br>
            CDECL is the default/only calling convention on a Linux system.
            <br>
            STDCALL is the default in a Windows system.
            <br>
            The CDECL convention requires the callee to clean up the stack, and is 
            therefore more suited to variable numbers of arguments, whereas with 
            STDCALL the routine cleans up the stack before returning.
            <br>
            <br>
            args is a list of the parameter types for the routine. A list of
            C types is contained in
          <font color="#5500FF">
           <b>dll.e</b>
          </font>,
            and
          <a href="define_c_func.htm">define_c_func</a>.
         </td>
        </tr>
<!--DEV [Eu types -> c_proc]
        <tr>
         <td valign=top>
          <b></b>
         </td>
         <td>The C routine that you define could be one created by the
            Euphoria To C Translator, in which case you can pass Euphoria data
            to it.
         </td>
        </tr>
-->
        <tr>
         <td valign=top>
          <b>Comments:</b>
         </td>
         <td>The
          <font color="#030303">
           <b>routine id</b>
          </font>, rid, can be passed to c_proc(), when you want to call the C function.
          <br>
          <br>
            You can pass any C integer type or pointer type.
             You can also pass a phix atom as a C double or float.
          <br>
          <br>
            In C (on Windows and Linux), parameter types which use 4 bytes or less are 
             all passed the same way, so it is not necessary to be exact.
          <br>
          <br>
            Currently, there is no way to pass a C structure by value.
             You can only pass a pointer to a structure.
          <br>
          <br>
            The C function can return a value but it will be ignored.
             If you want to use the value returned by the C function,
             you must instead define it with define_c_func() and call it
             with c_func().
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
atom user32
integer ShowWindow
-- open user32.dll - it contains the ShowWindow C function
user32 = open_dll("user32.dll")
-- It has 2 parameters that are both C int.
ShowWindow = define_c_proc(user32, "ShowWindow", {C_INT, C_INT})
if ShowWindow=-1 then
    puts(1, "ShowWindow not found!\n")
end if
</eucode-->
<pre>
<font color="#000000"></font><font color="#004080">atom</font><font color="#000000"> user32
</font><font color="#004080">integer</font><font color="#000000"> ShowWindow
</font><font color="#000080"><i>-- open user32.dll - it contains the ShowWindow C function
</i></font><font color="#000000">user32</font><font color="#0000FF"> =</font><font color="#7060A8"> open_dll</font><font color="#0000FF">(</font><font color="#008000">"user32.dll"</font><font color="#0000FF">)
</font><font color="#000080"><i>-- It has 2 parameters that are both C int.
</i></font><font color="#000000">ShowWindow</font><font color="#0000FF"> =</font><font color="#7060A8"> define_c_proc</font><font color="#0000FF">(</font><font color="#000000">user32</font><font color="#0000FF">,</font><font color="#008000"> "ShowWindow"</font><font color="#0000FF">,</font><font color="#800000"> {</font><font color="#004600">C_INT</font><font color="#0000FF">,</font><font color="#004600"> C_INT</font><font color="#800000">}</font><font color="#0000FF">)
</font><font color="#008080">if</font><font color="#000000"> ShowWindow</font><font color="#0000FF">=-</font><font color="#000000">1</font><font color="#008080"> then
</font><font color="#7060A8">    puts</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#008000"> "ShowWindow not found!\n"</font><font color="#0000FF">)
</font><font color="#008080">end if</font>
</pre>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="c_proc.htm">c_proc</a>,
          <a href="define_cffi_proc.htm">define_cffi_proc</a>,
          <a href="define_c_func.htm">define_c_func</a>,
          <a href="c_func.htm">c_func</a>,
          <a href="open_dll.htm">open_dll</a>,
          <a href="ccall.htm">Calling C Functions</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
