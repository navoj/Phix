<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">IupRawStringPtr</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
            include pGUI.e
            <br>
            <br>
            <a href="atom.htm">atom</a> res = IupRawStringPtr(<a href="string.htm">string</a> s)
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>Utility function. Returns a raw pointer to a string, like <a href="allocate_string.htm">allocate_string</a>() but using the existing memory.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Comments:</b>
         </td>
         <td>
            The result is only valid as long as the argument still exists. In effect it creates a non-reference-counted reference, and that requires it to
            be carefully managed. In particular the results of sprint and sprintf should not be used directly, and callbacks must make a semi-permanent copy 
            somewhere other than locals/temps. It is in fact callbacks that have the most obvious need for such a function.
            <br>
            <br>
            In the example below, if semiperm were local to the value_cb routine, it would be freed (and the first few bytes clobbered) by the return statement, 
            before the caller had a chance to inspect it. Likewise any hidden unnamed temp (of the sole reference variety). Obviously if data[l][c] is a string, 
            then it is fine to return IupRawStringPtr(data[l][c]), that is assuming data persists when value_cb returns. There may be some cases where the fact 
            that semiperm is clobbered on the very next call of value_cb may cause issues, in which case a more complex stack of 
            <a href="allocate_string.htm">allocate_string</a>() may need to be kept, but offhand I cannot think of any, or at least any that would 
            be used with pGUI.
            <br>
            <br>
            It may help to understand the differences between
            <a href="IupSetAttribute.htm">IupSetAttribute</a> (where these kinds of problems may well arise) and 
            <a href="IupSetStrAttribute.htm">IupSetStrAttribute</a> (where they do not).
            <br>
            <br>
            I should also note that using the optional automatic memory management flag of <a href="allocate_string.htm">allocate_string</a> is equally incorrect 
            and inappropriate for callback returns, for exactly the same reason, unless you use something like atom semiperm in a similar fashion to that below.
            Apart from that, should you experience any problems with IupRawStringPtr, such as semiperm being non-thread-safe, then instead by all means try using
            <a href="allocate_string.htm">allocate_string</a>() with a manual <a href="free.htm">free</a>() at some appropriately later 
            time.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
include pGUI.e

sequence data = {{1,11.17},
                 {2, 7.54},
                 {3,15.35}}

string semiperm -- (return of value_cb must outlive the call)

function value_cb(Ihandle self, integer l, integer c)
    -- (if l or c out of range then return NULL end if)
    semiperm = sprint(data[l][c])  -- or expr using &, [..], etc
    return IupRawStringPtr(semiperm)
end function

    ...
    IupSetCallback(matrix,"VALUE_CB",Icallback("value_cb"))
    ...
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">include</font><font color="#000000"> pGUI.e

</font><font color="#004080">sequence</font><font color="#000000"> data</font><font color="#0000FF"> = {</font><font color="#800000">{</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">11.17</font><font color="#800000">}</font><font color="#0000FF">,
</font><font color="#800000">                 {</font><font color="#000000">2</font><font color="#0000FF">,</font><font color="#000000"> 7.54</font><font color="#800000">}</font><font color="#0000FF">,
</font><font color="#800000">                 {</font><font color="#000000">3</font><font color="#0000FF">,</font><font color="#000000">15.35</font><font color="#800000">}</font><font color="#0000FF">}

</font><font color="#004080">string</font><font color="#000000"> semiperm</font><font color="#000080"><i> -- (return of value_cb must outlive the call)

</i></font><font color="#008080">function</font><font color="#000000"> value_cb</font><font color="#0000FF">(</font><font color="#5E005E">Ihandle</font><font color="#000000"> self</font><font color="#0000FF">,</font><font color="#004080"> integer</font><font color="#000000"> l</font><font color="#0000FF">,</font><font color="#004080"> integer</font><font color="#000000"> c</font><font color="#0000FF">)
</font><font color="#000080"><i>    -- (if l or c out of range then return NULL end if)
</i></font><font color="#000000">    semiperm</font><font color="#0000FF"> =</font><font color="#5E005E"> sprint</font><font color="#0000FF">(</font><font color="#000000">data</font><font color="#800000">[</font><font color="#000000">l</font><font color="#800000">][</font><font color="#000000">c</font><font color="#800000">]</font><font color="#0000FF">) </font><font color="#000080"><i> -- or expr using &amp;, [..], etc
</i></font><font color="#008080">    return</font><font color="#5E005E"> IupRawStringPtr</font><font color="#0000FF">(</font><font color="#000000">semiperm</font><font color="#0000FF">)
</font><font color="#008080">end function

</font><font color="#0000FF">    ...
</font><font color="#5E005E">    IupSetCallback</font><font color="#0000FF">(</font><font color="#000000">matrix</font><font color="#0000FF">,</font><font color="#008000">"VALUE_CB"</font><font color="#0000FF">,</font><font color="#5E005E">Icallback</font><font color="#800000">(</font><font color="#008000">"value_cb"</font><font color="#800000">)</font><font color="#0000FF">)
    ...</font>
</pre>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="allocate_string.htm">allocate_string</a>,
          <a href="IupSetAttribute.htm">IupSetAttribute</a>,
          <a href="IupSetStrAttribute.htm">IupSetStrAttribute</a>,
          <a href="IupSetCallback.htm">IupSetCallback</a>,
          <a href="Icallback.htm">Icallback</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
