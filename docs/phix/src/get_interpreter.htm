<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">get_interpreter</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
          <a href="string.htm">string</a> s = get_interpreter(<a href="integer.htm#bool">bool</a> enquote=false, 
                                                              <a href="object.htm">object</a> mb=machine_bits(), 
                                                              <a href="integer.htm">integer</a> plat=platform())
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>
            Returns the full path and filename of a phix executable, eg "C:\\Program Files (x86)\\Phix\\pw.exe", 
            or "" if no suitable interpreter could be found.
            <br>
            <br>
            You can find the implementation in builtins\get_interpreter.e (an autoinclude).
            <br>
            <br>
            Note this routine should (forever) be considered incomplete/unscientific/experimental.<br>
            Every situation/installation/platform is subtly different, and this routine is expected to require more than its fair share 
            of tweaks and adjustments.<br>
            It is however much better than starting from scratch every time you need something along these lines, and of course any changes 
            are best made in a renamed copy rather than the original, to avoid them being obliterated by installing a new version of phix, 
            and ideally change the entry point in your version to say get_interpreter2(), to avoid any potential confusion.<br>
            All reasonable changes will be added to the next release, on request. <br>
            If this routine does not meet your needs, I might suggest that you store and use an explicit path instead, possibly defaulted 
            from this, ie one that might work, but when needed can be overridden by the user in some configuration dialog or plaintext file.
            <br>
            <br>
            Things are usually much simpler when interpreting: there is a valid interpreter readily available in command_line()[1].<br>
            However, it also has to work when compiled, and not only on Windows/Linux, 32 and 64 bit, but also when run from anywhere.<br>
            Obviously, using get_interpreter() is a bad idea if you are planning to release your application as a prebuilt binary.
            <br>
            <br>
            enquote: can be true (1) to add double quotes around results containing spaces.<br>
            mb: primarily for testing purposes, but there may also be cases where you specifically require a 32 or 64 bit interpreter, 
            for example you might (as I do) only have a 32-bit libcurl.dll, so you need to fire off a 32bit interpreter to download some 
            file with that, even when the main app is 64bit.<br>
            plat: likewise for testing purposes, only in this case of no practical use for anything else that I can think of.
            <br>
            <br>
            Note that an integer mb is advisory: if you ask for 32bit but all it can find is 64bit, it will return that, and vice versa, 
            but at least it looks thoroughly. Should that be unacceptable, pass {32} or {64} to be more strict about the result. You can 
            also (manually) create some or all of the files <wbr>"pw64.exe",<wbr>"p64.exe",<wbr>"pw32.exe",<wbr>"p32.exe",<wbr>
            "p64", <wbr>and <wbr>"p32", <wbr>in any of the directories it looks in, to ensure it can find the one you need.<br>
            (In contrast, plat is never advisory: not that there is any need for it, or any overlap in the filenames it searches for.)<br>
            It searches the path from command_line(), cropped such that ../Phix/demo/.. -&gt; ../Phix/, and current_dir() if different,
            plus anything in %PATH% that ends with "phix" or "bin" (case insensitive).<br>
            On Windows it also searches "C:\\Program Files (x86)\\Phix" and "C:\\Program Files\\Phix".<br>
            On Linux it also searches %HOME%/phix.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
?get_interpreter() -- displays eg "C:\Program Files (x86)\Phix\p.exe"
                   -- or perhaps "/home/pete/phix/phix" on Linux
</eucode-->
<pre>
<font color="#000000"></font><font color="#0000FF">?</font><font color="#5E005E">get_interpreter</font><font color="#0000FF">()</font><font color="#000080"><i> -- displays eg "C:\Program Files (x86)\Phix\p.exe"
                   -- or perhaps "/home/pete/phix/phix" on Linux</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Implementation:</b>
         </td>
         <td>
            See builtins\get_interpreter.e (an autoinclude) for details of the actual implementation.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="command_line.htm">command_line</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
