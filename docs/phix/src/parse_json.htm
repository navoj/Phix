<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">parse_json</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
          include builtins\json.e
          <br>
          <a href="object.htm">object</a> res = parse_json(<a href="string.htm">string</a> s)
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>
            Converts a string representation of a JSON object into an internal form suitable for further processing.
            <br>
            <br>
            s: should contain a valid string representation of a JSON object.
            <br>
            <br>
            The result of parsing a JSON string is as follows:
            <ul>
            <li>Numbers and Strings (without quotes) are held natively</li>
            <li>An object is held as a <a href="sequence.htm">sequence</a> with a first element of -1 (JSON_OBJECT), 
                         and the rest pairs, the first of which is a <a href="string.htm">string</a> and the 
                         second any of these types.</li>
            <li>An array is held as a <a href="sequence.htm">sequence</a> with a first element of -2 (JSON_ARRAY),
                        and the rest any of these types.</li>
            <li>A keyword is held as a <a href="sequence.htm">sequence</a> with a first element of -3 (JSON_KEYWORD),
                         and one of the strings "true", "false", or "null".</li>
            </ul>
            Note the subscript of the first pair in an object, and element in an array, is always [2].
            <br>
            <br>
            For some more valid (and invalid) JSON examples, see demo\rosetta\JSON.exw.
            <br>
            <br>
            Attempts to parse an invalid JSON string yield {JSON_INVALID}, ie {-4}.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Example 1:</b>
         </td>
         <td>
           <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
            <div class="codeSnippetContainerCodeContainer">
             <div class="codeSnippetToolBar">
              <div class="codeSnippetToolBarText">
               <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a43j95-c3jk-1274-986j-8b2483c92833');">Copy</a>
              </div>
             </div>
             <div id="CodeSnippetContainerCode_13a43j95-c3jk-1274-986j-8b2483c92833" class="codeSnippetContainerCode" dir="ltr">
              <div style="color:Black;">
<!--eucode>
include builtins\json.e
string str = `{"this":"that","age":29}`
object res = parse_json(str)
-- res is {JSON_OBJECT,{"this","that"},{"age",29}}
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">include</font><font color="#000000"> builtins\json.e
</font><font color="#004080">string</font><font color="#000000"> str</font><font color="#0000FF"> =</font><font color="#008000"> `{"this":"that","age":29}`
</font><font color="#004080">object</font><font color="#000000"> res</font><font color="#0000FF"> =</font><font color="#5E005E"> parse_json</font><font color="#0000FF">(</font><font color="#000000">str</font><font color="#0000FF">)
</font><font color="#000080"><i>-- res is {JSON_OBJECT,{"this","that"},{"age",29}}</i></font>
</pre>
              </div>
             </div>
            </div>
           </div>
          <small>(Although that might look like it hasn&rsquo;t achieved much, the input is a single string of 24 characters, but
                 there are 3 separate strings in the output, and str[22..23] is the string "29" whereas res[3][2] is the integer 29.)</small>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Example 2:</b>
         </td>
         <td>
           <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
            <div class="codeSnippetContainerCodeContainer">
             <div class="codeSnippetToolBar">
              <div class="codeSnippetToolBarText">
               <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a76j96-c3bq-1274-976j-8b2483c92846');">Copy</a>
              </div>
             </div>
             <div id="CodeSnippetContainerCode_13a76j96-c3bq-1274-976j-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
              <div style="color:Black;">
<!--eucode>
-- note that parse_json() is non-thread-safe, without suitable protection such as the following:
include builtins\json.e
...
integer json = init_cs()
...
enter_cs(json)
res = parse_json(src)
leave_cs(json)
</eucode-->
<pre>
<font color="#000000"></font><font color="#000080"><i>-- note that parse_json() is non-thread-safe, without suitable protection such as the following:
</i></font><font color="#008080">include</font><font color="#000000"> builtins\json.e
</font><font color="#0000FF">...
</font><font color="#004080">integer</font><font color="#000000"> json</font><font color="#0000FF"> =</font><font color="#5E005E"> init_cs</font><font color="#0000FF">()
...
</font><font color="#5E005E">enter_cs</font><font color="#0000FF">(</font><font color="#000000">json</font><font color="#0000FF">)
</font><font color="#000000">res</font><font color="#0000FF"> =</font><font color="#5E005E"> parse_json</font><font color="#0000FF">(</font><font color="#000000">src</font><font color="#0000FF">)
</font><font color="#5E005E">leave_cs</font><font color="#0000FF">(</font><font color="#000000">json</font><font color="#0000FF">)</font>
</pre>
              </div>
             </div>
            </div>
           </div>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="print_json.htm">print_json</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
