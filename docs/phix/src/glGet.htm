<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">glGet</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
          include pGUI.e
          <br>
          include opengl.e
          <br>
          <br>
          glGetBooleanv(<a href="integer.htm">integer</a> pname, <a href="atom.htm">atom</a> pMem)
          <br>
          <i>-- or --</i>
          <br>
          glGetDoublev(<a href="integer.htm">integer</a> pname, <a href="atom.htm">atom</a> pMem)
          <br>
          <i>-- or --</i>
          <br>
          glGetFloatv(<a href="integer.htm">integer</a> pname, <a href="atom.htm">atom</a> pMem)
          <br>
          <i>-- or --</i>
          <br>
          glGetIntegerv(<a href="integer.htm">integer</a> pname, <a href="atom.htm">atom</a> pMem)
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>
            The above four routines obtain the value or values of a selected parameter.
            <br>
            <br>
            They do not return a value. The programmer is expected to allocate the required memory, select/invoke the appropriate routine, 
            perform the required peek operation(s) or pass the memory area directly to some other opengl function, and finally free the memory.
            <br>
            <br>
            pname: a symbolic constant from the table below.<br>
            pMem: an area of memory which will be populated by the call.
            <br>
            <br>
            <table>
             <tr><th bgcolor="#C0C0C0">pname</th>
                 <th bgcolor="#C0C0C0">Type</th>
                 <th bgcolor="#C0C0C0">N</th>
                 <th bgcolor="#C0C0C0">Description</th></tr>
             <tr><td>GL_ACCUM_ALPHA_BITS</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the number of alpha bitplanes in the accumulation buffer.</td> </tr>
             <tr><td>GL_ACCUM_BLUE_BITS</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the number of blue bitplanes in the accumulation buffer.</td> </tr>
             <tr><td>GL_ACCUM_CLEAR_VALUE
                 <td>atom<small><sup>1</sup></small></td>
                 <td>4</td>
                 <td>the red, green, blue, and alpha values used to clear the accumulation buffer. See glClearAccum.</td> </tr>
             <tr><td>GL_ACCUM_GREEN_BITS</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the number of green bitplanes in the accumulation buffer.</td> </tr>
             <tr><td>GL_ACCUM_RED_BITS</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the number of red bitplanes in the accumulation buffer.</td> </tr>
             <tr><td>GL_ALPHA_BIAS</td>
                 <td>atom</td>
                 <td>1</td>
                 <td>the alpha bias factor used during pixel transfers. See glPixelTransfer.</td> </tr>
             <tr><td>GL_ALPHA_BITS</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the number of alpha bitplanes in each color buffer.</td> </tr>
             <tr><td>GL_ALPHA_SCALE</td>
                 <td>atom</td>
                 <td>1</td>
                 <td>the alpha scale factor used during pixel transfers. See glPixelTransfer.</td> </tr>
             <tr><td>GL_ALPHA_TEST</td>
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether alpha testing of fragments is enabled. See glAlphaFunc.</td> </tr>
             <tr><td>GL_ALPHA_TEST_FUNC</td>
                 <td>ptr?</td>
                 <td>1</td>
                 <td>the symbolic name of the alpha test function. See glAlphaFunc.</td> </tr>
             <tr><td>GL_ALPHA_TEST_REF</td>
                 <td>atom<small><sup>1</sup></small></td>
                 <td>1</td>
                 <td>the reference value for the alpha test. See glAlphaFunc.</td> </tr>
             <tr><td>GL_ATTRIB_STACK_DEPTH</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the depth of the attribute stack. If the stack is empty, zero is returned. See glPushAttrib.</td> </tr>
             <tr><td>GL_AUTO_NORMAL
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether 2-D map evaluation automatically generates surface normals. See glMap2.</td> </tr>
             <tr><td>GL_AUX_BUFFERS</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the number of auxiliary color buffers.</td> </tr>
             <tr><td>GL_BLEND
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether blending is enabled. See glBlendFunc.</td> </tr>
             <tr><td>GL_BLEND_DST</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the symbolic constant identifying the destination blend function. See glBlendFunc.</td> </tr>
             <tr><td>GL_BLEND_SRC</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the symbolic constant identifying the source blend function. See glBlendFunc.</td> </tr>
             <tr><td>GL_BLUE_BIAS</td>
                 <td>atom</td>
                 <td>1</td>
                 <td>the blue bias factor used during pixel transfers. See glPixelTransfer.</td> </tr>
             <tr><td>GL_BLUE_BITS</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the number of blue bitplanes in each color buffer.</td> </tr>
             <tr><td>GL_BLUE_SCALE</td>
                 <td>atom</td>
                 <td>1</td>
                 <td>the blue scale factor used during pixel transfers. See glPixelTransfer.</td> </tr>
             <tr><td>GL_CLIENT_ATTRIB_STACK_DEPTH
                 <td>integer</td>
                 <td>1</td>
                 <td>the depth of the attribute stack. The initial value is zero. See glPushClientAttrib.</td> </tr>
             <tr><td>GL_CLIP_PLANEi
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether the specified clipping plane is enabled. See glClipPlane.</td> </tr>
             <tr><td>GL_COLOR_ARRAY
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether the specified color array is defined. See glColorPointer.</td> </tr>
             <tr><td>GL_COLOR_ARRAY_SIZE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the number of components per color in the color array. See glColorPointer.</td> </tr>
             <tr><td>GL_COLOR_ARRAY_STRIDE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the byte offset between consecutive colors in the color array. See glColorPointer.</td> </tr>
             <tr><td>GL_COLOR_ARRAY_TYPE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the data type of each component in the color array. See glColorPointer.</td> </tr>
             <tr><td>GL_COLOR_CLEAR_VALUE
                 <td>atom<small><sup>1</sup></small></td>
                 <td>4</td>
                 <td>the red, green, blue, and alpha values used to clear the color buffers. See glClearColor.</td> </tr>
             <tr><td>GL_COLOR_LOGIC_OP
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether a fragment&rsquo;s RGBA color values are merged into the framebuffer using a logical operation. See glLogicOp.</td> </tr>
             <tr><td>GL_COLOR_MATERIAL
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether one or more material parameters are tracking the current color. See glColorMaterial.</td> </tr>
             <tr><td>GL_COLOR_MATERIAL_FACE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>a symbolic constant indicating which materials have a parameter that is tracking the current color. See glColorMaterial.</td> </tr>
             <tr><td>GL_COLOR_MATERIAL_PARAMETER</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>a symbolic constant indicating which material parameters are tracking the current color. See glColorMaterial.</td> </tr>
             <tr><td>GL_COLOR_WRITEMASK
                 <td>boolean</td>
                 <td>4</td>
                 <td>the red, green, blue, and alpha write enables for the color buffers. See glColorMask.</td> </tr>
             <tr><td>GL_CULL_FACE
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether polygon culling is enabled. See glCullFace.</td> </tr>
             <tr><td>GL_CULL_FACE_MODE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>a symbolic constant indicating which polygon faces are to be culled. See glCullFace.</td> </tr>
             <tr><td>GL_CURRENT_COLOR
                 <td>atom<small><sup>1</sup></small></td>
                 <td>4</td>
                 <td>the red, green, blue, and alpha values of the current color. See glColor.</td> </tr>
             <tr><td>GL_CURRENT_INDEX</td>
                 <td>atom?</td>
                 <td>1</td>
                 <td>the current color index. See glIndex.</td> </tr>
             <tr><td>GL_CURRENT_NORMAL
                 <td>atom<small><sup>1</sup></small></td>
                 <td>3</td>
                 <td>the x, y, and z values of the current normal. See glNormal.</td> </tr>
             <tr><td>GL_CURRENT_RASTER_COLOR
                 <td>atom<small><sup>1</sup></small></td>
                 <td>4</td>
                 <td>the red, green, blue, and alpha values of the current raster position. See glRasterPos.</td> </tr>
             <tr><td>GL_CURRENT_RASTER_DISTANCE</td>
                 <td>atom</td>
                 <td>1</td>
                 <td>the distance from the eye to the current raster position. See glRasterPos.</td> </tr>
             <tr><td>GL_CURRENT_RASTER_INDEX</td>
                 <td>atom?</td>
                 <td>1</td>
                 <td>the color index of the current raster position. See glRasterPos.</td> </tr>
             <tr><td>GL_CURRENT_RASTER_POSITION
                 <td>atom</td>
                 <td>4</td>
                 <td>the x, y, z, and w components of the current raster position. The x, y, and z components are in window coordinates, and w is in clip coordinates. See glRasterPos.</td> </tr>
             <tr><td>GL_CURRENT_RASTER_POSITION_VALID
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether the current raster position is valid. See glRasterPos.</td> </tr>
             <tr><td>GL_CURRENT_RASTER_TEXTURE_COORDS
                 <td>atom</td>
                 <td>4</td>
                 <td>the s, t, r, and q current raster texture coordinates. See glRasterPos and glTexCoord.</td> </tr>
             <tr><td>GL_CURRENT_TEXTURE_COORDS
                 <td>atom</td>
                 <td>4</td>
                 <td>the s, t, r, and q current texture coordinates. See glTexCoord.</td> </tr>
             <tr><td>GL_DEPTH_BIAS</td>
                 <td>atom</td>
                 <td>1</td>
                 <td>the depth bias factor used during pixel transfers. See glPixelTransfer.</td> </tr>
             <tr><td>GL_DEPTH_BITS</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the number of bitplanes in the depth buffer.</td> </tr>
             <tr><td>GL_DEPTH_CLEAR_VALUE</td>
                 <td>atom<small><sup>1</sup></small></td>
                 <td>1</td>
                 <td>the value that is used to clear the depth buffer. See glClearDepth.</td> </tr>
             <tr><td>GL_DEPTH_FUNC</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the symbolic constant that indicates the depth comparison function. See glDepthFunc.</td> </tr>
             <tr><td>GL_DEPTH_RANGE
                 <td>atom<small><sup>1</sup></small></td>
                 <td>2</td>
                 <td>the near and far mapping limits for the depth buffer. See glDepthRange.</td> </tr>
             <tr><td>GL_DEPTH_SCALE</td>
                 <td>atom</td>
                 <td>1</td>
                 <td>the depth scale factor used during pixel transfers. See glPixelTransfer.</td> </tr>
             <tr><td>GL_DEPTH_TEST
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether depth testing of fragments is enabled. See glDepthFunc and glDepthRange.</td> </tr>
             <tr><td>GL_DEPTH_WRITEMASK
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether the depth buffer is enabled for writing. See glDepthMask.</td> </tr>
             <tr><td>GL_DITHER
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether dithering of fragment colors and indexes is enabled.</td> </tr>
             <tr><td>GL_DOUBLEBUFFER
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether double buffering is supported.</td> </tr>
             <tr><td>GL_DRAW_BUFFER</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>a symbolic constant indicating which buffers are being drawn to. See glDrawBuffer.</td> </tr>
             <tr><td>GL_EDGE_FLAG
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether the current edge flag is true or false. See glEdgeFlag.</td> </tr>
             <tr><td>GL_EDGE_FLAG_ARRAY
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether the edge flag array is enabled. See glEdgeFlagPointer.</td> </tr>
             <tr><td>GL_EDGE_FLAG_ARRAY_STRIDE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the byte offset between consecutive edge flags in the edge flag array. See glEdgeFlagPointer.</td> </tr>
             <tr><td>GL_FOG
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether fogging is enabled. See glFog.</td> </tr>
             <tr><td>GL_FOG_COLOR
                 <td>atom<small><sup>1</sup></small></td>
                 <td>4</td>
                 <td>the red, green, blue, and alpha components of the fog color. See glFog.</td> </tr>
             <tr><td>GL_FOG_DENSITY</td>
                 <td>atom</td>
                 <td>1</td>
                 <td>the fog density parameter. See glFog.</td> </tr>
             <tr><td>GL_FOG_END</td>
                 <td>atom</td>
                 <td>1</td>
                 <td>the end factor for the linear fog equation. See glFog.</td> </tr>
             <tr><td>GL_FOG_HINT</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>a symbolic constant indicating the mode of the fog hint. See glHint.</td> </tr>
             <tr><td>GL_FOG_INDEX</td>
                 <td>atom</td>
                 <td>1</td>
                 <td>the fog color index. See glFog.</td> </tr>
             <tr><td>GL_FOG_MODE</td>
                 <td>atom</td>
                 <td>1</td>
                 <td>a symbolic constant indicating which fog equation is selected. See glFog.</td> </tr>
             <tr><td>GL_FOG_START</td>
                 <td>atom</td>
                 <td>1</td>
                 <td>the start factor for the linear fog equation. See glFog.</td> </tr>
             <tr><td>GL_FRONT_FACE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>a symbolic constant indicating whether clockwise or counterclockwise polygon winding is treated as front-facing. See glFrontFace.</td> </tr>
             <tr><td>GL_GREEN_BIAS</td>
                 <td>atom</td>
                 <td>1</td>
                 <td>the green bias factor used during pixel transfers. See glPixelTransfer.</td> </tr>
             <tr><td>GL_GREEN_BITS</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the number of green bitplanes in each color buffer.</td> </tr>
             <tr><td>GL_GREEN_SCALE</td>
                 <td>atom</td>
                 <td>1</td>
                 <td>the green scale factor used during pixel transfers. See glPixelTransfer.</td> </tr>
             <tr><td>GL_INDEX_ARRAY
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether the color index array is enabled. See glIndexPointer.</td> </tr>
             <tr><td>GL_INDEX_ARRAY_STRIDE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the byte offset between consecutive color indexes in the color index array. See glIndexPointer.</td> </tr>
             <tr><td>GL_INDEX_ARRAY_TYPE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the data type of indexes in the color index array. The initial value is GL_FLOAT. See glIndexPointer.</td> </tr>
             <tr><td>GL_INDEX_BITS</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the number of bitplanes in each color-index buffer.</td> </tr>
             <tr><td>GL_INDEX_CLEAR_VALUE</td>
                 <td>atom</td>
                 <td>1</td>
                 <td>the color index used to clear the color-index buffers. See glClearIndex.</td> </tr>
             <tr><td>GL_INDEX_LOGIC_OP
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether a fragment&rsquo;s index values are merged into the framebuffer using a logical operation. See glLogicOp.</td> </tr>
             <tr><td>GL_INDEX_MODE
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether OpenGL is in color-index mode (TRUE) or RGBA mode (FALSE).</td> </tr>
             <tr><td>GL_INDEX_OFFSET</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the offset added to color and stencil indexes during pixel transfers. See glPixelTransfer.</td> </tr>
             <tr><td>GL_INDEX_SHIFT</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the amount that color and stencil indexes are shifted during pixel transfers. See glPixelTransfer.</td> </tr>
             <tr><td>GL_INDEX_WRITEMASK</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>a mask indicating which bitplanes of each color-index buffer can be written. See glIndexMask.</td> </tr>
             <tr><td>GL_LIGHTi
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether the specified light is enabled. See glLight and glLightModel.</td> </tr>
             <tr><td>GL_LIGHTING
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether lighting is enabled. See glLightModel.</td> </tr>
             <tr><td>GL_LIGHT_MODEL_AMBIENT
                 <td>atom<small><sup>1</sup></small></td>
                 <td>4</td>
                 <td>the red, green, blue, and alpha components of the ambient intensity of the entire scene. See glLightModel.</td> </tr>
             <tr><td>GL_LIGHT_MODEL_LOCAL_VIEWER
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether specular reflection calculations treat the viewer as being local to the scene. See glLightModel.</td> </tr>
             <tr><td>GL_LIGHT_MODEL_TWO_SIDE
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether separate materials are used to compute lighting for front-facing and back-facing polygons. See glLightModel.</td> </tr>
             <tr><td>GL_LINE_SMOOTH
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether antialiasing of lines is enabled. See glLineWidth.</td> </tr>
             <tr><td>GL_LINE_SMOOTH_HINT</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>a symbolic constant indicating the mode of the line antialiasing hint. See glHint.</td> </tr>
             <tr><td>GL_LINE_STIPPLE
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether stippling of lines is enabled. See glLineStipple.</td> </tr>
             <tr><td>GL_LINE_STIPPLE_PATTERN</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the 16-bit line stipple pattern. See glLineStipple.</td> </tr>
             <tr><td>GL_LINE_STIPPLE_REPEAT</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the line stipple repeat factor. See glLineStipple.</td> </tr>
             <tr><td>GL_LINE_WIDTH</td>
                 <td>atom</td>
                 <td>1</td>
                 <td>the line width as specified with glLineWidth.</td> </tr>
             <tr><td>GL_LINE_WIDTH_GRANULARITY</td>
                 <td>atom</td>
                 <td>1</td>
                 <td>the width difference between adjacent supported widths for antialiased lines. See glLineWidth.</td> </tr>
             <tr><td>GL_LINE_WIDTH_RANGE</td>
                 <td>atom</td>
                 <td>2</td>
                 <td>the smallest and largest supported widths for antialiased lines. See glLineWidth.</td> </tr>
             <tr><td>GL_LIST_BASE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the base offset added to all names in arrays presented to glCallLists. See glListBase.</td> </tr>
             <tr><td>GL_LIST_INDEX</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the name of the display list currently under construction. Zero is returned if no display list is currently under construction. See glNewList.</td> </tr>
             <tr><td>GL_LIST_MODE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>a symbolic constant indicating the construction mode of the display list currently being constructed. See glNewList.</td> </tr>
             <tr><td>GL_LOGIC_OP
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether fragment indexes are merged into the framebuffer using a logical operation. See glLogicOp.</td> </tr>
             <tr><td>GL_LOGIC_OP_MODE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>a symbolic constant indicating the selected logic operational mode. See glLogicOp.</td> </tr>
             <tr><td>GL_MAP1_COLOR_4
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether 1-D evaluation generates colors. See glMap1.</td> </tr>
             <tr><td>GL_MAP1_GRID_DOMAIN
                 <td>atom</td>
                 <td>2</td>
                 <td>the endpoints of the 1-D maps grid domain. See glMapGrid.</td> </tr>
             <tr><td>GL_MAP1_GRID_SEGMENTS</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the number of partitions in the 1-D maps grid domain. See glMapGrid.</td> </tr>
             <tr><td>GL_MAP1_INDEX
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether 1-D evaluation generates color indexes. See glMap1.</td> </tr>
             <tr><td>GL_MAP1_NORMAL
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether 1-D evaluation generates normals. See glMap1.</td> </tr>
             <tr><td>GL_MAP1_TEXTURE_COORD_1
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether 1-D evaluation generates 1-D texture coordinates. See glMap1.</td> </tr>
             <tr><td>GL_MAP1_TEXTURE_COORD_2
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether 1-D evaluation generates 2-D texture coordinates. See glMap1.</td> </tr>
             <tr><td>GL_MAP1_TEXTURE_COORD_3
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether 1-D evaluation generates 3-D texture coordinates. See glMap1.</td> </tr>
             <tr><td>GL_MAP1_TEXTURE_COORD_4
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether 1-D evaluation generates 4-D texture coordinates. See glMap1.</td> </tr>
             <tr><td>GL_MAP1_VERTEX_3
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether 1-D evaluation generates 3-D vertex coordinates. See glMap1.</td> </tr>
             <tr><td>GL_MAP1_VERTEX_4
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether 1-D evaluation generates 4-D vertex coordinates. See glMap1.</td> </tr>
             <tr><td>GL_MAP2_COLOR_4
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether 2-D evaluation generates colors. See glMap2.</td> </tr>
             <tr><td>GL_MAP2_GRID_DOMAIN
                 <td>atom</td>
                 <td>4</td>
                 <td>the endpoints of the 2-D maps i and j grid domains. See glMapGrid.</td> </tr>
             <tr><td>GL_MAP2_GRID_SEGMENTS
                 <td>integer</td>
                 <td>2</td>
                 <td>the number of partitions in the 2-D maps i and j grid domains. See glMapGrid.</td> </tr>
             <tr><td>GL_MAP2_INDEX
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether 2-D evaluation generates color indexes. See glMap2.</td> </tr>
             <tr><td>GL_MAP2_NORMAL
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether 2-D evaluation generates normals. See glMap2.</td> </tr>
             <tr><td>GL_MAP2_TEXTURE_COORD_1
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether 2-D evaluation generates 1-D texture coordinates. See glMap2.</td> </tr>
             <tr><td>GL_MAP2_TEXTURE_COORD_2
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether 2-D evaluation generates 2-D texture coordinates. See glMap2.</td> </tr>
             <tr><td>GL_MAP2_TEXTURE_COORD_3
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether 2-D evaluation generates 3-D texture coordinates. See glMap2.</td> </tr>
             <tr><td>GL_MAP2_TEXTURE_COORD_4
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether 2-D evaluation generates 4-D texture coordinates. See glMap2.</td> </tr>
             <tr><td>GL_MAP2_VERTEX_3
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether 2-D evaluation generates 3-D vertex coordinates. See glMap2.</td> </tr>
             <tr><td>GL_MAP2_VERTEX_4
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether 2-D evaluation generates 4-D vertex coordinates. See glMap2.</td> </tr>
             <tr><td>GL_MAP_COLOR
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether colors and color indexes are to be replaced by table lookup during pixel transfers. See glPixelTransfer.</td> </tr>
             <tr><td>GL_MAP_STENCIL
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether stencil indexes are to be replaced by table lookup during pixel transfers. See glPixelTransfer.</td> </tr>
             <tr><td>GL_MATRIX_MODE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>a symbolic constant indicating which matrix stack is currently the target of all matrix operations. See glMatrixMode.</td> </tr>
             <tr><td>GL_MAX_CLIENT_ATTRIB_STACK_DEPTH
                 <td>integer</td>
                 <td>1</td>
                 <td>the maximum supported depth of the client attribute stack. See glPushClientAttrib.</td> </tr>
             <tr><td>GL_MAX_ATTRIB_STACK_DEPTH</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the maximum supported depth of the attribute stack. See glPushAttrib.</td> </tr>
             <tr><td>GL_MAX_CLIP_PLANES</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the maximum number of application-defined clipping planes. See glClipPlane.</td> </tr>
             <tr><td>GL_MAX_EVAL_ORDER</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the maximum equation order supported by 1-D and 2-D evaluators. See glMap1 and glMap2.</td> </tr>
             <tr><td>GL_MAX_LIGHTS</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the maximum number of lights. See glLight.</td> </tr>
             <tr><td>GL_MAX_LIST_NESTING</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the maximum recursion depth allowed during display-list traversal. See glCallList.</td> </tr>
             <tr><td>GL_MAX_MODELVIEW_STACK_DEPTH</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the maximum supported depth of the modelview matrix stack. See glPushMatrix.</td> </tr>
             <tr><td>GL_MAX_NAME_STACK_DEPTH</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the maximum supported depth of the selection name stack. See glPushName.</td> </tr>
             <tr><td>GL_MAX_PIXEL_MAP_TABLE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the maximum supported size of a glPixelMap lookup table.</td> </tr>
             <tr><td>GL_MAX_PROJECTION_STACK_DEPTH</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the maximum supported depth of the projection matrix stack. See glPushMatrix.</td> </tr>
             <tr><td>GL_MAX_TEXTURE_SIZE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the maximum width or height of any texture image (without borders). See glTexImage1D and glTexImage2D.</td> </tr>
             <tr><td>GL_MAX_TEXTURE_STACK_DEPTH</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the maximum supported depth of the texture matrix stack. See glPushMatrix.</td> </tr>
             <tr><td>GL_MAX_VIEWPORT_DIMS
                 <td>atom</td>
                 <td>2</td>
                 <td>the maximum supported width and height of the viewport. See glViewport.</td> </tr>
             <tr><td>GL_MODELVIEW_MATRIX
                 <td>atom</td>
                 <td>16</td>
                 <td>the modelview matrix on the top of the modelview matrix stack. See glPushMatrix.</td> </tr>
             <tr><td>GL_MODELVIEW_STACK_DEPTH</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the number of matrices on the modelview matrix stack. See glPushMatrix.</td> </tr>
             <tr><td>GL_NAME_STACK_DEPTH</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the number of names on the selection name stack. See glPushName.</td> </tr>
             <tr><td>GL_NORMAL_ARRAY
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether the normal array is enabled. See glNormalPointer.</td> </tr>
             <tr><td>GL_NORMAL_ARRAY_STRIDE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the byte offset between consecutive normals in the normal array. See glNormalPointer.</td> </tr>
             <tr><td>GL_NORMAL_ARRAY_TYPE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the data type of each coordinate in the normal array. See glNormalPointer.</td> </tr>
             <tr><td>GL_NORMALIZE
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether normals are automatically scaled to unit length after they have been transformed to eye coordinates. See glNormal.</td> </tr>
             <tr><td>GL_PACK_ALIGNMENT</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the byte alignment used for writing pixel data to memory. See glPixelStore.</td> </tr>
             <tr><td>GL_PACK_LSB_FIRST
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether single-bit pixels being written to memory are written first to the least significant bit of each unsigned byte. See glPixelStore.</td> </tr>
             <tr><td>GL_PACK_ROW_LENGTH</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the row length used for writing pixel data to memory. See glPixelStore.</td> </tr>
             <tr><td>GL_PACK_SKIP_PIXELS</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the number of pixel locations skipped before the first pixel is written into memory. See glPixelStore.</td> </tr>
             <tr><td>GL_PACK_SKIP_ROWS</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the number of rows of pixel locations skipped before the first pixel is written into memory. See glPixelStore.</td> </tr>
             <tr><td>GL_PACK_SWAP_BYTES
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether the bytes of 2-byte and 4-byte pixel indexes and components are swapped before being written to memory. See glPixelStore.</td> </tr>
             <tr><td>GL_PERSPECTIVE_CORRECTION_HINT</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>a symbolic constant indicating the mode of the perspective correction hint. See glHint.</td> </tr>
             <tr><td>GL_PIXEL_MAP_A_TO_A_SIZE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the size of the alpha-to-alpha pixel-translation table. See glPixelMap.</td> </tr>
             <tr><td>GL_PIXEL_MAP_B_TO_B_SIZE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the size of the blue-to-blue pixel-translation table. See glPixelMap.</td> </tr>
             <tr><td>GL_PIXEL_MAP_G_TO_G_SIZE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the size of the green-to-green pixel-translation table. See glPixelMap.</td> </tr>
             <tr><td>GL_PIXEL_MAP_I_TO_A_SIZE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the size of the index-to-alpha pixel translation table. See glPixelMap.</td> </tr>
             <tr><td>GL_PIXEL_MAP_I_TO_B_SIZE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the size of the index-to-blue pixel translation table. See glPixelMap.</td> </tr>
             <tr><td>GL_PIXEL_MAP_I_TO_G_SIZE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the size of the index-to-green pixel-translation table. See glPixelMap.</td> </tr>
             <tr><td>GL_PIXEL_MAP_I_TO_I_SIZE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the size of the index-to-index pixel-translation table. See glPixelMap.</td> </tr>
             <tr><td>GL_PIXEL_MAP_I_TO_R_SIZE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the size of the index-to-red pixel-translation table. See glPixelMap.</td> </tr>
             <tr><td>GL_PIXEL_MAP_R_TO_R_SIZE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the size of the red-to-red pixel-translation table. See glPixelMap.</td> </tr>
             <tr><td>GL_PIXEL_MAP_S_TO_S_SIZE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the size of the stencil-to-stencil pixel translation table. See glPixelMap.</td> </tr>
             <tr><td>GL_POINT_SIZE</td>
                 <td>atom</td>
                 <td>1</td>
                 <td>the point size as specified by glPointSize.</td> </tr>
             <tr><td>GL_POINT_SIZE_GRANULARITY</td>
                 <td>atom</td>
                 <td>1</td>
                 <td>the size difference between adjacent supported sizes for antialiased points. See glPointSize.</td> </tr>
             <tr><td>GL_POINT_SIZE_RANGE
                 <td>atom</td>
                 <td>2</td>
                 <td>the smallest and largest supported sizes for antialiased points. See glPointSize.</td> </tr>
             <tr><td>GL_POINT_SMOOTH
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether antialiasing of points is enabled. See glPointSize.</td> </tr>
             <tr><td>GL_POINT_SMOOTH_HINT</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>a symbolic constant indicating the mode of the point antialiasing hint. See glHint.</td> </tr>
             <tr><td>GL_POLYGON_MODE
                 <td>integer</td>
                 <td>2</td>
                 <td>symbolic constants indicating whether front-facing and back-facing polygons are rasterized as points, lines, or filled polygons. See glPolygonMode.</td> </tr>
             <tr><td>GL_POLYGON_OFFSET_FACTOR</td>
                 <td>atom</td>
                 <td>1</td>
                 <td>the scaling factor used to determine the variable offset that is added to the depth value of each fragment generated when a polygon is rasterized. See glPolygonOffset.</td> </tr>
             <tr><td>GL_POLYGON_OFFSET_UNITS</td>
                 <td>atom</td>
                 <td>1</td>
                 <td>This value is multiplied by an implementation-specific value and then added to the depth value of each fragment generated when a polygon is rasterized. See glPolygonOffset.</td> </tr>
             <tr><td>GL_POLYGON_OFFSET_FILL
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether polygon offset is enabled for polygons in fill mode. See glPolygonOffset.</td> </tr>
             <tr><td>GL_POLYGON_OFFSET_LINE
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether polygon offset is enabled for polygons in line mode. See glPolygonOffset.</td> </tr>
             <tr><td>GL_POLYGON_OFFSET_POINT
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether polygon offset is enabled for polygons in point mode. See glPolygonOffset.</td> </tr>
             <tr><td>GL_POLYGON_SMOOTH
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether antialiasing of polygons is enabled. See glPolygonMode.</td> </tr>
             <tr><td>GL_POLYGON_SMOOTH_HINT</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>a symbolic constant indicating the mode of the polygon antialiasing hint. See glHint.</td> </tr>
             <tr><td>GL_POLYGON_STIPPLE
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether stippling of polygons is enabled. See glPolygonStipple.</td> </tr>
             <tr><td>GL_PROJECTION_MATRIX
                 <td>atom</td>
                 <td>16</td>
                 <td>the projection matrix on the top of the projection matrix stack. See glPushMatrix.</td> </tr>
             <tr><td>GL_PROJECTION_STACK_DEPTH</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the number of matrices on the projection matrix stack. See glPushMatrix.</td> </tr>
             <tr><td>GL_READ_BUFFER</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>a symbolic constant indicating which color buffer is selected for reading. See glReadPixels and glAccum.</td> </tr>
             <tr><td>GL_RED_BIAS</td>
                 <td>atom</td>
                 <td>1</td>
                 <td>the red bias factor used during pixel transfers. See glPixelTransfer.</td> </tr>
             <tr><td>GL_RED_BITS</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the number of red bitplanes in each color buffer.</td> </tr>
             <tr><td>GL_RED_SCALE</td>
                 <td>atom</td>
                 <td>1</td>
                 <td>the red scale factor used during pixel transfers. See glPixelTransfer.</td> </tr>
             <tr><td>GL_RENDER_MODE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>a symbolic constant indicating whether OpenGL is in render, select, or feedback mode. See glRenderMode.</td> </tr>
             <tr><td>GL_RGBA_MODE
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether OpenGL is in RGBA mode (TRUE) or color-index mode (FALSE). See glColor.</td> </tr>
             <tr><td>GL_SCISSOR_BOX
                 <td>atom</td>
                 <td>4</td>
                 <td>the x and y window coordinates of the scissor box, followed by its width and height. See glScissor.</td> </tr>
             <tr><td>GL_SCISSOR_TEST
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether scissoring is enabled. See glScissor.</td> </tr>
             <tr><td>GL_SHADE_MODEL</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>a symbolic constant indicating whether the shading mode is flat or smooth. See glShadeModel.</td> </tr>
             <tr><td>GL_STENCIL_BITS</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the number of bitplanes in the stencil buffer.</td> </tr>
             <tr><td>GL_STENCIL_CLEAR_VALUE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the index to which the stencil bitplanes are cleared. See glClearStencil.</td> </tr>
             <tr><td>GL_STENCIL_FAIL</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>a symbolic constant indicating what action is taken when the stencil test fails. See glStencilOp.</td> </tr>
             <tr><td>GL_STENCIL_FUNC</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>a symbolic constant indicating what function is used to compare the stencil reference value with the stencil buffer value. See glStencilFunc.</td> </tr>
             <tr><td>GL_STENCIL_PASS_DEPTH_FAIL</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>a symbolic constant indicating what action is taken when the stencil test passes, but the depth test fails. See glStencilOp.</td> </tr>
             <tr><td>GL_STENCIL_PASS_DEPTH_PASS</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>a symbolic constant indicating what action is taken when the stencil test passes and the depth test passes. See glStencilOp.</td> </tr>
             <tr><td>GL_STENCIL_REF</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the reference value that is compared with the contents of the stencil buffer. See glStencilFunc.</td> </tr>
             <tr><td>GL_STENCIL_TEST
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether stencil testing of fragments is enabled. See glStencilFunc and glStencilOp.</td> </tr>
             <tr><td>GL_STENCIL_VALUE_MASK</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the mask that is used to mask both the stencil reference value and the stencil buffer value before they are compared. See glStencilFunc.</td> </tr>
             <tr><td>GL_STENCIL_WRITEMASK</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the mask that controls writing of the stencil bitplanes. See glStencilMask.</td> </tr>
             <tr><td>GL_STEREO
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether stereo buffers (left and right) are supported.</td> </tr>
             <tr><td>GL_SUBPIXEL_BITS</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>an estimate of the number of bits of subpixel resolution that are used to position rasterized geometry in window coordinates.</td> </tr>
             <tr><td>GL_TEXTURE_1D
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether 1-D texture mapping is enabled. See glTexImage1D.</td> </tr>
             <tr><td>GL_TEXTURE_2D
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether 2-D texture mapping is enabled. See glTexImage2D.</td> </tr>
             <tr><td>GL_TEXTURE_COORD_ARRAY
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether the texture coordinate array is enabled. See glTexCoordPointer.</td> </tr>
             <tr><td>GL_TEXTURE_COORD_ARRAY_SIZE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the number of coordinates per element in the texture coordinate array. See glTexCoordPointer.</td> </tr>
             <tr><td>GL_TEXTURE_COORD_ARRAY_STRIDE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the byte offset between consecutive elements in the texture coordinate array. See glTexCoordPointer.</td> </tr>
             <tr><td>GL_TEXTURE_COORD_ARRAY_TYPE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the data type of the coordinates in the texture coordinate array. See glTexCoordPointer.</td> </tr>
             <tr><td>GL_TEXTURE_ENV_COLOR
                 <td>atom<small><sup>1</sup></small></td>
                 <td>4</td>
                 <td>the red, green, blue, and alpha values of the texture environment color. See glTexEnv.</td> </tr>
             <tr><td>GL_TEXTURE_ENV_MODE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>a symbolic constant indicating which texture environment function is currently selected. See glTexEnv.</td> </tr>
             <tr><td>GL_TEXTURE_GEN_Q
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether automatic generation of the Q texture coordinate is enabled. See glTexGen.</td> </tr>
             <tr><td>GL_TEXTURE_GEN_R
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether automatic generation of the R texture coordinate is enabled. See glTexGen.</td> </tr>
             <tr><td>GL_TEXTURE_GEN_S
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether automatic generation of the S texture coordinate is enabled. See glTexGen.</td> </tr>
             <tr><td>GL_TEXTURE_GEN_T
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether automatic generation of the T texture coordinate is enabled. See glTexGen.</td> </tr>
             <tr><td>GL_TEXTURE_MATRIX
                 <td>atom</td>
                 <td>16</td>
                 <td>the texture matrix on the top of the texture matrix stack. See glPushMatrix.</td> </tr>
             <tr><td>GL_TEXTURE_STACK_DEPTH</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the number of matrices on the texture matrix stack. See glPushMatrix.</td> </tr>
             <tr><td>GL_UNPACK_ALIGNMENT</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the byte alignment used for reading pixel data from memory. See glPixelStore.</td> </tr>
             <tr><td>GL_UNPACK_LSB_FIRST
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether single-bit pixels being read from memory are read first from the least significant bit of each unsigned byte. See glPixelStore.</td> </tr>
             <tr><td>GL_UNPACK_ROW_LENGTH</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the row length used for reading pixel data from memory. See glPixelStore.</td> </tr>
             <tr><td>GL_UNPACK_SKIP_PIXELS</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the number of pixel locations skipped before the first pixel is read from memory. See glPixelStore.</td> </tr>
             <tr><td>GL_UNPACK_SKIP_ROWS</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the number of rows of pixel locations skipped before the first pixel is read from memory. See glPixelStore.</td> </tr>
             <tr><td>GL_UNPACK_SWAP_BYTES
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether the bytes of 2-byte and 4-byte pixel indexes and components are swapped after being read from memory. See glPixelStore.</td> </tr>
             <tr><td>GL_VERTEX_ARRAY
                 <td>boolean</td>
                 <td>1</td>
                 <td>whether the vertex array is enabled. See glVertexPointer.</td> </tr>
             <tr><td>GL_VERTEX_ARRAY_SIZE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the number of coordinates per vertex in the vertex array. See glVertexPointer.</td> </tr>
             <tr><td>GL_VERTEX_ARRAY_STRIDE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the byte offset between consecutive vertexes in the vertex array. See glVertexPointer.</td> </tr>
             <tr><td>GL_VERTEX_ARRAY_TYPE</td>
                 <td>integer</td>
                 <td>1</td>
                 <td>the data type of each coordinate in the vertex array. See glVertexPointer.</td> </tr>
             <tr><td>GL_VIEWPORT
                 <td>atom</td>
                 <td>4</td>
                 <td>the x and y window coordinates of the viewport, followed by its width and height. See glViewport.</td> </tr>
             <tr><td>GL_ZOOM_X</td>
                 <td>atom</td>
                 <td>1</td>
                 <td>the x pixel zoom factor. See glPixelZoom.</td> </tr>
             <tr><td>GL_ZOOM_Y</td>
                 <td>atom</td>
                 <td>1</td>
                 <td>the y pixel zoom factor. See glPixelZoom.</td> </tr>
            </table>
            <br>
            <br>
            Note the type column is entirely my own devising, possibly misleading, constructed by manually/laboriously substituting "The params parameter returns" etc.
            <br>
            <small><sup>1</sup> Integer values, if requested, are linearly mapped from the internal floating-point representation such that 
            1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value.</small>
            <br>
            <br>
            The following error codes can be retrieved by the glGetError function.<br>
            GL_INVALID_ENUM - pname was not an accepted value.<br>
            GL_INVALID_OPERATION - glGetXxxv was called between a call to glBegin and the corresponding call to glEnd.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Remarks</b>
         </td>
         <td>
            These routines retrieve values for simple state variables in OpenGL.<br>
            Type conversion is performed if params has a different type from the state variable value being requested. <br>
            If you call glGetBooleanv, a floating-point or integer value is converted to GL_FALSE if and only if it is zero. Otherwise, it is converted to GL_TRUE.<br>
            If you call glGetIntegerv, Boolean values are returned as GL_TRUE or GL_FALSE, and most floating-point values are rounded to the nearest integer value. <br>
            Floating-point colors and normals, however, are returned with a linear mapping that maps 1.0 to the most positive representable integer value and 1.0 to 
            the most negative representable integer value.<br>
            If you call glGetFloatv or glGetDoublev, Boolean values are returned as GL_TRUE or GL_FALSE, and integer values are converted to floating-point values.<br>
            You can query many of the Boolean parameters more easily with glIsEnabled.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
<br>DEV
See also
glAccum
glAlphaFunc
          <a href="glBegin.htm">glBegin</a>,
glBlendFunc
glCallList
glClearAccum
glClearColor
glClearDepth
glClearIndex
glClearStencil
glClipPlane
glColor
glColorMask
glColorMaterial
glCullFace
glDepthFunc
glDepthMask
glDepthRange
glDrawBuffer
glEdgeFlag
          <a href="glBegin.htm">glEnd</a>,
glFog
glFrontFace
glGetClipPlane
glGetError
glGetLight
glGetMap
glGetMaterial
glGetPixelMap
glGetPolygonStipple
glGetString
glGetTexEnv
glGetTexGen
glGetTexImage
glGetTexLevelParameter
glGetTexParameter
glHint
glIndex
glIndexMask
glIsEnabled
glLight
glLightModel
glLineStipple
glLineWidth
glListBase
glLogicOp
glMap1
glMap2
glMapGrid
glMatrixMode
glNewList
          <a href="glNormal.htm">glNormal</a>,
glPixelMap
glPixelStore
glPixelTransfer
glPixelZoom
glPointSize
glPolygonMode
glPolygonStipple
glPushAttrib
glPushMatrix
glPushName
glRasterPos
glReadPixels
glScissor
glShadeModel
glStencilFunc
glStencilMask
glStencilOp
glTexCoord
glTexEnv
glTexGen
glTexImage1D
glTexImage2D
glViewport
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
