<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">IupCanvas</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
            include pGUI.e
            <br>
            <br>
            <a href="Ihandle.htm">Ihandle</a> ih = IupCanvas([[<a href="nullable_string.htm">nullable_string</a> action=NULL,] <a href="Icallback.htm">cbfunc</a> func=NULL,] 
            <a href="string.htm">string</a> attributes="", <a href="sequence.htm">sequence</a> data={})
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>
            Creates an interface element that is a canvas - a working area for your application.
            <br>
            <br>
            action: name of the action generated when the canvas needs to be redrawn. It can be NULL.
            A typecheck error occurs if it is not NULL and not a string.<br>
            func: a callback address, usually specified as <a href="Icallback.htm">Icallback</a>(<i>"name"</i>).<br>
            For more information on the attributes and data parameters see <a href="IupSetAttributes.htm">IupSetAttributes</a>.<br>
            This is a <a href="paranormal.htm">paranormalised function</a>.
            <br>
            <br>
            Returns the identifier of the created element.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Notes:</b>
         </td>
         <td>
            Note that some keys might remove the focus from the canvas. 
            To avoid this, return <a href="callbacks.htm#IUP_IGNORE">IUP_IGNORE</a> in the <a href="callbacks.htm#K_ANY">K_ANY</a> callback. 
            <br>
            <br>
            The mouse cursor position can be programmatically controlled using the global attribute CURSORPOS.
            <br>
            <br>
            Drag & Drop attributes and callbacks are supported. 
            <br>
            <br>
            When the canvas is displayed for the first time, the callback call order is always:
            <br>
            <br>
            <a href="callbacks.htm#MAP_CB">MAP_CB</a><br>
            <a href="callbacks.htm#RESIZE_CB">RESIZE_CB</a><br>
            <a href="#ACTION">ACTION</a>
            <br>
            <br>
            When the canvas is resized the <a href="#ACTION">ACTION</a> callback is always called after the <a href="callbacks.htm#RESIZE_CB">RESIZE_CB</a> callback.
            <br>
            <br>
            <h4>Using with the CD library</h4>
            <br>
            When using the CD library to draw in a IupCanvas, you can use the callbacks to manage the canvas. The simplest way is to do:
            <br>
            <br>
            <a href="callbacks.htm#MAP_CB">MAP_CB</a> - calls cdCreateCanvas  (current size is not available yet)<br>
            <a href="callbacks.htm#UNMAP_CB">UNMAP_CB</a> - calls cdKillCanvas<br>
            <a href="callbacks.htm#RESIZE_CB">RESIZE_CB</a> - Calling cdCanvasActivate and cdCanvasGetSize returns the same values as given by the callback parameters.
                        Recalculate the drawing size, update the scrollbars if any.<br>
            <a href="#ACTION">ACTION</a> - calls cdCanvasActivate then use CD primitives to draw the scene, finally calls cdCanvasFlush if using double buffer<br>
            <a href="callbacks.htm#SCROLL_CB">SCROLL_CB</a> - when using scrollbars, if this callback is defined the canvas must be manually redrawn,
                        call yourself the action callback or call <a href="IupUpdate.htm">IupUpdate</a>.
                        In other words, if this callback is not defined 
                        the canvas is automatically redrawn.<br>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Attributes:</b>
         </td>
         <td>
            
         </td>
        </tr>
        <tr>
         <td valign=top>
          BACKINGSTORE
         </td>
         <td>
            [Motif Only]: Controls the canvas backing store flag. The default value is "YES".
         </td>
        </tr>
        <tr>
         <td valign=top>
          <a href="common.htm#BGCOLOR">BGCOLOR</a>
         </td>
         <td>
            Background color. The background is painted only if the <a href="#ACTION">ACTION</a> callback is not defined. <br>
            If the callback is defined the application must draw all the canvas contents. <br>
            In GTK or Motif if you set the <a href="#ACTION">ACTION</a> callback after map then you should also set BGCOLOR to any value just after 
            setting the callback or the first redraw will be lost. Default: "255 255 255".
         </td>
        </tr>
        <tr>
         <td valign=top>
          BORDER
         </td>
         <td>
            (creation only): Shows a border around the canvas. Default: "YES".
         </td>
        </tr>
        <tr>
         <td valign=top>
          CANFOCUS
         </td>
         <td>
            (creation only) (non inheritable): enables the focus traversal of the control. In Windows the canvas will respect CANFOCUS in opposite to the other controls. Default: YES. (since 3.0)
         </td>
        </tr>
        <tr>
         <td valign=top>
          CAIRO_CR
         </td>
         <td>
            [GTK Only] (non inheritable): Contains the "cairo_t*" parameter of the internal GTK callback. <br>
            Valid only during the <a href="#ACTION">ACTION</a> callback and onyl when using GTK version 3. (since 3.7)
         </td>
        </tr>
        <tr>
         <td valign=top>
          CLIPRECT
         </td>
         <td>
            [Windows and GTK Only] (only during <a href="#ACTION">ACTION</a>): Specifies a rectangle that has its region invalidated for painting, 
            it could be used for clipping. Format: "%d %d %d %d"="x1 y1 x2 y2".
         </td>
        </tr>
        <tr>
         <td valign=top>
          <a href="common.htm#CURSOR">CURSOR</a>
         </td>
         <td>
            (non inheritable): Defines a cursor for the canvas. The Windows SDK recommends that cursors and icons should be implemented as resources rather than created at run time.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <a href="common.htm#EXPAND">EXPAND</a>
         </td>
         <td>
            (non inheritable): The default value is "YES". The natural size is the size of 1 character.
         </td>
        </tr>
        <tr>
         <td valign=top>
          DROPFILESTARGET
         </td>
         <td>
            [Windows and GTK Only] (non inheritable): Enable or disable the drop of files. Default: NO, but if DROPFILES_CB is defined when the element is mapped then it will be automatically enabled.
         </td>
        </tr>
        <tr>
         <td valign=top>
          DRAWSIZE
         </td>
         <td>
            (non inheritable): The size of the drawing area in pixels. This size is also used in the <a href="callbacks.htm#RESIZE_CB">RESIZE_CB</a> callback.
          <br>
            Notice that the drawing area size is not the same as <a href="common.htm#RASTERSIZE">RASTERSIZE</a>.
            The <a href="common.htm#SCROLLBAR">SCROLLBAR</a> and BORDER attributes affect the size of the drawing area.
         </td>
        </tr>
        <tr>
         <td valign=top>
          HDC_WMPAINT
         </td>
         <td>
            [Windows Only] (non inheritable): Contains the HDC created with the BeginPaint inside the WM_PAINT message. <br>
            Valid only during the <a href="#ACTION">ACTION</a> callback.
         </td>
        </tr>
        <tr>
         <td valign=top>
          HWND
         </td>
         <td>
            [Windows Only] (non inheritable, read-only): Returns the Windows Window handle. Available in the Windows driver or in the GTK driver in Windows.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <a href="common.htm#SCROLLBAR">SCROLLBAR</a>
         </td>
         <td>
            (creation only): Associates a horizontal and/or vertical scrollbar to the canvas. Default: "NO". 
            The <a href="common.htm#secondaryattributes">secondary attributes</a> are all non inheritable.
         </td>
        </tr>
        <tr>
         <td valign=top>
          TOUCH
         </td>
         <td>
            [Windows 7 Only]: enable the multi-touch events processing. (Since 3.3)
         </td>
        </tr>
        <tr>
         <td valign=top>
          XDISPLAY
         </td>
         <td>
            [UNIX Only](non inheritable, read-only): Returns the X-Windows Display. Available in the Motif driver or in the GTK driver in UNIX.
         </td>
        </tr>
        <tr>
         <td valign=top>
          XWINDOW
         </td>
         <td>
            [UNIX Only](non inheritable, read-only): Returns the X-Windows Window (Drawable). Available in the Motif driver or in the GTK driver in UNIX.
         </td>
        </tr>
        <tr>
         <td valign=top>
          also
         </td>
         <td>
            <a href="common.htm#ACTIVE">ACTIVE</a>, 
            <a href="common.htm#FONT">FONT</a>, 
            <a href="common.htm#SCREENPOSITION">SCREENPOSITION</a>, 
            <a href="common.htm#POSITION">POSITION</a>, 
            <a href="common.htm#MINSIZE">MINSIZE</a>, 
            <a href="common.htm#MAXSIZE">MAXSIZE</a>,
            <a href="common.htm#WID">WID</a>,
            <a href="common.htm#TIP">TIP</a>, 
            <a href="common.htm#SIZE">SIZE</a>,
            <a href="common.htm#RASTERSIZE">RASTERSIZE</a>,
            <a href="common.htm#ZORDER">ZORDER</a>,
            <a href="common.htm#VISIBLE">VISIBLE</a>: also accepted.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Callbacks:</b>
         </td>
         <td>
            <br>
              <a name=ACTION></a>
         </td>
        </tr>
        <tr>
         <td valign=top>
          ACTION
         </td>
         <td>
            Action generated when the canvas needs to be redrawn.
            <br>
            <br>
            function action_cb(<a href="Ihandle.htm">Ihandle</a> ih, <a href="atom.htm">atom</a> posx, posy)<br>
            ih: identifier of the element that activated the event.<br>
            posx: thumb position in the horizontal scrollbar. The POSX attribute value.<br>
            posy: thumb position in the vertical scrollbar. The POSY attribute value.
            <a name=BUTTON_CB></a>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <a href="callbacks.htm#BUTTON_CB">BUTTON_CB</a>
         </td>
         <td>
            Action generated when any mouse button is pressed or released.
         </td>
        </tr>
        <tr>
         <td valign=top>
          DROPFILES_CB
         </td>
         <td>
            [Windows and GTK Only]: Action generated when one or more files are dropped in the element.
            <br>
              <a name=FOCUS_CB></a>
         </td>
        </tr>
        <tr>
         <td valign=top>
          FOCUS_CB
         </td>
         <td>
            Called when the canvas gets or looses the focus. 
            It is called after the common callbacks <a href="callbacks.htm#GETFOCUS_CB">GETFOCUS_CB</a> and <a href="callbacks.htm#KILLFOCUS_CB">KILLFOCUS_CB</a>.
            <br>
            <br>
            function focus_cb(<a href="Ihandle.htm">Ihandle</a> ih, <a href="integer.htm">integer</a> focus)<br>
            ih: identifier of the element that activated the event.<br>
            focus: is non zero if the canvas is getting the focus, is zero if it is loosing the focus.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <a href="callbacks.htm#MOTION_CB">MOTION_CB</a>
         </td>
         <td>
            Action generated when the mouse is moved.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <a href="callbacks.htm#KEYPRESS_CB">KEYPRESS_CB</a>
         </td>
         <td>
            Action generated when a key is pressed or released. It is called after the common callback <a href="callbacks.htm#K_ANY">K_ANY</a>.
            <br>
            <br>
            When the canvas has the focus, pressing the arrow keys may change the focus to another control in some systems. <br>
            If your callback process the arrow keys, we recommend you to return <a href="callbacks.htm#IUP_IGNORE">IUP_IGNORE</a> so it will not lose its focus.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <a href="callbacks.htm#RESIZE_CB">RESIZE_CB</a>
         </td>
         <td>
            Action generated when the canvas size is changed. 
         </td>
        </tr>
        <tr>
         <td valign=top>
          <a href="callbacks.htm#SCROLL_CB">SCROLL_CB</a>
         </td>
         <td>
            Called when the scrollbar is manipulated. (GTK 2.8) Also the POSX and POSY values will not be correctly updated for older GTK versions.
         </td>
        </tr>
        <tr>
         <td valign=top>
          TOUCH_CB
         </td>
         <td>
            [Windows 7 Only]: Action generated when a touch event occurred. Multiple touch events will trigger several calls. Must set TOUCH=Yes to receive this event. (Since 3.3)
            <br>
            <br>
            function touch_cb(<a href="Ihandle.htm">Ihandle</a> ih, <a href="integer.htm">integer</a> id, x, y, <a href="atom.htm">atom</a> pState)<br>
            ih: identifies the element that activated the event.<br>
            id: identifies the touch point. <br>
            x, y: position in pixels, relative to the top-left corner of the canvas.<br>
            pState: the touch point state (char*). Can be: DOWN, MOVE or UP. If the point is a "primary" point then "-PRIMARY" is appended to the string.
            <br>
            <br>
            Returns: <a href="callbacks.htm#IUP_CLOSE">IUP_CLOSE</a> will be processed.
         </td>
        </tr>
        <tr>
         <td valign=top>
          MULTITOUCH_CB
         </td>
         <td>
            [Windows 7 Only]: Action generated when multiple touch events occurred. Must set TOUCH=Yes to receive this event. (Since 3.3)
            <br>
            <br>
            function mulittouch_cb(<a href="Ihandle.htm">Ihandle</a> ih, <a href="integer.htm">integer</a> count, <a href="atom.htm">atom</a> pid, px, py, pstate) <br>
            ih: identifier of the element that activated the event.<br>
            count: Number of touch points in the array.<br>
            pid: Array (int*) of touch point ids.<br>
            px: Array (int*) of touch point x coordinates in pixels, relative to the top-left corner of the canvas.<br>
            py: Array (int*) of touch point y coordinates in pixels, relative to the top-left corner of the canvas.<br>
            pstate: Array (int*) of touch point states. Can be 'D' (DOWN), 'U' (UP) or 'M' (MOVE).
            <br>
            <br>
            Returns: <a href="callbacks.htm#IUP_CLOSE">IUP_CLOSE</a> will be processed.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <a href="callbacks.htm#WHEEL_CB">WHEEL_CB</a>
         </td>
         <td>
            Action generated when the mouse wheel is rotated.
         </td>
        </tr>
        <tr>
         <td valign=top>
          WOM_CB
         </td>
         <td>
            [Windows Only]: Action generated when an audio device receives an event.
         </td>
        </tr>
        <tr>
         <td valign=top>
          also
         </td>
         <td>
            <a href="callbacks.htm#MAP_CB">MAP_CB</a>,
            <a href="callbacks.htm#UNMAP_CB">UNMAP_CB</a>,
            <a href="callbacks.htm#DESTROY_CB">DESTROY_CB</a>, 
            <a href="callbacks.htm#GETFOCUS_CB">GETFOCUS_CB</a>, 
            <a href="callbacks.htm#KILLFOCUS_CB">KILLFOCUS_CB</a>, 
            <a href="callbacks.htm#ENTERWINDOW_CB">ENTERWINDOW_CB</a>,
            <a href="callbacks.htm#LEAVEWINDOW_CB">LEAVEWINDOW_CB</a>, 
            <a href="callbacks.htm#K_ANY">K_ANY</a>, 
            <a href="callbacks.htm#HELP_CB">HELP_CB</a>: All common callbacks are supported.
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
