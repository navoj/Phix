<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">For Statement</h1>
      <div id="mainSection">
         A
        <font color="#030303">
         <b>for statement</b>
        </font> sets up a special loop with a controlling
        <font color="#030303">
         <b>loop variable</b>
        </font>
         that runs from an initial value up or down to some final value. e.g.
<!--eucode>
    for i=1 to 10 do
        ? i   -- ? is a short form for print()
    end for
    for i=10 to 20 by 3 do
        for j=20 to 10 by -2 do  -- counting down
            ? {i, j}
        end for
    end for
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">    for</font><font color="#000000"> i</font><font color="#0000FF">=</font><font color="#000000">1</font><font color="#008080"> to</font><font color="#000000"> 10</font><font color="#008080"> do
</font><font color="#0000FF">        ?</font><font color="#000000"> i  </font><font color="#000080"><i> -- ? is a short form for print()
</i></font><font color="#008080">    end for
    for</font><font color="#000000"> i</font><font color="#0000FF">=</font><font color="#000000">10</font><font color="#008080"> to</font><font color="#000000"> 20</font><font color="#008080"> by</font><font color="#000000"> 3</font><font color="#008080"> do
        for</font><font color="#000000"> j</font><font color="#0000FF">=</font><font color="#000000">20</font><font color="#008080"> to</font><font color="#000000"> 10</font><font color="#008080"> by</font><font color="#0000FF"> -</font><font color="#000000">2</font><font color="#008080"> do </font><font color="#000080"><i> -- counting down
</i></font><font color="#0000FF">            ? {</font><font color="#000000">i</font><font color="#0000FF">,</font><font color="#000000"> j</font><font color="#0000FF">}
</font><font color="#008080">        end for
    end for</font>
</pre>
         If the
        <font color="#030303">
         <b>loop variable</b>
        </font> has already been
         declared it persists after the loop and can be inspected for a termination
         value, otherwise it is declared automatically and only exists until the end of
         the loop. In the latter case, outside of the loop the variable has no value and 
         is not even declared. The compiler does not allow assignment to a loop variable. 
         The initial value, loop limit and increment must all be integers. 
         If no increment is specified then +1 is assumed. The limit and increment values 
         are established when the loop is entered, and are not affected by anything that
         happens during the execution of the loop. See also
        <a href="scope.htm#scope">scope of the loop variable</a>.
       <br>
       <br>
        An "illegal construct" error occurs if the end for statement is immediately preceded by an unconditional exit - use an <a href="if.htm">if</a> construct instead.
       <br>
       <br>
        Compatibility Note: RDS Eu and OpenEuphoria allow floating point for loops, which Phix does not. <br>
        However, quite often they do not work as anticipated (in Eu/OE), for example:
<!--eucode>
    NB: this is NOT supported in Phix, but showing what RDS Eu/OpenEuphoria both do:
    for x=1.7 to 1.9 by 0.1 do ?x end for   -- prints 1.7,1.8
    for x=9.7 to 9.9 by 0.1 do ?x end for   -- prints 9.7,9.8,9.9
</eucode-->
<pre>
<font color="#000000">    NB</font><font color="#0000FF">:</font><font color="#000000"> this is NOT supported in Phix</font><font color="#0000FF">,</font><font color="#000000"> but showing what RDS Eu</font><font color="#0000FF">/</font><font color="#000000">OpenEuphoria both</font><font color="#008080"> do</font><font color="#0000FF">:
</font><font color="#008080">    for</font><font color="#000000"> x</font><font color="#0000FF">=</font><font color="#000000">1.7</font><font color="#008080"> to</font><font color="#000000"> 1.9</font><font color="#008080"> by</font><font color="#000000"> 0.1</font><font color="#008080"> do</font><font color="#0000FF"> ?</font><font color="#000000">x</font><font color="#008080"> end for  </font><font color="#000080"><i> -- prints 1.7,1.8
</i></font><font color="#008080">    for</font><font color="#000000"> x</font><font color="#0000FF">=</font><font color="#000000">9.7</font><font color="#008080"> to</font><font color="#000000"> 9.9</font><font color="#008080"> by</font><font color="#000000"> 0.1</font><font color="#008080"> do</font><font color="#0000FF"> ?</font><font color="#000000">x</font><font color="#008080"> end for  </font><font color="#000080"><i> -- prints 9.7,9.8,9.9</i></font>
</pre>
        I have not analysed why that specific case happens, and have no desire to replicate it.<br>
        Besides, it is trivial to use a predictable integer loop variable alongside a manually incremented/decremented atom to achieve the required effect, 
        and that is certainly easier than at least one technique to ensure the desired number of iterations occur that I have seen more than once in Eu/OE: 
        adjusting limit by a "step/2 fudge factor".
       <br>
       <br>
        See also: <a href="accuracy.htm">Floats Are Not Exact</a>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
