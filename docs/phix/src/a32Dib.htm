<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">a32Dib</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
          a32Dib <i>identifier</i>
          <br>
          <i>-- or --</i>
          <br>
          integer i = a32Dib(object x)
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>This serves to define the a32Dib type. You <a href="usingtypes.htm#can">can</a> also call it like an ordinary function to determine if an object is an a32Dib.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Comments:</b>
         </td>
         <td>
            An arwen32dib bitmap is a <a href="sequence.htm">sequence</a> of length 7:
            <ul>
                <li><code>dib[DibHandle]</code> is the bitmap handle (integer) you can use in arwen and Windows API routines.
                <li><code>dib[DibMemory]</code> is the address (atom) of the memory block of the bitmap.
                <li><code>dib[DibWidth]</code> is the width of the bitmap in pixels.
                <li><code>dib[DibHeight]</code> is the height of the bitmap in pixels.
                <li><code>dib[DibBytesPerLine]</code> is the bytes required per line of the bitmap.
                <li><code>dib[DibBytesTotal]</code> is the total size in bytes of the bitmap.
                <li><code>dib[DibPadding]</code> is the number of bytes of padding after each scanline.
            </ul>
            Variables declared with the user defined type a32Dib can be used to store the above.
            <br>
            <br>
            When invoked as a function, returns 1 if x is an a32Dib otherwise returns 0.
            <br>
            <br>
            Some routines, such as newDib, can fail and return 0, hence there is another user defined type, <b>a32Dib0</b>, which allows 0 
            or the above. Provided you have appropriate error handling in place (ie a test for 0) you can instead store the result 
            of newDib (etc) in an a32Dib0 variable, rather than terminate the application with a run-time typecheck error. If you do 
            not have said test, a typecheck is slightly preferrable to an attempt to subscript an atom, so a32Dib is the better choice.
            You can of course store arwen32dib bitmaps in a variable declared as an object or a <a href="sequence.htm">sequence</a>, or indeed in an element of a 
            <a href="sequence.htm">sequence</a>, if for some reason you do not want to perform any potentially helpful safety checks. 
            <br>
            <br>
            Any performance overhead from type checking is likely to be neglible compared to the number of pixels being processed.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
a32Dib dib
dib = newDib(300, 200)             -- create a bitmap
</eucode-->
<pre>
<font color="#000000"></font><font color="#004080">a32Dib</font><font color="#000000"> dib
dib</font><font color="#0000FF"> =</font><font color="#5E005E"> newDib</font><font color="#0000FF">(</font><font color="#000000">300</font><font color="#0000FF">,</font><font color="#000000"> 200</font><font color="#0000FF">)            </font><font color="#000080"><i> -- create a bitmap</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="a32Colour.htm">a32Colour</a>
         </td>
        </tr>
       </table>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
