<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">curl_share_setopt</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
          include builtins\libcurl.e
          <br>
          <br>
          <a href="CURLcode.htm#CURLSHcode">CURLSHcode</a> res = curl_share_setopt(<a href="atom.htm">atom</a> share,
                                                                                   <a href="#CURLSHoption">CURLSHoption</a> option,
                                                                                   <a href="atom.htm">atom</a> param)
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>
            Set options for a shared object.
            <br>
            <br>
            Set the option to parameter for the given share.
            <br>
            <br>
            Return value <a href="CURLcode.htm#CURLSHE_OK">CURLSHE_OK</a> (zero) means that the option was set properly, 
            non-zero means an error occurred (see <a href="CURLcode.htm#CURLSHcode">CURLSHcode</a>).
          <small><br><a name="CURLSHoption"></a></small>
         </td>
        </tr>

        <tr>
         <td valign=top>
          <b>CURLSHoption</b>
         </td>
         <td>
            CURLSHoption is one of the following:
          <small><br><a name="CURLSHOPT_LOCKFUNC"></a></small>
         </td>
        </tr>
        <tr>
         <td valign=top>
          CURLSHOPT_LOCKFUNC
         </td>
         <td>
            The param must be a call_back function matching the following prototype:
            <br>
            <br>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-b5aj-4273-937k-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-b5aj-4273-937k-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
function lock_function(atom handle, curl_share_data data, curl_lock_access access, atom userptr)
    return 0 -- (the return value is ignored)
end function
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">function</font><font color="#000000"> lock_function</font><font color="#0000FF">(</font><font color="#004080">atom</font><font color="#000000"> handle</font><font color="#0000FF">,</font><font color="#5E005E"> curl_share_data</font><font color="#000000"> data</font><font color="#0000FF">,</font><font color="#5E005E"> curl_lock_access</font><font color="#000000"> access</font><font color="#0000FF">,</font><font color="#004080"> atom</font><font color="#000000"> userptr</font><font color="#0000FF">)
</font><font color="#008080">    return</font><font color="#000000"> 0</font><font color="#000080"><i> -- (the return value is ignored)
</i></font><font color="#008080">end function</font>
</pre>
             </div>
            </div>
           </div>
          </div>
            <br>
            data defines what data libcurl wants to lock (see <a href="#curl_share_data">curl_share_data</a>), 
            and you must make sure that only one lock is given at any time for each kind of data.
            <br>
            <br>
            access defines what access type libcurl wants, shared or single (see <a href="#curl_lock_access">curl_lock_access</a>).
            <br>
            <br>
            userptr is the pointer you set with <a href="#CURLSHOPT_USERDATA">CURLSHOPT_USERDATA</a>.
          <small><br><a name="CURLSHOPT_UNLOCKFUNC"></a></small>
         </td>
        </tr>
        <tr>
         <td valign=top>
          CURLSHOPT_UNLOCKFUNC
         </td>
         <td>
            The param must be a call_back function matching the following prototype:
            <br>
            <br>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-b5aj-4273-937k-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-b5aj-4273-937k-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
function unlock_function(atom handle, curl_share_data data, atom userptr)
    return 0 -- (the return value is ignored)
end function
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">function</font><font color="#000000"> unlock_function</font><font color="#0000FF">(</font><font color="#004080">atom</font><font color="#000000"> handle</font><font color="#0000FF">,</font><font color="#5E005E"> curl_share_data</font><font color="#000000"> data</font><font color="#0000FF">,</font><font color="#004080"> atom</font><font color="#000000"> userptr</font><font color="#0000FF">)
</font><font color="#008080">    return</font><font color="#000000"> 0</font><font color="#000080"><i> -- (the return value is ignored)
</i></font><font color="#008080">end function</font>
</pre>
             </div>
            </div>
           </div>
          </div>
            <br>
            data defines what data libcurl wants to unlock (see <a href="#curl_share_data">curl_share_data</a>), 
            and you must make sure that only one lock is given at any time for each kind of data.
            <br>
            <br>
            userptr is the pointer you set with <a href="#CURLSHOPT_USERDATA">CURLSHOPT_USERDATA</a>.
          <small><br><a name="CURLSHOPT_SHARE"></a></small>
         </td>
        </tr>
        <tr>
         <td valign=top>
          CURLSHOPT_SHARE
         </td>
         <td>
            The parameter specifies a type of data that should be shared. See <a href="#curl_share_data">curl_share_data</a>.
          <small><br><a name="CURLSHOPT_UNSHARE"></a></small>
         </td>
        </tr>
        <tr>
         <td valign=top>
          CURLSHOPT_UNSHARE
         </td>
         <td>
            This option does the opposite of <a href="#CURLSHOPT_SHARE">CURLSHOPT_SHARE</a>.<br>
            It specifies that the specified parameter will no longer be shared. <br>
            Valid values are the same as those for CURLSHOPT_SHARE (see <a href="#curl_share_data">curl_share_data</a>).
          <small><br><a name="CURLSHOPT_USERDATA"></a></small>
         </td>
        </tr>
        <tr>
         <td valign=top>
          CURLSHOPT_USERDATA
         </td>
         <td>
            The parameter allows you to specify a pointer to data that will be passed to the lock_function and unlock_function each time it is called.
          <small><br><a name="curl_share_data"></a></small>
         </td>
        </tr>

        <tr>
         <td valign=top>
          <b>curl_share_data</b>
         </td>
         <td>
            curl_share_data is one of the following:
          <small><br><a name="CURL_LOCK_DATA_COOKIE"></a></small>
         </td>
        </tr>
        <tr>
         <td valign=top>
          CURL_LOCK_DATA_COOKIE
         </td>
         <td>
            Cookie data will be shared across the easy handles using this shared object.
          <small><br><a name="CURL_LOCK_DATA_DNS"></a></small>
         </td>
        </tr>
        <tr>
         <td valign=top>
          CURL_LOCK_DATA_DNS
         </td>
         <td>
            Cached DNS hosts will be shared across the easy handles using this shared object. <br>
            Note that when you use the multi interface, all easy handles added to the same multi handle will share DNS cache by default without this having to be used!
          <small><br><a name="CURL_LOCK_DATA_SSL_SESSION"></a></small>
         </td>
        </tr>
        <tr>
         <td valign=top>
          CURL_LOCK_DATA_SSL_SESSION
         </td>
         <td>
            SSL session IDs will be shared across the easy handles using this shared object. <br>
            This will reduce the time spent in the SSL handshake when reconnecting to the same server. <br>
            Note SSL session IDs are reused within the same easy handle by default. <br>
            Note this symbol was added in 7.10.3 but was not implemented until 7.23.0.
          <small><br><a name="CURL_LOCK_DATA_CONNECT"></a></small>
         </td>
        </tr>
        <tr>
         <td valign=top>
          CURL_LOCK_DATA_CONNECT
         </td>
         <td>
            Put the connection cache in the share object and make all easy handles using this share object share the connection cache. <br>
            Using this, you can for example do multi-threaded libcurl use with one handle in each thread, and yet have a shared pool of 
            unused connections and this way get way better connection re-use than if you use one separate pool in each thread.
            <br>
            <br>
            Connections that are used for HTTP/1.1 Pipelining or HTTP/2 multiplexing only get additional transfers added to them if 
            the existing connection is held by the same multi or easy handle. <br>
            libcurl does not support doing HTTP/2 streams in different threads using a shared connection.
            <br>
            <br>
            Support for CURL_LOCK_DATA_CONNECT was added in 7.57.0, but the symbol existed before this.
          <small><br><a name="XXX"></a></small>
         </td>
        </tr>

        <tr>
         <td valign=top>
          <b>curl_lock_access</b>
         </td>
         <td>
            curl_lock_access is one of the following:
          <small><br><a name="CURL_LOCK_ACCESS_SHARED"></a></small>
         </td>
        </tr>
        <tr>
         <td valign=top>
          CURL_LOCK_ACCESS_SHARED
         </td>
         <td>
            for read perhaps
          <small><br><a name="CURL_LOCK_ACCESS_SINGLE"></a></small>
         </td>
        </tr>
        <tr>
         <td valign=top>
          CURL_LOCK_ACCESS_SINGLE
         </td>
         <td>
            for write perhaps
         </td>
        </tr>

        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="curl_share_cleanup.htm">curl_share_cleanup</a>,
          <a href="curl_share_init.htm">curl_share_init</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
