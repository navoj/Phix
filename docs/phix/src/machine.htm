<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Machine Level Interface</h1>
      <div id="mainSection">
        We have grouped here a number of routines that you can use to access your machine at a low-level. <br>
        With this low-level machine interface you can read and write to memory. <br>
        You can also set up your own machine language routines and call them.
       <br>
       <br>
        Some of the routines listed below are unsafe, in the sense that phix
        cannot protect you if you use them incorrectly. You could crash your
        program or even your system. 
        <br>
        <br>
        Under Windows, the operating system will usually pop up a termination box 
        giving a diagnostic message plus register information. <br>
        Under Linux you will typically get a segmentation violation.
       <dl>
        <dt>
         <a name=safe></a>
         <b>
          <font color="navy">Note:</font>
         </b>
         <dd>
         To assist programmers in debugging code involving these unsafe routines,
         we have supplied [DEV (safe.e)]
          <font color="#5500FF">
           <b>safe.e</b>
          </font>, an alternative to
          <font color="#5500FF">
           <b>machine.e</b>
          </font>. If you copy
          <font color="#5500FF">
           <b>euphoria\include\safe.e</b>
          </font> into the directory containing your program, and you rename
          <font color="#5500FF">
           <b>safe.e</b>
          </font> as
          <font color="#5500FF">
           <b>machine.e</b>
          </font> 
         in that directory, your program will run using safer 
         (but slower) versions of these low-level
         routines.
          <font color="#5500FF">
           <b>safe.e</b>
          </font> can catch many errors, such as poking into a bad memory location.
         See the comments at the top of safe.e for complete instructions on
         how to use it. When using a package such as
          <b>Win32Lib</b> that 
         does not use the <a href="allocate.htm">allocate</a>() function, you can only make limited use of
          <font color="#5500FF">
           <b>safe.e</b>
          </font>.
          <!-- autoclosed:dt,dd-->
         </dd>
        </dt>
       </dl>
        These machine-level-interface routines are important because they allow phix programmers
         to access low-level features of the hardware and operating system.<br>
         For some applications this is essential.
       <br>
       <br>
         Machine code routines can be written by hand, or taken from the
         disassembled output of a compiler for C or some other language.
        There are many examples of inline assembly needed for the phix
        runtime, perhaps the simplest of which is builtins\VM\pLen.e
        which implements the length() function.
         Remember that your machine code will be running in 32-bit protected
         mode. See
        <font color="#5500FF">
         <b>demo\dos32\callmach.ex</b>
        </font>
         for an example.
       <br>
        &nbsp;
       <br>
        <table>
        <col style="width: 5%"/>
         <tr>
          <td valign=top>
           <a href="peek.htm">
            <b>peek</b>
           </a>
          </td>
          <td width=10 align=center valign=top>-</td>
          <td>read one or more bytes from memory</td>
         </tr>
         <tr>
          <td valign=top>
           <a href="poke.htm">
            <b>poke</b>
           </a>
          </td>
          <td width=10 align=center valign=top>-</td>
          <td>write one or more bytes to memory</td>
         </tr>
         <tr>
          <td valign=top>
           <a href="mem_copy.htm">
            <b>mem_copy</b>
           </a>
          </td>
          <td width=10 align=center valign=top>-</td>
          <td>copy a block of memory</td>
         </tr>
         <tr>
          <td valign=top>
           <a href="mem_set.htm">
            <b>mem_set</b>
           </a>
          </td>
          <td width=10 align=center valign=top>-</td>
          <td>set a block of memory to a value</td>
         </tr>
         <tr>
          <td valign=top>
           <a href="call.htm">
            <b>call</b>
           </a>
          </td>
          <td width=10 align=center valign=top>-</td>
          <td>call a machine language routine</td>
         </tr>
         <tr>
          <td valign=top>
           <a href="allocate.htm">
            <b>allocate</b>
           </a>
          </td>
          <td width=10 align=center valign=top>-</td>
          <td>allocate a block of memory</td>
         </tr>
         <tr>
          <td valign=top>
           <a href="free.htm">
            <b>free</b>
           </a>
          </td>
          <td width=10 align=center valign=top>-</td>
          <td>deallocate a block of memory</td>
         </tr>
         <tr>
          <td valign=top>
           <a href="allocate_string.htm">
            <b>allocate_string</b>
           </a>
          </td>
          <td width=10 align=center valign=top>-</td>
          <td>allocate a string of characters with 0 terminator</td>
         </tr>
         <tr>
          <td valign=top>
           <a href="register_block.htm">
            <b>register_block</b>
           </a>
          </td>
          <td width=10 align=center valign=top>-</td>
          <td>register an externally-allocated block of memory</td>
         </tr>
         <tr>
          <td valign=top>
           <a href="unregister_block.htm">
            <b>unregister_block</b>
           </a>
          </td>
          <td width=10 align=center valign=top>-</td>
          <td>unregister an externally-allocated block of memory</td>
         </tr>
         <tr>
          <td valign=top>
           <a href="int_to_bytes.htm">
            <b>int_to_bytes</b>
           </a>
          </td>
          <td width=10 align=center valign=top>-</td>
          <td>convert an integer to 4 bytes</td>
         </tr>
         <tr>
          <td valign=top>
           <a href="bytes_to_int.htm">
            <b>bytes_to_int</b>
           </a>
          </td>
          <td width=10 align=center valign=top>-</td>
          <td>convert 4 bytes to an integer</td>
         </tr>
         <tr>
          <td valign=top>
           <a href="int_to_bits.htm">
            <b>int_to_bits</b>
           </a>
          </td>
          <td width=10 align=center valign=top>-</td>
          <td>convert an integer to a <a href="sequence.htm">sequence</a> of bits</td>
         </tr>
         <tr>
          <td valign=top>
           <a href="bits_to_int.htm">
            <b>bits_to_int</b>
           </a>
          </td>
          <td width=10 align=center valign=top>-</td>
          <td>convert a <a href="sequence.htm">sequence</a> of bits to an integer</td>
         </tr>
         <tr>
          <td valign=top>
           <a href="atom_to_floatNN.htm">
            <b>atom_to_floatNN</b>
           </a>
          </td>
          <td width=10 align=center valign=top>-</td>
          <td>convert an <a href="atom.htm">atom</a> to a <a href="sequence.htm">sequence</a> of 4/8/10 bytes in IEEE 32/64/80-bit floating-point format
          </td>
         </tr>
         <tr>
          <td valign=top>
           <a href="floatNN_to_atom.htm">
            <b>floatNN_to_atom</b>
           </a>
          </td>
          <td width=10 align=center valign=top>-</td>
          <td>convert a <a href="sequence.htm">sequence</a> of 4/8/10 bytes in IEEE 32/64/80-bit floating-point format, to an <a href="atom.htm">atom</a>
          </td>
         </tr>
         <tr>
          <td valign=top>
           <a href="set_rand.htm">
            <b>set_rand</b>
           </a>
          </td>
          <td width=10 align=center valign=top>-</td>
          <td>set the random number generator so it will generate a repeatable series of random numbers
          </td>
         </tr>
         <tr>
          <td valign=top>
           <a href="crash_file.htm">
            <b>crash_file</b>
           </a>
          </td>
          <td width=10 align=center valign=top>-</td>
          <td>specify the file for writing error diagnostics if phix detects an error in your program.
          </td>
         </tr>
         <tr>
          <td valign=top>
           <a href="crash_message.htm">
            <b>crash_message</b>
           </a>
          </td>
          <td width=10 align=center valign=top>-</td>
          <td>specify a message to be printed if phix detects an error in your program
          </td>
         </tr>
        </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
