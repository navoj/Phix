<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">utf32_to_utf8</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
          <a href="string.htm">string</a> utf8 = utf32_to_utf8(<a href="html/glossary.htm#dwordseq">dword_sequence</a> utf32, <a href="integer.htm">integer</a> fail_flag=0)
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>Convert a UTF-32 sequence to a UTF-8 string.
          <br>
          <br>
            Returns a <a href="string.htm">string</a>.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Comments:</b>
         </td>
         <td>
            The input should not contain any elements outside the range 0..#10FFFF, or values in the range #D800..#DFFF (since 
            that range is reserved, across the board, for UTF-16 surrogate pairs). Any such values will be replaced with the
            substring "\#EF\#BF\#BD".
            <br>
            <br>
            If the optional fail_flag is -1, the routine returns -1 rather than performing such substitutions (and obviously
            the result variable should be declared as type <a href="object.htm">object</a>).
            <br>
            <br>
            Note, however, the input can legally contain #FFFD, which maps directly to "\#EF\#BF\#BD" without error.
            <br>
            <br>
            If <a href="utf8_to_utf32.htm">utf8_to_utf32</a>() (or whatever) returned a string, because the original value was 
            pure-ascii (all characters 0..127), and nothing has been done to auto-expand it to a 
            <a href="html/glossary.htm#dwordseq">dword_sequence</a>, the resulting 
            value should <i><b>not</b></i> be passed back through utf32_to_utf8, and in fact attempts to do so will trigger a
            fatal error, unless fail_flag is non-0.
            <br>
            <br>
            Note that ExpandTabSpecials() in demo\edix\src\tabs.e inserts space-preserving #B7|#B6|#BB|#A7 marks and later
            uses <i>&lt;string chunk&gt;</i> = utf32_to_utf8(<i>&lt;string chunk&gt;</i>,+1) to convert those to the correct
            "\#C2\#B7"|"\#C2\#B6"|"\#C2\#BB"|"\#C2\#A7" before display; if chunk is not a string but utf32, it is perfectly 
            standard behaviour, and obviously when it is a string the +1 (in the fail_flag argument) prevents both the error 
            and the return of -1.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="utfconv.htm">utfconv</a>,
          <a href="utf8_to_utf32.htm">utf8_to_utf32</a>
         </td>
        </tr>
       </table>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
