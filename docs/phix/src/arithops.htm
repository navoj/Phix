<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Arithmetic Operators</h1>
      <div id="mainSection">
         The usual arithmetic operators are available: add, subtract, multiply,
         divide, unary minus, unary plus.
<!--eucode>
        3.5 + 3  -- 6.5
        3 - 5    -- -2
        6 * 2    -- 12
        7 / 2    -- 3.5
        -8.1     -- -8.1
        +8       -- +8
</eucode-->
<pre>
<font color="#000000">        3.5</font><font color="#0000FF"> +</font><font color="#000000"> 3 </font><font color="#000080"><i> -- 6.5
</i></font><font color="#000000">        3</font><font color="#0000FF"> -</font><font color="#000000"> 5   </font><font color="#000080"><i> -- -2
</i></font><font color="#000000">        6</font><font color="#0000FF"> *</font><font color="#000000"> 2   </font><font color="#000080"><i> -- 12
</i></font><font color="#000000">        7</font><font color="#0000FF"> /</font><font color="#000000"> 2   </font><font color="#000080"><i> -- 3.5
</i></font><font color="#0000FF">        -</font><font color="#000000">8.1    </font><font color="#000080"><i> -- -8.1
</i></font><font color="#0000FF">        +</font><font color="#000000">8      </font><font color="#000080"><i> -- +8</i></font>
</pre>
        <a name=inf_nan></a>
         Computing a result that is too big (i.e. outside of -1e308 to +1e308 on 32-bit, or -1e4932 to +1e4932 on 64-bit) will
         result in one of the special atoms
        <b>+infinity</b> or
        <b>-infinity</b>.
         These appear as
        <b>inf</b> or
        <b>-inf</b> when you print them out.
         It is also possible to generate
        <b>nan</b> or
        <b>-nan</b>.
         "nan" means "not a number", i.e. an undefined value (such as inf
         divided by inf). These values are defined in the IEEE
         floating-point standard. If
         you see one of these special values in your output, it usually indicates an
         error in your program logic, although generating inf as an intermediate
         result may be acceptable in some cases. For instance, 1/inf is 0, which may
         be the "right" answer for your algorithm.
       <br>
       <br>
         Division by zero, as well as bad arguments to math library routines, e.g.
         square root of a negative number, log of a non-positive number etc. cause an
         immediate error message and your program is aborted.
       <br>
       <br>
         The only reason that you might use unary plus is to emphasize to the reader
         of your program that a number is positive. The interpreter does not actually
         calculate anything for this.
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
