<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">IupVbox</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
            include pGUI.e
            <br>
            <br>
            <a href="Ihandle.htm">Ihandle</a> ih = IupVbox(<a href="Ihandle.htm">Ihandles</a> children={},
            <a href="string.htm">string</a> attributes="", <a href="sequence.htm">sequence</a> data={})
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>
            Creates a void container for composing elements vertically. It is a box that arranges the elements it contains from top to bottom.
            <br>
            <br>
            children: list of the elements that will be placed in the box. It can be empty.<br>
            For more information on the attributes and data parameters see <a href="IupSetAttributes.htm">IupSetAttributes</a>.
            <br>
            <br>
            It does not have a native representation.
            <br>
            <br>
            Returns: the identifier of the created element.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Notes:</b>
         </td>
         <td>
            The box can be created with no elements and filled dynamically using <a href="IupAppend.htm">IupAppend</a>() or <a href="IupInsert.htm">IupInsert</a>().
            <br>
            <br>
            The box will NOT expand its children, it will allow its children to expand according to the space left in the box parent. 
            So for the expansion to occur, the children must be expandable with <a href="common.htm#EXPAND">EXPAND</a>!=NO, and there must be room in the box parent.
            <br>
            <br>
            When translating C code, note that internally Phix only uses the C function IupVboxv, which accepts a single null-terminated list, 
            and does not use the variable-parameter C IupVbox function. It is perfectly legal (in Phix) to specify an empty list ({}) for the 
            children parameter, but not NULL. Also note that C code requires a trailing NULL, whereas in pGUI it makes no difference whether 
            one is present or not.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Attributes:</b>
         </td>
         <td>
            
         </td>
        </tr>
        <tr>
         <td valign=top>
          ALIGNMENT
         </td>
         <td>
            (non inheritable) Horizontally aligns the elements. Possible values: "ALEFT", "ACENTER", "ARIGHT". Default: "ALEFT".
         </td>
        </tr>
        <tr>
         <td valign=top>
          <a href="common.htm#EXPAND">EXPAND</a>
         </td>
         <td>
            (non inheritable) The default value is "YES". See the documentation of the attribute for <a href="common.htm#EXPAND">EXPAND</a> inheritance.
         </td>
        </tr>
        <tr>
         <td valign=top>
          EXPANDCHILDREN
         </td>
         <td>
            (non inheritable) forces all children to expand horizontally and to fully occupy its space available inside the box. Default: "NO". 
            This has the same effect as setting <a href="common.htm#EXPAND">EXPAND</a>=HORIZONTAL on each child. (since 3.0)
         </td>
        </tr>
        <tr>
         <td valign=top>
          GAP, CGAP
         </td>
         <td>
            Defines a vertical space in pixels between the children, CGAP is in the same units of the <a href="common.htm#SIZE">SIZE</a> attribute for the height. Default: "0". (CGAP since 3.0)
         </td>
        </tr>
        <tr>
         <td valign=top>
          NGAP, NCGAP
         </td>
         <td>
            (non inheritable) Same as GAP but are non inheritable. (since 3.0)
         </td>
        </tr>
        <tr>
         <td valign=top>
          HOMOGENEOUS
         </td>
         <td>
            (non inheritable) forces all children to get equal vertical space. The space height will be  based on the highest child. Default: "NO". Notice that this does not changes the children size, only the available space for each one of them to expand. (since 3.0)
         </td>
        </tr>
        <tr>
         <td valign=top>
          MARGIN, CMARGIN
         </td>
         <td>
            Defines a margin in pixels, CMARGIN is in the same units of the <a href="common.htm#SIZE">SIZE</a> attribute. Its value has the format "widthxheight", where width and height are integer values corresponding to the horizontal and vertical margins, respectively. Default: "0x0" (no margin). (CMARGIN since 3.0)
         </td>
        </tr>
        <tr>
         <td valign=top>
          NMARGIN, NCMARGIN
         </td>
         <td>
            (non inheritable) Same as MARGIN but are non inheritable. (since 3.0)
         </td>
        </tr>
        <tr>
         <td valign=top>
          NORMALIZESIZE
         </td>
         <td>
            (non inheritable) normalizes all children natural size to be the biggest natural size among them. All natural width will be set to the biggest width, and all natural height will be set to the biggest height according to is value. Can be NO, HORIZONTAL, VERTICAL or BOTH. Default: "NO". Same as using IupNormalizer. (since 3.0)
         </td>
        </tr>
        <tr>
         <td valign=top>
          <a href="common.htm#SIZE">SIZE</a> / <a href="common.htm#RASTERSIZE">RASTERSIZE</a>
         </td>
         <td>
            (non inheritable) Defines the height of the box. 
            When consulted behaves as the standard <a href="common.htm#SIZE">SIZE</a>/<a href="common.htm#RASTERSIZE">RASTERSIZE</a> attributes. 
            The standard format "wxh" can also be used, but width will be ignored (since 3.3).
         </td>
        </tr>
        <tr>
         <td valign=top>
          <a href="common.htm#WID">WID</a>
         </td>
         <td>
            (read-only) returns -1 if mapped.
         </td>
        </tr>
        <tr>
         <td valign=top>
          also
         </td>
         <td>
            <a href="common.htm#FONT">FONT</a>, 
            <a href="common.htm#POSITION">POSITION</a>, 
            <a href="common.htm#CLIENTSIZE">CLIENTSIZE</a>, 
            <a href="common.htm#CLIENTOFFSET">CLIENTOFFSET</a>, 
            <a href="common.htm#MINSIZE">MINSIZE</a>, 
            <a href="common.htm#MAXSIZE">MAXSIZE</a>: also accepted.
         </td>
        </tr>

        <tr>
         <td valign=top>
          <b>Attributes:</b>
         </td>
         <td>
            (at Children)
         </td>
        </tr>
        <tr>
         <td valign=top>
          EXPANDWEIGHT
         </td>
         <td>
            (non inheritable) (at children only) If a child defines the expand weight, then it is used to multiply the free space used for expansion. (since 3.1) 
         </td>
        </tr>
        <tr>
         <td valign=top>
          <a href="common.htm#FLOATING">FLOATING</a>
         </td>
         <td>
            (non inheritable) (at children only) If a child has FLOATING=YES then its size and position will be ignored by the layout processing. Default: "NO". (since 3.0)
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="IupHbox.htm">IupHbox</a>,
          <a href="IupZbox.htm">IupZbox</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
