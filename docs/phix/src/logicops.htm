<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Logical Operators</h1>
      <div id="mainSection">
         The logical operators
        <font color="#030303">
         <b>and</b>
        </font>,
        <font color="#030303">
         <b>or</b>
        </font>,
        <font color="#030303">
         <b>xor</b>
        </font>,
         and
        <font color="#030303">
         <b>not</b>
        </font>
         are used to determine the "truth" of an expression. e.g.
<!--eucode>
        1 and 1     -- 1 (true)
        1 and 0     -- 0 (false)
        0 and 1     -- 0 (false)
        0 and 0     -- 0 (false)
        1 or 1      -- 1 (true)
        1 or 0      -- 1 (true)
        0 or 1      -- 1 (true)
        0 or 0      -- 0 (false)
        1 xor 1     -- 0 (false)
        1 xor 0     -- 1 (true)
        0 xor 1     -- 1 (true)
        0 xor 0     -- 0 (false)
        not 1       -- 0 (false)
        not 0       -- 1 (true)
</eucode-->
<pre>
<font color="#000000">        1</font><font color="#008080"> and</font><font color="#000000"> 1    </font><font color="#000080"><i> -- 1 (true)
</i></font><font color="#000000">        1</font><font color="#008080"> and</font><font color="#000000"> 0    </font><font color="#000080"><i> -- 0 (false)
</i></font><font color="#000000">        0</font><font color="#008080"> and</font><font color="#000000"> 1    </font><font color="#000080"><i> -- 0 (false)
</i></font><font color="#000000">        0</font><font color="#008080"> and</font><font color="#000000"> 0    </font><font color="#000080"><i> -- 0 (false)
</i></font><font color="#000000">        1</font><font color="#008080"> or</font><font color="#000000"> 1     </font><font color="#000080"><i> -- 1 (true)
</i></font><font color="#000000">        1</font><font color="#008080"> or</font><font color="#000000"> 0     </font><font color="#000080"><i> -- 1 (true)
</i></font><font color="#000000">        0</font><font color="#008080"> or</font><font color="#000000"> 1     </font><font color="#000080"><i> -- 1 (true)
</i></font><font color="#000000">        0</font><font color="#008080"> or</font><font color="#000000"> 0     </font><font color="#000080"><i> -- 0 (false)
</i></font><font color="#000000">        1</font><font color="#008080"> xor</font><font color="#000000"> 1    </font><font color="#000080"><i> -- 0 (false)
</i></font><font color="#000000">        1</font><font color="#008080"> xor</font><font color="#000000"> 0    </font><font color="#000080"><i> -- 1 (true)
</i></font><font color="#000000">        0</font><font color="#008080"> xor</font><font color="#000000"> 1    </font><font color="#000080"><i> -- 1 (true)
</i></font><font color="#000000">        0</font><font color="#008080"> xor</font><font color="#000000"> 0    </font><font color="#000080"><i> -- 0 (false)
</i></font><font color="#008080">        not</font><font color="#000000"> 1      </font><font color="#000080"><i> -- 0 (false)
</i></font><font color="#008080">        not</font><font color="#000000"> 0      </font><font color="#000080"><i> -- 1 (true)</i></font>
</pre>
        Function-style equivalents of these operators can also be applied to <a href="sequence.htm">sequences</a>, as explained shortly in 
        <a href="seqops.htm">Sequence Operations</a>.
       <br>
       <br>
         In all cases
        <a href="shortcircuit.htm">
         <b>short-circuit</b>
        </a>
         evaluation is used for expressions containing
        <font color="#030303">
         <b>and</b>
        </font> or
        <font color="#030303">
         <b>or</b>
        </font>.
       <br>
       <br>
        The constants TRUE, True, true, FALSE, False, and false are automatically builtin to the phix compiler. There is
        no difference between the different cases, which makes for one less thing you have to remember.
       <br>
       <br>
        You may also find these operators applied to numbers other than 1 or 0. The rule is:
        zero means false and non-zero means true. So for instance, replacing variable names
        (which might make more sense) with literal values to show exactly what is going on:
<!--eucode>
        5 and -4    -- 1 (true)
        not 6       -- 0 (false)
</eucode-->
<pre>
<font color="#000000">        5</font><font color="#008080"> and</font><font color="#0000FF"> -</font><font color="#000000">4   </font><font color="#000080"><i> -- 1 (true)
</i></font><font color="#008080">        not</font><font color="#000000"> 6      </font><font color="#000080"><i> -- 0 (false)</i></font>
</pre>
        One could argue the above is relatively poor practice. The equivalent expressions "5!=0 and -4!=0" 
        and "6=0" yield the same results and (at least when using sensible variable names rather than those
        meaningless literals) can communicate the intent with greater clarity. If there are any cases where 
        the latter forms generate slightly less efficient code, that should be logged as a bug in the compiler. 
        There are, however, countless instances of this sort of practice in legacy code, far too many to ever 
        fully eradicate, especially given that attempts to do so are likely to introduce new bugs (even if 
        they are schrödinbugs<sup><small>1</small></sup>).
        <br>
        <br>
        One case worth mentioning is the popular idiom <code>[not] find(needle,haystack)</code>, for which 
        encouraging the programmer to tack "=0" or "!=0" onto the end does not really improve anything, and 
        smacks of pedantry and pettiness, but of course there is exactly the same 0 means false and anything 
        else means true.
        <br>
        <br>
        Parenthesis is required to mix different logical operators in a single expression, as explained 
        below the <a href="precedence.htm">Precedence Chart</a>.
        <br>
        <br>
       <table>
        <col style="width: 8%"/>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="and_bits.htm">and_bits</a>,
          <a href="or_bits.htm">or_bits</a>, 
          <a href="xor_bits.htm">xor_bits</a>, and
          <a href="not_bits.htm">not_bits</a>, which are the corresponding bitwise functions.<br>
<!-- DEV
          You may also have landed on this page when looking for the and, or, xor, and not inline assembly (#ilASM) instructions.
-->
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td valign=top>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
          <sup><small>1</small></sup>schrödinbug: a bug that occurs after the programmer notices that the code should never have worked in the first place,
            then typically manifests itself all over the shop, hampering attempts to rectify it, for reasons you can never quite grasp and despite having passed
            all tests with flying colours for donkey&rsquo;s years. Not to be confused with a heisenbug: a bug that disappears when one attempts to study it.
            <small>(A cute name but an incorrect reference. The quantum mechanical property of things changing when you observe them is the observer effect, 
            not the Heisenberg uncertainty principle, however observereffectbug is simply just not as cute or funny.)</small>
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
        <br>
        <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
