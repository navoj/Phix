<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">poke</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
          poke(<a href="atom.htm">atom</a> a, <a href="object.htm">object</a> x)
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>If x is an <a href="atom.htm">atom</a>, write a single byte value to memory address a.
          <br>
          <br>
            If x is a <a href="sequence.htm">sequence</a>, write a sequence of byte values to
             consecutive memory locations starting at location a.
          <br>
          <br>
            There are in fact 5 other variations of the poke routine:
          <br>
          <br>
<pre>
      poke1  poke2  poke4  poke8  pokeN
</pre>
          <br>
            which write byte/word/dword/qword value(s) to memory.
            The poke procedure is an alias of poke1. The pokeN
            routine has 3 parameters: address, value, and size(1|2|4|8).
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Comments:</b>
         </td>
         <td>
            For poke (/poke1) the lower 8 bits of each byte value, i.e.
          <b>and_bits(x, #FF)</b>,
            are stored in memory, and likewise for poke2/4/8, the lower 16/32/64
            bits of each word/dword/qword value.
          <br>
          <br>
            The poke8 function is only intended for use on 64-bit architectures; 
            see the Technicalia drop-down below for more details.
          <br>
          <br>
            It is faster to write several bytes at once by poking a sequence
            of values, than it is to write one byte at a time in a loop.
          <br>
          <br>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
a = allocate(100)   -- allocate 100 bytes in memory
-- poke one byte at a time:
poke(a,97)
poke(a+1,98)
poke(a+2,99)
-- poke 3 bytes at once:
poke(a,{97,98,99})
</eucode-->
<pre>
<font color="#000000">a</font><font color="#0000FF"> =</font><font color="#7060A8"> allocate</font><font color="#0000FF">(</font><font color="#000000">100</font><font color="#0000FF">)  </font><font color="#000080"><i> -- allocate 100 bytes in memory
-- poke one byte at a time:
</i></font><font color="#7060A8">poke</font><font color="#0000FF">(</font><font color="#000000">a</font><font color="#0000FF">,</font><font color="#000000">97</font><font color="#0000FF">)
</font><font color="#7060A8">poke</font><font color="#0000FF">(</font><font color="#000000">a</font><font color="#0000FF">+</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">98</font><font color="#0000FF">)
</font><font color="#7060A8">poke</font><font color="#0000FF">(</font><font color="#000000">a</font><font color="#0000FF">+</font><font color="#000000">2</font><font color="#0000FF">,</font><font color="#000000">99</font><font color="#0000FF">)
</font><font color="#000080"><i>-- poke 3 bytes at once:
</i></font><font color="#7060A8">poke</font><font color="#0000FF">(</font><font color="#000000">a</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">97</font><font color="#0000FF">,</font><font color="#000000">98</font><font color="#0000FF">,</font><font color="#000000">99</font><font color="#800000">}</font><font color="#0000FF">)</font>
</pre>
         </td>
        </tr>
<!-- DEV (callmach.ex)
        <tr>
         <td valign=top>
          <b>Example Program:</b>
         </td>
         <td>
          <font color="#5500FF">
           <b>demo\dos32\callmach.ex</b>
          </font>
         </td>
        </tr>
-->
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="safe_poke.htm">safe_poke</a>,
          <a href="peek.htm">peek</a>,
          <a href="allocate.htm">allocate</a>,
          <a href="free.htm">free</a>,
          <a href="call.htm">call</a>,
          <a href="library.htm#safe">
           <font color="#5500FF">
            <b>safe.e</b>
           </font>
          </a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td valign=top>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
            Invoking poke8 on 32-bit may cause some loss of precision, and special 
            care must be taken with the results from <a href="peek.htm">peek8s/u</a>.
            Further note that attempts to code 64-bit literals in a 32-bit program
            are likely to miss, for example "#8000000000000000" actually ends up as
            #7FFFFFFFFFFFFC00, however better results may be achieved by coding the 
            value as "#80000000*#100000000". (In truth that is probably a fixable <!--DEV -->
            bug, but one I have no time or inclination to investigate right now, 
            especially given that say #8000000000000001 simply cannot be stored, at
            least not in a single atom, on 32-bit, as per <a href="peek.htm">peek8s/u</a>.)
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
