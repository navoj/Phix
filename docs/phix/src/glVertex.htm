<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">glVertex</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
          include pGUI.e
          <br>
          include opengl.e
          <br>
          <br>
          glVertex(<a href="atom.htm">atom</a> x, y, z=0, w=1)
          <br>
          <i>-- or --</i>
          <br>
          glVertex3d(<a href="atom.htm">atom</a> {x,y,z}) <small>(actually declared as a single <a href="sequence.htm">sequence</a> parameter)</small>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>
            Specifies a vertex.
          <br>
          <br>
            x: Specifies the x-coordinate of a vertex.<br>
            y: Specifies the y-coordinate of a vertex.<br>
            z: Specifies the z-coordinate of a vertex.<br>
            w: Specifies the w-coordinate of a vertex.
          <br>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Remarks</b>
         </td>
         <td>
            The glVertex procedures are used within glBegin/glEnd pairs to specify point, line, and polygon vertices.
          <br>
            The current color, normal, and texture coordinates are associated with the vertex when glVertex is called.
          <br>
            When only x and y are specified, z defaults to 0.0 and w defaults to 1.0.
          <br>
            When x, y, and z are specified, w defaults to 1.0.
          <br>
            Invoking glVertex outside of a glBegin/glEnd pair results in undefined behavior.
          <br>
          <br>
            A vertex with w == 1.0 stays in place whereas w == 0.0 moves it to infinity. The following may (or may not) help:
<!--eucode>
glLoadIdentity()
glTranslatef(a, b, c)
glVertex(x, y, z)
--  |1 0 0 a|   |x|   |x+a|
--  |0 1 0 b|   |y|   |y+b|
--  |0 0 1 c| * |z| = |z+c|
--  |0 0 0 1|   |1|   |1|

glLoadIdentity()
glTranslatef(a, b, c)
glVertex(x, y, z, 3)
--  |1 0 0 a|   |x|   |x+3a|
--  |0 1 0 b|   |y|   |y+3b|
--  |0 0 1 c| * |z| = |z+3c|
--  |0 0 0 1|   |3|   |3|
</eucode-->
<pre>
<font color="#000000"></font><font color="#5E005E">glLoadIdentity</font><font color="#0000FF">()
</font><font color="#5E005E">glTranslatef</font><font color="#0000FF">(</font><font color="#000000">a</font><font color="#0000FF">,</font><font color="#000000"> b</font><font color="#0000FF">,</font><font color="#000000"> c</font><font color="#0000FF">)
</font><font color="#5E005E">glVertex</font><font color="#0000FF">(</font><font color="#000000">x</font><font color="#0000FF">,</font><font color="#000000"> y</font><font color="#0000FF">,</font><font color="#000000"> z</font><font color="#0000FF">)
</font><font color="#000080"><i>--  |1 0 0 a|   |x|   |x+a|
--  |0 1 0 b|   |y|   |y+b|
--  |0 0 1 c| * |z| = |z+c|
--  |0 0 0 1|   |1|   |1|

</i></font><font color="#5E005E">glLoadIdentity</font><font color="#0000FF">()
</font><font color="#5E005E">glTranslatef</font><font color="#0000FF">(</font><font color="#000000">a</font><font color="#0000FF">,</font><font color="#000000"> b</font><font color="#0000FF">,</font><font color="#000000"> c</font><font color="#0000FF">)
</font><font color="#5E005E">glVertex</font><font color="#0000FF">(</font><font color="#000000">x</font><font color="#0000FF">,</font><font color="#000000"> y</font><font color="#0000FF">,</font><font color="#000000"> z</font><font color="#0000FF">,</font><font color="#000000"> 3</font><font color="#0000FF">)
</font><font color="#000080"><i>--  |1 0 0 a|   |x|   |x+3a|
--  |0 1 0 b|   |y|   |y+3b|
--  |0 0 1 c| * |z| = |z+3c|
--  |0 0 0 1|   |3|   |3|</i></font>
</pre>
          <br>
          <br>
            There are 24 C functions (see index, coloured illegal and linked here) named glVertexNx[v], where N is 2..4, x is d/f/i/s 
            for double/float/integer/short, and the v if present indicates the parameter is a pointer to the first of such (only useful 
            if there was some good reason why you already had your double/float/integer/short values poked into some allocated memory, 
            let me know if you find such a need). <br>
            The optional parameters and generic atom types of phix mean these can and should all be wrapped into a single pGUI function.<br>
            The glVertex3d routine was made an exception because some code already had the required parameters in a sequence, and it 
            would be pointless to de-sequence that only to re-sequence it shortly after.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="glBegin.htm">glBegin</a>,
          <a href="xor_bits.htm">xor_bits</a>,
          <a href="xor_bits.htm">xor_bits</a>,
          <a href="xor_bits.htm">xor_bits</a>,
          <a href="glBegin.htm">glEnd</a>,
          <a href="xor_bits.htm">xor_bits</a>,
          <a href="xor_bits.htm">xor_bits</a>,
          <a href="glLoadIdentity.htm">glLoadIdentity</a>,
          <a href="xor_bits.htm">xor_bits</a>,
          <a href="glNormal.htm">glNormal</a>,
          <a href="xor_bits.htm">xor_bits</a>,
          <a href="int_to_bits.htm">int_to_bits</a>
          <br>
DEV
See also
//glBegin
glCallList
glColor
glEdgeFlag
//glEnd
glEvalCoord
glIndex
//glLoadIdentity
glMaterial
//glNormal
glRect
glTexCoord
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
