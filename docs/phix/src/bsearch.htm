<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">binary_search</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
          <a href="integer.htm">integer</a> res = binary_search(<a href="object.htm">object</a> needle, <a href="sequence.htm">sequence</a> haystack)
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>
            Finds a needle in an ordered haystack.
            <br>
            <br>
            needle: an <a href="object.htm">object</a> to look for<br>
            haystack: an ordered <a href="sequence.htm">sequence</a> to be searched
            <br>
            <br>
            Returns either a positive integer index, which means haystack[res]==needle, otherwise the negative index 
            of where it would go if it were inserted now.
            <br>
            <br>
            Results are undefined if haystack is not in ascending order or contains duplicates. In the latter case (ie 
            ascending order with duplicates) it is guaranteed to locate one of the duplicates, but it could be the first, 
            last, or anything inbetween.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
?binary_search(0,{1,3,5})   -- -1
?binary_search(1,{1,3,5})   --  1
?binary_search(2,{1,3,5})   -- -2
?binary_search(3,{1,3,5})   --  2
?binary_search(4,{1,3,5})   -- -3
?binary_search(5,{1,3,5})   --  3
?binary_search(6,{1,3,5})   -- -4
</eucode-->
<pre>
<font color="#000000"></font><font color="#0000FF">?</font><font color="#5E005E">binary_search</font><font color="#0000FF">(</font><font color="#000000">0</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">3</font><font color="#0000FF">,</font><font color="#000000">5</font><font color="#800000">}</font><font color="#0000FF">)  </font><font color="#000080"><i> -- -1
</i></font><font color="#0000FF">?</font><font color="#5E005E">binary_search</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">3</font><font color="#0000FF">,</font><font color="#000000">5</font><font color="#800000">}</font><font color="#0000FF">)  </font><font color="#000080"><i> --  1
</i></font><font color="#0000FF">?</font><font color="#5E005E">binary_search</font><font color="#0000FF">(</font><font color="#000000">2</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">3</font><font color="#0000FF">,</font><font color="#000000">5</font><font color="#800000">}</font><font color="#0000FF">)  </font><font color="#000080"><i> -- -2
</i></font><font color="#0000FF">?</font><font color="#5E005E">binary_search</font><font color="#0000FF">(</font><font color="#000000">3</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">3</font><font color="#0000FF">,</font><font color="#000000">5</font><font color="#800000">}</font><font color="#0000FF">)  </font><font color="#000080"><i> --  2
</i></font><font color="#0000FF">?</font><font color="#5E005E">binary_search</font><font color="#0000FF">(</font><font color="#000000">4</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">3</font><font color="#0000FF">,</font><font color="#000000">5</font><font color="#800000">}</font><font color="#0000FF">)  </font><font color="#000080"><i> -- -3
</i></font><font color="#0000FF">?</font><font color="#5E005E">binary_search</font><font color="#0000FF">(</font><font color="#000000">5</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">3</font><font color="#0000FF">,</font><font color="#000000">5</font><font color="#800000">}</font><font color="#0000FF">)  </font><font color="#000080"><i> --  3
</i></font><font color="#0000FF">?</font><font color="#5E005E">binary_search</font><font color="#0000FF">(</font><font color="#000000">6</font><font color="#0000FF">,</font><font color="#800000">{</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#000000">3</font><font color="#0000FF">,</font><font color="#000000">5</font><font color="#800000">}</font><font color="#0000FF">)  </font><font color="#000080"><i> -- -4</i></font>
</pre>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Implementation:</b>
         </td>
         <td>
            See builtins\bsearch.e (an autoinclude) for details of the actual implementation.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="find.htm">find</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
