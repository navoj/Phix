<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">glEnable</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
          include pGUI.e
          <br>
          include opengl.e
          <br>
          <br>
          glEnable(<a href="integer.htm">integer</a> cap)
          <br>
          <i>-- or --</i>
          <br>
          glDisable(<a href="integer.htm">integer</a> cap)
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>
            The glEnable and glDisable functions enable or disable OpenGL capabilities.
            <br>
            <br>
            cap: A symbolic constant indicating an OpenGL capability. See the following Remarks section.
            <br>
            <br> 
            If cap was not one of the values listed in the Remarks section, <a href="glGetError.htm">glGetError</a>() will return GL_INVALID_ENUM.<br>
            If these routines are called between <a href="glBegin.htm">glBegin</a> and glEnd, <a href="glGetError.htm">glGetError</a>() will return GL_INVALID_OPERATION.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Remarks</b>
         </td>
         <td>
            The glEnable and glDisable functions enable and disable various OpenGL graphics capabilities.<br>
            Use glIsEnabled or glGet to determine the current setting of any capability.
            <br>
            <br>
            Both glEnable and glDisable take a single argument, cap, which can assume one of the following values:
            <br>
            <br>
            <div id="images" class="images">
            <table>
             <tr><th bgcolor="#C0C0C0">Value</th>   <th bgcolor="#C0C0C0">Meaning</th></tr>
             <tr><td>GL_ALPHA_TEST</td> <td>
                If enabled, do alpha testing. See glAlphaFunc.</td> </tr>
             <tr><td>GL_AUTO_NORMAL</td> <td>
                If enabled, compute surface normal vectors analytically when either GL_MAP2_VERTEX_3 or GL_MAP2_VERTEX_4 has generated vertices. See glMap2.</td> </tr>
             <tr><td>GL_BLEND</td> <td>
                If enabled, blend the incoming RGBA color values with the values in the color buffers. See glBlendFunc.</td> </tr>
             <tr><td>GL_CLIP_PLANEi</td> <td>
                If enabled, clip geometry against user-defined clipping plane i. See glClipPlane.</td> </tr>
             <tr><td>GL_COLOR_LOGIC_OP</td> <td>
                If enabled, apply the current logical operation to the incoming RGBA color and color buffer values. See glLogicOp.</td> </tr>
             <tr><td>GL_COLOR_MATERIAL</td> <td>
                If enabled, have one or more material parameters track the current color. See glColorMaterial.</td> </tr>
             <tr><td>GL_CULL_FACE</td> <td>
                If enabled, cull polygons based on their winding in window coordinates. See glCullFace.</td> </tr>
             <tr><td>GL_DEPTH_TEST</td> <td>
                If enabled, do depth comparisons and update the depth buffer. See glDepthFunc and glDepthRange.</td> </tr>
             <tr><td>GL_DITHER</td> <td>
                If enabled, dither color components or indexes before they are written to the color buffer.</td> </tr>
             <tr><td>GL_FOG</td> <td>
                If enabled, blend a fog color into the post-texturing color. See glFog.</td> </tr>
             <tr><td>GL_INDEX_LOGIC_OP</td> <td>
                If enabled, apply the current logical operation to the incoming index and color buffer indices. See glLogicOp.</td> </tr>
             <tr><td>GL_LIGHTi</td> <td>
                If enabled, include light i in the evaluation of the lighting equation. See glLightModel and glLight.</td> </tr>
             <tr><td>GL_LIGHTING</td> <td>
                If enabled, use the current lighting parameters to compute the vertex color or index.<br>
                If disabled, associate the current color or index with each vertex. See glMaterial, glLightModel, and glLight.</td> </tr>
             <tr><td>GL_LINE_SMOOTH</td> <td>
                If enabled, draw lines with correct filtering. If disabled, draw aliased lines. See glLineWidth.</td> </tr>
             <tr><td>GL_LINE_STIPPLE</td> <td>
                If enabled, use the current line stipple pattern when drawing lines. See glLineStipple.</td> </tr>
             <tr><td>GL_LOGIC_OP</td> <td>
                If enabled, apply the currently selected logical operation to the incoming and color-buffer indexes. See glLogicOp.</td> </tr>
             <tr><td>GL_MAP1_COLOR_4</td> <td>
                If enabled, calls to glEvalCoord1, glEvalMesh1, and glEvalPoint1 generate RGBA values. See also glMap1.</td> </tr>
             <tr><td>GL_MAP1_INDEX</td> <td>
                If enabled, calls to glEvalCoord1, glEvalMesh1, and glEvalPoint1 generate color indexes. See also glMap1.</td> </tr>
             <tr><td>GL_MAP1_NORMAL</td> <td>
                If enabled, calls to glEvalCoord1, glEvalMesh1, and glEvalPoint1 generate normals. See also glMap1.</td> </tr>
             <tr><td>GL_MAP1_TEXTURE_COORD_1</td> <td>
                If enabled, calls to glEvalCoord1, glEvalMesh1, and glEvalPoint1 generate s texture coordinates. See also glMap1.</td> </tr>
             <tr><td>GL_MAP1_TEXTURE_COORD_2</td> <td>
                If enabled, calls to glEvalCoord1, glEvalMesh1, and glEvalPoint1 generate s and t texture coordinates. See also glMap1.</td> </tr>
             <tr><td>GL_MAP1_TEXTURE_COORD_3</td> <td>
                If enabled, calls to glEvalCoord1, glEvalMesh1, and glEvalPoint1 generate s, t, and r texture coordinates. See also glMap1.</td> </tr>
             <tr><td>GL_MAP1_TEXTURE_COORD_4</td> <td>
                If enabled, calls to glEvalCoord1, glEvalMesh1, and glEvalPoint1 generate s, t, r, and q texture coordinates. See also glMap1.</td> </tr>
             <tr><td>GL_MAP1_VERTEX_3</td> <td>
                If enabled, calls to glEvalCoord1, glEvalMesh1, and glEvalPoint1 generate x, y, and z vertex coordinates. See also glMap1.</td> </tr>
             <tr><td>GL_MAP1_VERTEX_4</td> <td>
                If enabled, calls to glEvalCoord1, glEvalMesh1, and glEvalPoint1 generate homogeneous x, y, z, and w vertex coordinates. See also glMap1.</td> </tr>
             <tr><td>GL_MAP2_COLOR_4</td> <td>
                If enabled, calls to glEvalCoord2, glEvalMesh2, and glEvalPoint2 generate RGBA values. See also glMap2.</td> </tr>
             <tr><td>GL_MAP2_INDEX</td> <td>
                If enabled, calls to glEvalCoord2, glEvalMesh2, and glEvalPoint2 generate color indexes. See also glMap2.</td> </tr>
             <tr><td>GL_MAP2_NORMAL</td> <td>
                If enabled, calls to glEvalCoord2, glEvalMesh2, and glEvalPoint2 generate normals. See also glMap2.</td> </tr>
             <tr><td>GL_MAP2_TEXTURE_COORD_1</td> <td>
                If enabled, calls to glEvalCoord2, glEvalMesh2, and glEvalPoint2 generate s texture coordinates. See also glMap2.</td> </tr>
             <tr><td>GL_MAP2_TEXTURE_COORD_2</td> <td>
                If enabled, calls to glEvalCoord2, glEvalMesh2, and glEvalPoint2 generate s and t texture coordinates. See also glMap2.</td> </tr>
             <tr><td>GL_MAP2_TEXTURE_COORD_3</td> <td>
                If enabled, calls to glEvalCoord2, glEvalMesh2, and glEvalPoint2 generate s, t, and r texture coordinates. See also glMap2.</td> </tr>
             <tr><td>GL_MAP2_TEXTURE_COORD_4</td> <td>
                If enabled, calls to glEvalCoord2, glEvalMesh2, and glEvalPoint2 generate s, t, r, and q texture coordinates. See also glMap2.</td> </tr>
             <tr><td>GL_MAP2_VERTEX_3</td> <td>
                If enabled, calls to glEvalCoord2, glEvalMesh2, and glEvalPoint2 generate x, y, and z vertex coordinates. See also glMap2.</td> </tr>
             <tr><td>GL_MAP2_VERTEX_4</td> <td>
                If enabled, calls to glEvalCoord2, glEvalMesh2, and glEvalPoint2 generate homogeneous x, y, z, and w vertex coordinates. See also glMap2.</td> </tr>
             <tr><td>GL_NORMALIZE</td> <td>
                If enabled, normal vectors specified with <a href="glNormal.htm">glNormal</a> are scaled to unit length after transformation. See <a href="glNormal.htm">glNormal</a>.</td> </tr>
             <tr><td>GL_POINT_SMOOTH</td> <td>
                If enabled, draw points with proper filtering. If disabled, draw aliased points. See glPointSize.</td> </tr>
             <tr><td>GL_POLYGON_OFFSET_FILL</td> <td>
                If enabled, and if the polygon is rendered in GL_FILL mode, an offset is added to depth values of a polygon&rsquo;s 
                fragments before the depth comparison is performed. See glPolygonOffset.</td> </tr>
             <tr><td>GL_POLYGON_OFFSET_LINE</td> <td>
                If enabled, and if the polygon is rendered in GL_LINE mode, an offset is added to depth values of a polygon&rsquo;s 
                fragments before the depth comparison is performed. See glPolygonOffset.</td> </tr>
             <tr><td>GL_POLYGON_OFFSET_POINT</td> <td>
                If enabled, an offset is added to depth values of a polygon&rsquo;s 
                fragments before the depth comparison is performed, if the polygon is rendered in GL_POINT mode. See glPolygonOffset.</td> </tr>
             <tr><td>GL_POLYGON_SMOOTH</td> <td>
                If enabled, draw polygons with proper filtering. If disabled, draw aliased polygons. See glPolygonMode.</td> </tr>
             <tr><td>GL_POLYGON_STIPPLE</td> <td>
                If enabled, use the current polygon stipple pattern when rendering polygons. See glPolygonStipple.</td> </tr>
             <tr><td>GL_SCISSOR_TEST</td> <td>
                If enabled, discard fragments that are outside the scissor rectangle. See glScissor.</td> </tr>
             <tr><td>GL_STENCIL_TEST</td> <td>
                If enabled, do stencil testing and update the stencil buffer. See glStencilFunc and glStencilOp.</td> </tr>
             <tr><td>GL_TEXTURE_1D</td> <td>
                If enabled, one-dimensional texturing is performed (unless two-dimensional texturing is also enabled). See glTexImage1D.</td> </tr>
             <tr><td>GL_TEXTURE_2D</td> <td>
                If enabled, two-dimensional texturing is performed. See glTexImage2D.</td> </tr>
             <tr><td>GL_TEXTURE_GEN_Q</td> <td>
                If enabled, the q texture coordinate is computed using the texture-generation function defined with glTexGen.<br>
                If disabled, the current q texture coordinate is used.</td> </tr>
             <tr><td>GL_TEXTURE_GEN_R</td> <td>
                If enabled, the r texture coordinate is computed using the texture generation function defined with glTexGen.<br>
                If disabled, the current r texture coordinate is used.</td> </tr>
             <tr><td>GL_TEXTURE_GEN_S</td> <td>
                If enabled, the s texture coordinate is computed using the texture generation function defined with glTexGen.<br>
                If disabled, the current s texture coordinate is used.</td> </tr>
             <tr><td>GL_TEXTURE_GEN_T</td> <td>
                If enabled, the t texture coordinate is computed using the texture generation function defined with glTexGen.<br>
                If disabled, the current t texture coordinate is used.</td> </tr>
            </table>
            </div>
            <hr style="visibility:hidden; clear:both">
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="glBegin.htm">glBegin</a>,
          <a href="glBegin.htm">glEnd</a>
<br>DEV
See also
glAlphaFunc
glArrayElement
//glBegin
glBlendFunc
glClipPlane
glColorMaterial
glColorPointer
glCullFace
glDepthFunc
glDepthRange
glDisable
glDrawArrays
glEdgeFlagPointer
//glEnd
glEvalCoord1
glEvalMesh1
glEvalPoint1
glFog
glGet
glIndexPointer
glIsEnabled
glLight
glLightModel
glLineWidth
glLineStipple
glLogicOp
glMap1
glMap2
glMaterial
        <a href="glNormal.htm">glNormal</a>
glNormalPointer
glPointSize
glPolygonMode
glPolygonStipple
glScissor
glStencilFunc
glStencilOp
glTexCoordPointer
glTexGen
glTexImage1D
glTexImage2D

         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
