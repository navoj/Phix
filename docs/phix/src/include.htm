<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">include</h1>
      <div id="mainSection">
        When you write a large program it is often helpful to break it up into logically separate files, by using
       <b>include statements</b>.
        Sometimes you will want to reuse some code that you have previously written, or that someone else has written. 
        Rather than copy this code into your main program, you can use an
       <b>include statement</b>
        to refer to the file containing the code. The format of the include statement is:
       <br>
       <br>
       <font color="#030303">
        <b>include</b>
       </font>
       <b>
        <i>&lt;filename&gt;</i>
       </b>
          [as
       <b>
        <i>&lt;namespace_identifier&gt;</i>
       </b>]
       <br>
       <br>
          This reads in (compiles) a phix source file.
       <br>
       <br>
         Any <a href="scope.htm">global symbols</a> hat have already been defined will be visible in the included file.
       <br>
       <br>
       <b>
        <font color="navy">N.B.</font>
       </b> Only those symbols defined as
       <a href="scope.htm">
        <b>global</b>
       </a>
         in the included file will be visible (accessible) in the remainder of the program.
       <br>
       <br>
         An included file can include other files. In fact, you can "nest" included files to any depth.
       <br>
       <br>
         The 
       <b>
        <i>filename</i>
       </b>
         may be absolute (full directory path) or relative. For the latter, phix maintains a table of active 
        directories to locate it (see note[1] below). This allows, for example, a "stub" file in demo\arwendemo, 
        named "arwen.ew", which contains say
<!--eucode>
    include ..\arwen\arwen.ew
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">    include</font><font color="#000000"> ..\arwen\arwen.ew</font>
</pre>
        and when the compiler is processing that file it can use the "..\\arwen" part (or
        an absolute directory) to locate any sub-includes such as misc_arwen.ew. Of course 
        you do not
       <i>have</i> to use a stub file, other apps could equally specify the 
        absolute/relative directory part, but it allows all other programs in demo\arwendemo 
        to just use "arwen.ew", and if one day I decide to reorganise the directories, or 
        perhaps have several different versions that I want to switch between, only one file 
        needs to be edited. You are perfectly free to "nest" any "stub" files if that helps.
        When the compiler reaches EOF of "..\\arwen\\arwen.ew", it clears a flag against the 
        "..\\arwen" to prevent subsequent include statements looking there, unless of course
        a later include statement (temporarily) re-activates/re-specifies it.
       <br>
       <br>
        This relative directory handling lets you organize your include files according to 
        application areas, rather than lumping them all into one central directory.
       <br>
       <br>
       Include file names typically end in
       <b>.e</b>, or sometimes
       <b>.ew</b> or
       <b>.eu</b> (when they are intended for use with Windows or Linux).
         This is just a convention. It is not required.
       <br>
       <br>
        An include statement will be quietly ignored if the file has already been included[2], 
        except for any optional namespace, which becomes available for subsequent use whether 
        or not the file has previously been included.
       <br>
       <br>
        If a
       <b>
        <i>namespace identifier</i>
       </b>
        is specified it declares a local identifier that can be used to explicitly qualify global 
        symbols in the specific included file that you want to use in the main file. This can be 
        used to disambiguate references to those symbols, or simply to promote clarity.
       <br>
       <br>
        However I feel I must say that namespaces are <b>NOT</b> an excuse for gratuitous ambiguity.<br>
        The names of global routines should be meaningful in their own right.<br>
        Namespaces should be considered an <i>escape strategy</i> rather than a <i>design philosophy</i>. <br>
        It is <i><b>not</b></i> cool for there to be 38 routines called "new()". <br>
        It is <i><b>not</b></i> clever to make someone think the code is calling a standard routine.<br> 
        It is <i><b>not</b></i> smart to force the use of namespaces when you may as well make the 
        qualifier part of the global name.<br>
        Instead of, for instance, date:format() and time:format() it is much better to have date_format() and 
        time_format(), or if you prefer, format_date() and format_time() - the code will be easier to follow, 
        there will be no cases where an unqualified format() for whatever reason invokes the wrong one, the 
        compiler will make fewer complaints, and the help lookup system will almost certainly work better.
       <br>
       <br>
        See also <a href=scope.htm>Scope Rules</a> and note[3] below.
       <br>
       <br>
        An include statement must be written on a line by itself.
        Only a comment can appear after it on the same line.
       <br>
       <br>
        The compiler knows enough about most files in the builtins directory to include them automatically as required.
        <br>
        <br>
        Everything in builtins\VM is an autoinclude except for pFEH.e, optable.e, and pMemChk.e, which are really part of p.exw. 
        There is no need to worry about or remember the names of any of: 
        pApnd.e, <wbr>pcallfunc.e, <wbr>pcfunc.e, <wbr>pcmdlnN.e, <wbr>pDeleteN.e, <wbr>pDiagN.e, <wbr>pfileioN.e, <wbr>
        pFind.e, <wbr>pFixup.e (indirectly), <wbr>pFloatN.e, <wbr>pFPU.e (indirectly), <wbr>pHeap.e, <wbr>pInstance.e, <wbr>
        pJcc.e, <wbr>pJnotx.e, <wbr>pLen.e, <wbr>pMatch.e, <wbr>pMath.e, <wbr>pMem.e, <wbr>pMkSqN.e, <wbr>pPower.e, <wbr>
        pprntfN.e, <wbr>pProfile.e, <wbr>pRand.e, <wbr>pRepeatN.e, <wbr>pRepeN.e, <wbr>pRepsN.e, <wbr>pRmdr.e, <wbr>
        prtnidN.e, <wbr>pSleep.e, <wbr>psprintN.e, <wbr>pStack.e, <wbr>pSubseN.e, <wbr>pSubssN.e, <wbr>pThreadN.e, <wbr>
        pTime.e, <wbr>pTrace.e, <wbr>pTrig.e, <wbr>pType.e, <wbr>puts1.e (indirectly), <wbr>pUnary.e, <wbr>pUnassigned.e, <wbr>
        and pXor.e - they are all automatically included as and only when needed.
        <br>
        <br>
        Most files in builtins\ are also autoincludes: 
        database.e (except for db_fatal_id), <wbr>dll.e (technically empty|now in VM\pcfunc.e), <wbr>factorial.e, <wbr>
        file.e, <wbr>findrepl.e, <wbr>gcd.e, <wbr>get.e, <wbr>graphics.e (technically empty|now in pscreen.e/pfileioN.e/pScrollN.e), <wbr>
        image.e (apart from read_bitmap and save_bitmap, most things are now in pscreen.e anyway), <wbr>log10.e, <wbr>
        machine.e (though only int&lt;-to-&gt;bits|bytes remain), <wbr>matchrepl.e, <wbr>misc.e, <wbr>
        mouse.e (now empty, as it was all DOS-only), <wbr>msgbox.e, <wbr>pAlloc.e, <wbr>panykey.e, <wbr>pbreak.e, <wbr>
        pcase.e, <wbr>pchdir.e, <wbr>pcolumn.e, <wbr>pCrashN.e, <wbr>pcurrdir.e, <wbr>pdate.e, <wbr>pdecodeflags.e, <wbr>
        pdir.e, <wbr>peekstr.e, <wbr>pelapsed.e, <wbr>penv.e, <wbr>permute.e, <wbr>pfactors.e, <wbr>pfindany.e, <wbr>
        pflatten.e, <wbr>pgetpath.e, <wbr>pincpathN.e, <wbr>pmach.e, <wbr>pmaths.e, <wbr>pokestr.e, <wbr>porall.e, <wbr>
        ppp.e, <wbr>premoveall.e, <wbr>prnd.e, <wbr>pscreen.e, <wbr>pScrollN.e, <wbr>pseqc.e, <wbr>pseries.e, <wbr>psmall.e, <wbr>
        psplit.e, <wbr>psqop.e, <wbr>psum.e, <wbr>ptagset.e, <wbr>ptrim.e, <wbr>pvlookup.e, <wbr>read_lines.e, <wbr>scanf.e, <wbr>
        shuffle.e, <wbr>sort.e, <wbr>substitute.e, <wbr>syswait.e, <wbr>and wildcard.e - most of the other files in that directory 
        are either incomplete or out of date and due for deletion. (ps: when I say empty I mean commented out) Likewise there is
        no need to remember to include anything in that list either (unless you need a namespace, in which case the error message
        will remind you what the filename is(/might) be).
        <br>
        <br>
        Notable exceptions, that ship with phix but must be manually included, are: <br>
        base64.e, <wbr>bigatom.e, <wbr>cffi.e, <wbr>fileopenN.ew (and pComN.ew), <wbr>get.e, <wbr> json.e, <wbr>ipc.e, <wbr>libcurl.e, 
        <wbr>pGUI.e, <wbr>read_file.e, <wbr>regex.e, <wbr>serialize.e, <wbr>timedate.e, <wbr>and timestamp.ew - a pretty short list.<br>
        (There are alow some deprecated components: arwen.ew, <wbr>arwen32dib.ew, <wbr>msgbox.e, <wbr>nopoll.e, <wbr>and <wbr>win32lib.ew.)<br>
        Obviously you must manually include any files you create, unless you modify psym.e/syminit() and rebuild phix to make them autoincludes.
       <br>
       <br>
        <b>Compatibility Notes</b>
        <br>
        [1] The relative directory handling (see ptok.e/initFilePathSet() for details) is not supported by either RDS Eu or OpenEuphoria. 
        If you inspect the contents of the above mentioned stub (demo\arwendemo\arwen.ew), you will find perhaps a dozen other include 
        statements that pre-load any sub-includes to work around that fact. Also, for compatibility reasons, the table of active directories 
        is initially populated (in ptok.e\initFilePathSet) with content from the environment variables EUINC and EUDIR, but does not complain 
        if they are not set. Lastly note that phix makes no attempt whatsoever to use any OpenEuphoria style eu.cfg files.
        <br>
        <br>
        [2] Phix uses the directory as if it were part of the filename, allowing libX\misc.e, 
        libY\misc.e, and libZ\misc.e to be simultaneously loaded, whereas RDS Eu\OpenEuphoria 
        normally just use the filename. In some places I have used a forward 
         slash trick to fool RDS Eu into including a duplicate filename twice. Another area where
         compatibility issues have have made a bit of a mess compared to a clean elegant phix-only
         style can be found at the top of edita.exw. All frightfully convoluted, I know, in fact
         includes files are the biggest stumbling block to getting an application to run on more
         than one of Phix/RDS Eu/OpenEu, entirely down to trial and error, and saying anything 
         other than "look at the stub files for tips" is beyond the scope of this document.
        <br>
        <br>
        [3] In phix, a namespace can be used to qualify a global defined either in the specified 
        file or any files (indirectly) included by it. I think this is
         now supported by OpenEuphoria, but in RDS Eu no such sub-include handling occurs. Thus 
         in Phix (and probably OpenEuphoria) you can code
<!--eucode>
    include arwen.ew as arwen   -- (includes arwen_misc.ew)
        ?arwen:hiWord(expr)
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">    include</font><font color="#000000"> arwen.ew as arwen  </font><font color="#000080"><i> -- (includes arwen_misc.ew)
</i></font><font color="#0000FF">        ?</font><font color="#000000">arwen</font><font color="#0000FF">:</font><font color="#000000">hiWord</font><font color="#0000FF">(</font><font color="#000000">expr</font><font color="#0000FF">)</font>
</pre>
         whereas to achieve the same effect in RDS Eu you would require
<!--eucode>
    include arwen.ew as arwen   -- (includes arwen_misc.ew)
    include arwen_misc.ew as misc
        ?misc:hiWord(expr)
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">    include</font><font color="#000000"> arwen.ew as arwen  </font><font color="#000080"><i> -- (includes arwen_misc.ew)
</i></font><font color="#008080">    include</font><font color="#000000"> arwen_misc.ew as misc
</font><font color="#0000FF">        ?</font><font color="#000000">misc</font><font color="#0000FF">:</font><font color="#000000">hiWord</font><font color="#0000FF">(</font><font color="#000000">expr</font><font color="#0000FF">)</font>
</pre>
        [4] OpenEuphoria also permits a "namespace xxx" at the top of a file. Despite several reservations about such an approach,
        support for this has been added to phix, however there may be some idiosyncracies, especially with regards to using a
        local namespace to qualify locally declared identifiers, that I may have missed.
        <br>
        <br>
        [5] OpenEuphoria has implemented a peculiar mixture of export/public/import/public import/public include and other
        pointless things, that I have long suspected cripple performance and serve little or no useful purpose. Phix just 
        treats such things as "global" (except for "export" in the context of <a href="sharedlib.htm">shared libraries</a>),
        with no apparent ill effects thus far. As noted elsewhere, however, the contents of the OE std\ directory (and for 
        that matter the include\ directory) are not compatible with phix, and care must be taken to avoid accidentally 
        including them, instead of the (possibly incomplete) ones shipped with phix.
        <br>
        <br>
        [6] OpenEuphoria has introduced countless cases of ambiguity. In the std\ directory, I can find potential clashes
        for clear, <wbr>free, <wbr>positive_int, <wbr>add, <wbr>subtract, <wbr>diff, <wbr>set, <wbr>datetime, <wbr>compare, 
        <wbr>get, <wbr>close, <wbr>find, <wbr>find_all, <wbr>split, <wbr>create, <wbr>close, <wbr>info, <wbr>new, <wbr>size, 
        <wbr>format, <wbr>parse, <wbr>sum, <wbr>wrap, <wbr>encode, <wbr>decode, <wbr>is_match, and <wbr>escape. I am trying
        to produce a phix-compatible version of std\, however it is not a high priority and may never quite finish. I can 
        only apologise and warn you in advance that the above may cause issues, which namespaces may or may not be able to
        resolve. My advice is to comment out any and all include std\<wbr>*, and see what happens.
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
