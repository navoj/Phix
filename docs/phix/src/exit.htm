<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Exit Statement</h1>
      <div id="mainSection">
         An
        <font color="#030303">
         <b>exit statement</b>
        </font> may appear inside a
        <a href="while.htm">while-loop</a> or a
        <a href="for.htm">for-loop</a>. It causes immediate termination of
         the loop, with control passing to the first statement after the loop. e.g.
<!--eucode>
    for i=1 to 100 do
        if a[i] = x then
            location = i
            exit
        end if
    end for
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">    for</font><font color="#000000"> i</font><font color="#0000FF">=</font><font color="#000000">1</font><font color="#008080"> to</font><font color="#000000"> 100</font><font color="#008080"> do
        if</font><font color="#000000"> a</font><font color="#0000FF">[</font><font color="#000000">i</font><font color="#0000FF">] =</font><font color="#000000"> x</font><font color="#008080"> then
</font><font color="#000000">            location</font><font color="#0000FF"> =</font><font color="#000000"> i
</font><font color="#008080">            exit
        end if
    end for</font>
</pre>
         It is also quite common to see something like this:
<!--eucode>
    constant TRUE = 1
    while TRUE do
        ...
        if some_condition then
            exit
        end if
        ...
    end while
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">    constant</font><font color="#004600"> TRUE</font><font color="#0000FF"> =</font><font color="#000000"> 1
</font><font color="#008080">    while</font><font color="#004600"> TRUE</font><font color="#008080"> do
</font><font color="#0000FF">        ..</font><font color="#FF0000">.
</font><font color="#008080">        if</font><font color="#000000"> some_condition</font><font color="#008080"> then
            exit
        end if
</font><font color="#0000FF">        ..</font><font color="#FF0000">.
</font><font color="#008080">    end while</font>
</pre>
       i.e. an "infinite" while-loop that actually terminates via an
        <font color="#030303">
         <b>exit statement</b>
        </font> at some arbitrary point in the body of the loop.
       <br>
       <br>
         If you happen to create a real infinite loop, when using
        <font color="#030303">
         <b>p.exe</b>
        </font>
         keying control-c in the console will stop your program immediately. However with
        <font color="#030303">
         <b>pw.exe</b>
        </font> 
         there may not be a console window, and your only option may be to terminate the 
         process via Windows Task Manager. To avoid that situation you may want to test
         (gui) programs using p.exe first, or create a console window at the start of
         the application, for instance by executing a puts(1,"") statement.
        <br>
        <br>
        The <font color="#030303">
         <b>continue statement</b>
        </font> is closely related. It causes the next iteration to begin immediately,
        in effect control passes to the end for/end while statement, though you may 
        prefer to think of it as the first statement in the loop - an end while will
        actually get branch straightened there, however the end for has an increment
        and test that need to be performed. I will let you guess what this shows:
<!--eucode>
    for i=1 to 5 do
        printf(1,"%d ",i)
        if i=3 then
            puts(1,"is three\n")
            continue
        end if
        puts(1,"is not three\n")
    end for
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">    for</font><font color="#000000"> i</font><font color="#0000FF">=</font><font color="#000000">1</font><font color="#008080"> to</font><font color="#000000"> 5</font><font color="#008080"> do
</font><font color="#5E005E">        printf</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#008000">"%d "</font><font color="#0000FF">,</font><font color="#000000">i</font><font color="#0000FF">)
</font><font color="#008080">        if</font><font color="#000000"> i</font><font color="#0000FF">=</font><font color="#000000">3</font><font color="#008080"> then
</font><font color="#7060A8">            puts</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#008000">"is three\n"</font><font color="#0000FF">)
</font><font color="#008080">            continue
        end if
</font><font color="#7060A8">        puts</font><font color="#0000FF">(</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#008000">"is not three\n"</font><font color="#0000FF">)
</font><font color="#008080">    end for</font>
</pre>
        One trap for the unwary awaits: adding continue may trigger an infinite loop
        unless you duplicate the required statement(s) in this kind of while loop:
<!--eucode>
        if alldone then exit end if     --\  either
        something += 1                  --/ or both
    end while
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">        if</font><font color="#000000"> alldone</font><font color="#008080"> then exit end if    </font><font color="#000080"><i> --\  either
</i></font><font color="#000000">        something</font><font color="#0000FF"> +=</font><font color="#000000"> 1                 </font><font color="#000080"><i> --/ or both
</i></font><font color="#008080">    end while</font>
</pre>

        <br>
        <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
