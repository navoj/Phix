<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Ternary Operator</h1>
      <div id="mainSection">
        In phix the ternary operator, also known (if you&rsquo;ll forgive the redundant tautology) as an if-and-only-if expression, 
        has a function-call-like syntax, allowing conditional selection with short-circuit evaluation, eg:
<!--eucode>
    iff(flag?"true":"false")
</eucode-->
<pre>
<font color="#000000"></font><font color="#7060A8">    iff</font><font color="#0000FF">(</font><font color="#000000">flag</font><font color="#0000FF">?</font><font color="#008000">"true"</font><font color="#0000FF">:</font><font color="#008000">"false"</font><font color="#0000FF">)</font>
</pre>
        which, fairly obviously, yields "true" or "false" depending on the value of flag. 
        <br>
        <br>
        If you prefer, <code>iif</code> is exactly equivalent to <code>iff</code>, additionally comma separators are also valid:
<!--eucode>
    iif(<condition>,<expression1>,<expression2>)
</eucode-->
<pre>
<font color="#000000"></font><font color="#7060A8">    iif</font><font color="#0000FF">(&lt;</font><font color="#000000">condition</font><font color="#0000FF">&gt;,&lt;</font><font color="#000000">expression1</font><font color="#0000FF">&gt;,&lt;</font><font color="#000000">expression2</font><font color="#0000FF">&gt;)</font>
</pre>
        However, for me, comma separators make it look too much like a normal function call and I would automatically assume eager evaluation.
        <br>
        <br>
        The construct is a simplified form of the <a href="if.htm">if statement</a> with a single condition and an else clause,
        except that it has two expressions rather than two statement blocks, and not only utilises 
        <a href="shortcircuit.htm">short-circuit evaluation</a> within the condition, but also evaluates only one of the expressions (aka <i>lazy evaluation</i> [see Technicalia]).
        If the value of the condition can be determined at compile-time (possibly via constant propagation) then the compiler may only
        emit executable code for one of the expressions as well.
        <br>
        <br>
        Note that some optimisations, especially pass-by-reference, can be thwarted by incorrect or excessive use of iff, for example
<!--eucode>
    s = iff(x<y?append(s,x):append(s,y))
</eucode-->
<pre>
<font color="#000000">    s</font><font color="#0000FF"> =</font><font color="#7060A8"> iff</font><font color="#0000FF">(</font><font color="#000000">x</font><font color="#0000FF">&lt;</font><font color="#000000">y</font><font color="#0000FF">?</font><font color="#7060A8">append</font><font color="#800000">(</font><font color="#000000">s</font><font color="#0000FF">,</font><font color="#000000">x</font><font color="#800000">)</font><font color="#0000FF">:</font><font color="#7060A8">append</font><font color="#800000">(</font><font color="#000000">s</font><font color="#0000FF">,</font><font color="#000000">y</font><font color="#800000">)</font><font color="#0000FF">)</font>
</pre>
        is likely to be exponentially slower (you would still need millions of calls to notice) than the much neater and more obvious
<!--eucode>
    s = append(s,iff(x<y?x:y))
</eucode-->
<pre>
<font color="#000000">    s</font><font color="#0000FF"> =</font><font color="#7060A8"> append</font><font color="#0000FF">(</font><font color="#000000">s</font><font color="#0000FF">,</font><font color="#7060A8">iff</font><font color="#800000">(</font><font color="#000000">x</font><font color="#0000FF">&lt;</font><font color="#000000">y</font><font color="#0000FF">?</font><font color="#000000">x</font><font color="#0000FF">:</font><font color="#000000">y</font><font color="#800000">)</font><font color="#0000FF">)</font>
</pre>
        Often the result of an iff expression is best stored in a suitably named variable, to make the code easier to understand, and quite probably easier to debug, eg:
<!--eucode>
    s = append(s,iff(x<y?l-x*4:l-((x-1)*w+floor(y/w)*4))
</eucode-->
<pre>
<font color="#000000">    s</font><font color="#0000FF"> =</font><font color="#7060A8"> append</font><font color="#0000FF">(</font><font color="#000000">s</font><font color="#0000FF">,</font><font color="#7060A8">iff</font><font color="#800000">(</font><font color="#000000">x</font><font color="#0000FF">&lt;</font><font color="#000000">y</font><font color="#0000FF">?</font><font color="#000000">l</font><font color="#0000FF">-</font><font color="#000000">x</font><font color="#0000FF">*</font><font color="#000000">4</font><font color="#0000FF">:</font><font color="#000000">l</font><font color="#0000FF">-</font><font color="#800080">(</font><font color="#00FF00">(</font><font color="#000000">x</font><font color="#0000FF">-</font><font color="#000000">1</font><font color="#00FF00">)</font><font color="#0000FF">*</font><font color="#000000">w</font><font color="#0000FF">+</font><font color="#7060A8">floor</font><font color="#00FF00">(</font><font color="#000000">y</font><font color="#0000FF">/</font><font color="#000000">w</font><font color="#00FF00">)</font><font color="#0000FF">*</font><font color="#000000">4</font><font color="#800080">)</font><font color="#800000">)</font>
</pre>
        vs:
<!--eucode>
    integer extra_space = iff(x<y?l-x*4:l-((x-1)*w+floor(y/w)*4)
    s = append(s,extra_space)
</eucode-->
<pre>
<font color="#000000"></font><font color="#004080">    integer</font><font color="#000000"> extra_space</font><font color="#0000FF"> =</font><font color="#7060A8"> iff</font><font color="#0000FF">(</font><font color="#000000">x</font><font color="#0000FF">&lt;</font><font color="#000000">y</font><font color="#0000FF">?</font><font color="#000000">l</font><font color="#0000FF">-</font><font color="#000000">x</font><font color="#0000FF">*</font><font color="#000000">4</font><font color="#0000FF">:</font><font color="#000000">l</font><font color="#0000FF">-</font><font color="#800000">(</font><font color="#800080">(</font><font color="#000000">x</font><font color="#0000FF">-</font><font color="#000000">1</font><font color="#800080">)</font><font color="#0000FF">*</font><font color="#000000">w</font><font color="#0000FF">+</font><font color="#7060A8">floor</font><font color="#800080">(</font><font color="#000000">y</font><font color="#0000FF">/</font><font color="#000000">w</font><font color="#800080">)</font><font color="#0000FF">*</font><font color="#000000">4</font><font color="#800000">)
</font><font color="#000000">    s</font><font color="#0000FF"> =</font><font color="#7060A8"> append</font><font color="#800000">(</font><font color="#000000">s</font><font color="#0000FF">,</font><font color="#000000">extra_space</font><font color="#800000">)</font>
</pre>
        Such explicit clarifications normally incur no additional penalty whatsoever<sup><small>1</small></sup> over the hidden unnamed temporary variable that the compiler would otherwise use anyway.
        <br>
        <br>
        One more example (from builtins\regex.e)
<!--eucode>
    if greedy then
        code &= {SPLIT, i+3, nil}
    else
        code &= {SPLIT, nil, i+3}
    end if
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">    if</font><font color="#000000"> greedy</font><font color="#008080"> then
</font><font color="#000000">        code</font><font color="#0000FF"> &amp;= {</font><font color="#000000">SPLIT</font><font color="#0000FF">,</font><font color="#000000"> i</font><font color="#0000FF">+</font><font color="#000000">3</font><font color="#0000FF">,</font><font color="#000000"> nil</font><font color="#0000FF">}
</font><font color="#008080">    else
</font><font color="#000000">        code</font><font color="#0000FF"> &amp;= {</font><font color="#000000">SPLIT</font><font color="#0000FF">,</font><font color="#000000"> nil</font><font color="#0000FF">,</font><font color="#000000"> i</font><font color="#0000FF">+</font><font color="#000000">3</font><font color="#0000FF">}
</font><font color="#008080">    end if</font>
</pre>
        has a certain clarity that, for me, gets lost in
<!--eucode>
    code &= {SPLIT, iff(greedy ? i+3 : nil ), iff(greedy ? nil : i+3 )}
</eucode-->
<pre>
<font color="#000000">    code</font><font color="#0000FF"> &amp;= {</font><font color="#000000">SPLIT</font><font color="#0000FF">,</font><font color="#7060A8"> iff</font><font color="#800000">(</font><font color="#000000">greedy</font><font color="#0000FF"> ?</font><font color="#000000"> i</font><font color="#0000FF">+</font><font color="#000000">3</font><font color="#0000FF"> :</font><font color="#000000"> nil</font><font color="#800000"> )</font><font color="#0000FF">,</font><font color="#7060A8"> iff</font><font color="#800000">(</font><font color="#000000">greedy</font><font color="#0000FF"> ?</font><font color="#000000"> nil</font><font color="#0000FF"> :</font><font color="#000000"> i</font><font color="#0000FF">+</font><font color="#000000">3</font><font color="#800000"> )</font><font color="#0000FF">}</font>
</pre>
        I believe this (one of several possible variations) is somewhat better
<!--eucode>
    code &= iff(greedy ? {SPLIT, i+3, nil}
                       : {SPLIT, nil, i+3} )
</eucode-->
<pre>
<font color="#000000">    code</font><font color="#0000FF"> &amp;=</font><font color="#7060A8"> iff</font><font color="#0000FF">(</font><font color="#000000">greedy</font><font color="#0000FF"> ?</font><font color="#800000"> {</font><font color="#000000">SPLIT</font><font color="#0000FF">,</font><font color="#000000"> i</font><font color="#0000FF">+</font><font color="#000000">3</font><font color="#0000FF">,</font><font color="#000000"> nil</font><font color="#800000">}
</font><font color="#0000FF">                       :</font><font color="#800000"> {</font><font color="#000000">SPLIT</font><font color="#0000FF">,</font><font color="#000000"> nil</font><font color="#0000FF">,</font><font color="#000000"> i</font><font color="#0000FF">+</font><font color="#000000">3</font><font color="#800000">}</font><font color="#0000FF"> )</font>
</pre>
        nevertheless I still prefer the longhand/old school version - but use your own judgement, of course.
        <br>
        <br>
       <table>
        <col style="width: 8%"/>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="if.htm">if</a>,
          <a href="append.htm">append</a>
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td valign=top>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
          A plain infix C-style syntax (<code>c?e1:e2</code> without an <code>iff()</code> container) is unfortunately not practical, 
          since eg a = b?c:d would be treated as the statement <code>a = b</code> followed by <code><a href="qu.htm">?</a>c:d</code>
          (ie print variable d in namespace c). I have also seen C code where the result of a ternary operator is either one or two
          parameters that get passed to another routine, however the Phix version does not and cannot work that way, except perhaps
          via concatenation in a routine_id based call.
          <br>
          <br>
          There may also be cases such as <code>iff(a:b?c:d:e:f)</code>, where the "a:", "c:", and "e:" are (automatically) treated 
          as namespace qualifiers, that may be much clearer with (or even fail to compile without) extra parentheses, and/or comma 
          separators, or otherwise simply ought and deserve to be a more traditional if-construct.
          <br>
          <br>
          The OpenEuphoria implementation of iff does <i><b>not</b></i> perform <i>lazy evaluation</i>, instead both expressions are
          evaluated but only one result used. Hence some uses of iff() that are perfectly valid in Phix will need to be rewritten in 
          longhand form (if .. then .. else .. end if) in order to be compatible with OpenEuphoria.
          <br>
          <br>
          <sup><small>1</small></sup>(no additional penalty whatsoever) Admittedly one of the executables would be a few bytes larger (&#126;0.001%), 
            because somewhere, for debugging purposes, it contains the name "extra_space" instead of -1, without doubt entirely justified if 
            it eases the development cost or maintenance burden in any way, but otherwise you would be very hard pressed indeed to devise an 
            experiment that showed any other measurable difference.
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
        <br>
        <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
