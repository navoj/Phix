<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">IupTimer</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
            include pGUI.e
            <br>
            <br>
            <a href="Ihandle.htm">Ihandle</a> res = IupTimer(cbfunc func=NULL, <a href="integer.htm">integer</a> msecs=0, <a href="integer.htm#bool">bool</a> active=true)
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>
            Creates a timer which periodically invokes a callback when the time is up.
            <br>
            <br>
            func: a callback address, usually specified as <a href="Icallback.htm">Icallback</a>(<i>"name"</i>).<br>
            msecs: an interval in miliseconds.<br>
            active: true (1) or false (0) (predefined as constants in psym.e/syminit).
            <br>
            <br>
            Each timer should be destroyed using <a href="IupDestroy.htm">IupDestroy</a>.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Example:</b>
         </td>
         <td>
            A generally useful example of using a timer to allow any currently active drawing processes to abandon, before starting a new one can
            be found in <b>demo\rosetta\VoronoiDiagram.exw</b>. While relatively simple, it can make a huge difference to responsiveness (and in 
            that particular case, not crashing).
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Attributes:</b>
         </td>
         <td>
            
         </td>
        </tr>
        <tr>
         <td valign=top>
          TIME
         </td>
         <td>
            The time interval in milliseconds. In Windows the minimum value is 10ms.
         </td>
        </tr>
        <tr>
         <td valign=top>
          RUN
         </td>
         <td>
            Starts and stops the timer. Possible values: "YES" or "NO". Returns the current timer state. If you have multiple threads start the timer in the main thread.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <a href="common.htm#WID">WID</a>
         </td>
         <td>
            (read-only): Returns the native serial number of the timer. Returns -1 if not running. A timer is mapped only when it is running.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Callbacks:</b>
         </td>
         <td>

         </td>
        </tr>
        <tr>
         <td valign=top>
          ACTION_CB
         </td>
         <td>
            function action_cb(<a href="Ihandle.htm">Ihandle</a> ih)<br>
            ih: identifier of the element that activated the event.
            <br>
            <br>
            Returns: <a href="callbacks.htm#IUP_CLOSE">IUP_CLOSE</a> will be processed.
            <br>
            <br>
            Called every time the defined time interval is reached. To stop the callback from being called simply stop the timer with RUN=NO. 
            <br>
            <br>
            Inside the callback the attribute ELAPSEDTIME returns the time elapsed since the timer was started (since 3.15).
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
