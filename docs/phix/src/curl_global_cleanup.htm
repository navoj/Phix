<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">curl_global_cleanup</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
          include builtins\libcurl.e
          <br>
          <br>
          curl_global_cleanup()
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>
            This function releases resources acquired by <a href="curl_global_init.htm">curl_global_init</a>().
            <br>
            <br>
            You should call curl_global_cleanup once for each call you make to curl_global_init, after you are done using libcurl.
            <br>
            <br>
            This function is not thread safe. You must not call it when any other thread in the program (i.e. a thread sharing 
            the same memory) is running. This doesn&rsquo;t just mean no other thread that is using libcurl. 
            Because curl_global_cleanup calls functions of other libraries that are similarly thread unsafe, it could conflict 
            with any other thread that uses these other libraries.
            <br>
            <br>
            See the description in 
              <a id="ext747" style="color:#9B5565" 
                href="javascript:ExternalLink('ext747','https://curl.haxx.se/libcurl/c/libcurl.html');">
                https://curl.haxx.se/libcurl/c/libcurl.html
              </a>&nbsp;of global environment requirements for details of how to use this function.
            <br>
            <br>
            <h3>Caution</h3>
            curl_global_cleanup does not block waiting for any libcurl-created threads to terminate (such as threads used for name 
            resolving). If a module containing libcurl is dynamically unloaded while libcurl-created threads are still running then 
            your program may crash or other corruption may occur. We recommend you do not run libcurl from any module that may be 
            unloaded dynamically. This behavior may be addressed in the future.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Example:</b>
         </td>
         <td>
           <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
            <div class="codeSnippetContainerCodeContainer">
             <div class="codeSnippetToolBar">
              <div class="codeSnippetToolBarText">
               <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-d3bj-8273-976j-3d5492d71468');">Copy</a>
              </div>
             </div>
             <div id="CodeSnippetContainerCode_13a75j95-d3bj-8273-976j-3d5492d71468" class="codeSnippetContainerCode" dir="ltr">
              <div style="color:Black;">
<!--eucode>
include builtins\libcurl.e
curl_global_init()
...
curl_global_cleanup()
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">include</font><font color="#000000"> builtins\libcurl.e
</font><font color="#5E005E">curl_global_init</font><font color="#0000FF">()
...
</font><font color="#5E005E">curl_global_cleanup</font><font color="#0000FF">()</font>
</pre>
              </div>
             </div>
            </div>
           </div>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="curl_global_init.htm">curl_global_init</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
