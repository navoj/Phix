<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">cffi</h1>
      <div id="mainSection">
        Parse C struct and function definitions, and use them.
        <br>
        <br>
        Eliminates most of the byte-counting needed when interfacing to C routines.
        The motivation behind this was that while I had many of the windows API
        structures laboriously translated to offsets for 32-bit from many years
        ago, they would all have otherwise needed re-doing for 64-bit.
        <br>
        <br>
        I must stress that any savings are limited to converting C header (.h) files,
        or more accurately fragments copied verbatim from said, which would otherwise 
        have to be done line-by-line manually. There is no new fancy slick syntax to 
        help with the code that follows, or anything remotely like that. Although it
        knows the names, offsets and sizes of fields, that does not mean that you no 
        longer have to fill them in! These routines are not intended to eliminate the 
        basic understanding of how things need to be done, but there is less chance 
        of being out-by-2 or whatever on the 4th field and therefore all the rest. 
        <br>
        <br>
        The library is deliberately written to crash on the first hiccup rather than 
        return a meaningful error message, on the basis that there is not much point
        trying to continue if any of your structs or functions are wrong, and in the
        vast majority of cases they are all statically declared.
        <br>
        <br>
        <table>
         <col style="width: 5%"/>
         <tr>
          <td valign=top>
           <a href="define_struct.htm">
            <b>define_struct</b>
           </a>
          </td>
          <td width=10 align=center valign=top>-</td>
          <td>parse a C structure definition
          </td>
         </tr>
         <tr>
          <td valign=top>
           <a href="allocate_struct.htm">
            <b>allocate_struct</b>
           </a>
          </td>
          <td width=10 align=center valign=top>-</td>
          <td>allocate memory for a structure previously defined using <a href="define_struct.htm">define_struct</a>().
          </td>
         </tr>
         <tr>
          <td valign=top>
           <a href="set_struct_field.htm">
            <b>set_struct_field</b>
           </a>
          </td>
          <td width=10 align=center valign=top>-</td>
          <td>set a named field in a structure previously allocated by <a href="allocate_struct.htm">allocate_struct</a>().
          </td>
         </tr>
         <tr>
          <td valign=top>
           <a href="get_struct_field.htm">
            <b>get_struct_field</b>
           </a>
          </td>
          <td width=10 align=center valign=top>-</td>
          <td>get a named field from a structure previously allocated by <a href="allocate_struct.htm">allocate_struct</a>().
          </td>
         </tr>
         <tr>
          <td valign=top>
           <a href="get_field_details.htm">
            <b>get_field_details</b>
           </a>
          </td>
          <td width=10 align=center valign=top>-</td>
          <td>get the low level details of a named field in a structure previously defined by <a href="define_struct.htm">define_struct</a>().
          </td>
         </tr>
         <tr>
          <td valign=top>
           <a href="get_struct_size.htm">
            <b>get_struct_size</b>
           </a>
          </td>
          <td width=10 align=center valign=top>-</td>
          <td>get the total size of a structure previously defined by <a href="define_struct.htm">define_struct</a>().
          </td>
         </tr>
         <tr>
          <td valign=top>
           <a href="set_unicode.htm">
            <b>set_unicode</b>
           </a>
          </td>
          <td width=10 align=center valign=top>-</td>
          <td>set flags controlling the unicode-related behaviour of the cffi library routines.
          </td>
         </tr>
         <tr>
          <td valign=top>
           <a href="define_cffi_func.htm">
            <b>define_cffi_func</b>
           </a>
          </td>
          <td width=10 align=center valign=top>-</td>
          <td>parse a C function definition and obtain a routine id.
          </td>
         </tr>
         <tr>
          <td valign=top>
           <a href="define_cffi_proc.htm">
            <b>define_cffi_proc</b>
           </a>
          </td>
          <td width=10 align=center valign=top>-</td>
          <td>parse a C void function definition and obtain a routine id.
          </td>
         </tr>
        </table>
        <br>
        <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
