<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">video_config</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
          <code>
             <a href="sequence.htm">sequence</a> s = video_config()
          </code>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>
            Returns a <a href="sequence.htm">sequence</a> of 10 non-negative integer values describing the current video configuration. 
            Somewhat a legacy routine from DOS32 days, which may however still be useful for some items (4
            out of 10, ie {3,4,9,10}):
          <br>
          <br>
          <table>
           <col style="width: 5%"/>
           <tr>
            <th>Constant</th>
            <th>Value</th>
            <th>Description</th>
           </tr>
           <tr>
            <td>VC_COLOR</td>
            <td>1</td>
            <td>was colour/monochrome flag, now always 1</td>
           </tr>
           <tr>
            <td>VC_MODE</td>
            <td>2</td>
            <td>was current video mode, now always 3</td>
           </tr>
           <tr>
            <td>VC_LINES</td>
            <td>3</td>
            <td>number of text rows in console buffer</td>
           </tr>
           <tr>
            <td>VC_COLUMNS</td>
            <td>4</td>
            <td>number of text columns in console buffer</td>
           </tr>
           <tr>
            <td>VC_XPIXELS</td>
            <td>5</td>
            <td>was screen width in pixels, now always 0</td>
           </tr>
           <tr>
            <td>VC_YPIXELS</td>
            <td>6</td>
            <td>was screen height in pixels, now always 0</td>
           </tr>
           <tr>
            <td>VC_NCOLORS</td>
            <td>7</td>
            <td>was number of colors, now always 32</td>
           </tr>
           <tr>
            <td>VC_PAGES</td>
            <td>8</td>
            <td>was number of display pages, now always 1</td>
           </tr>
           <tr>
            <td>VC_SCRNLINES</td>
            <td>9</td>
            <td>number of text rows for current screen size</td>
           </tr>
           <tr>
            <td>VC_SCRNCOLS</td>
            <td>10</td>
            <td>number of text columns for current screen size</td>
           </tr>
          </table>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Comments:</b>
         </td>
         <td>Beyond saying that VC_LINES and VC_COLUMNS are the size of the buffer, usually larger 
            than VC_SCRNLINES and VC_SCRNCOLS, which are the size of the visible area, the choice 
            of which is required is application specific, however the last two items are probably
            more likely to be useful.
          <br>
          <br>
            In phix, the VC_XXX constants are automatically defined, see psym.e/syminit().
          <br>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Example:</b>
         </td>
         <td>
<!--eucode>
vc = video_config()   -- vc is eg {1, 3, 300, 80, 0, 0, 32, 1, 25, 80}
if length(vc)>=VC_SCRNCOLS then
    lines = vc[VC_SCRNLINES]
    cols = vc[VC_SCRNCOLS]
else -- (RDS Eu compatibility)
    lines = vc[VC_LINES]
    cols = vc[VC_COLUMNS]
end if
</eucode-->
<pre>
<font color="#000000">vc</font><font color="#0000FF"> =</font><font color="#5E005E"> video_config</font><font color="#0000FF">()  </font><font color="#000080"><i> -- vc is eg {1, 3, 300, 80, 0, 0, 32, 1, 25, 80}
</i></font><font color="#008080">if</font><font color="#7060A8"> length</font><font color="#0000FF">(</font><font color="#000000">vc</font><font color="#0000FF">)&gt;=</font><font color="#004600">VC_SCRNCOLS</font><font color="#008080"> then
</font><font color="#000000">    lines</font><font color="#0000FF"> =</font><font color="#000000"> vc</font><font color="#0000FF">[</font><font color="#004600">VC_SCRNLINES</font><font color="#0000FF">]
</font><font color="#000000">    cols</font><font color="#0000FF"> =</font><font color="#000000"> vc</font><font color="#0000FF">[</font><font color="#004600">VC_SCRNCOLS</font><font color="#0000FF">]
</font><font color="#008080">else</font><font color="#000080"><i> -- (RDS Eu compatibility)
</i></font><font color="#000000">    lines</font><font color="#0000FF"> =</font><font color="#000000"> vc</font><font color="#0000FF">[</font><font color="#004600">VC_LINES</font><font color="#0000FF">]
</font><font color="#000000">    cols</font><font color="#0000FF"> =</font><font color="#000000"> vc</font><font color="#0000FF">[</font><font color="#004600">VC_COLUMNS</font><font color="#0000FF">]
</font><font color="#008080">end if</font>
</pre>
         </td>
        </tr>
        <tr>
         <td>
          <b>Compatibility:</b>
         </td>
         <td>
            RDS Eu requires <code>include graphics.e</code> and returns a sequence of 8 elements only.
            <br>
            OpenEuphoria requires <code>include std\graphcst.e</code>
            <br>
            <br>
            Should you require a routine that is compatible across Phix, RDS Eu, and OpenEuphoria, then I suggest 
            that you adapt/rename the one in builtins\pscreen.e, and perhaps rely on/copy the VC_XXX constants in 
            builtins\graphics.e, rather than struggle with those other include files/builtins, especially with 
            regards to RDS Eu.
         </td>
        </tr>
       </table>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
