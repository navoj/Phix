<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">glNormal</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
          include pGUI.e
          <br>
          include opengl.e
          <br>
          <br>
          glNormal(<a href="atom.htm">atom</a> nx, ny, nz)
          <br>
          <i>-- or --</i>
          <br>
          glNormal3(<a href="atom.htm">atom</a> {nx,ny,nz}) <small>(actually declared as a single <a href="sequence.htm">sequence</a> parameter)</small>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>
            Sets the current normal vector.
            <br>
            <br>
            nx: the x-coordinate for the new current normal vector.<br>
            ny: the y-coordinate for the new current normal vector.<br>
            nz: the z-coordinate for the new current normal vector.
         </td>
        </tr>
         <td valign=top>
          <b>Remarks</b>
         </td>
         <td>
            The current normal is set to the given coordinates whenever you call the glNormal function.<br>
            Normals specified with glNormal need not have unit length. If normalization is enabled, then normals specified with glNormal are normalized after transformation. <br>
            You can control normalization by using glEnable and glDisable with the argument GL_NORMALIZE. By default, normalization is disabled. <br>
            You can update the current normal at any time. In particular, you can call glNormal between a call to glBegin and the corresponding call to glEnd. 
            <br>
            <br>
            The following functions retrieve information related to glNormal:<br>
            glGet with argument GL_CURRENT_NORMAL<br>
            glIsEnable with argument GL_NORMALIZE
            <br>
            <br>
            The glNormal function wraps the C glNormal3d routine. In fact, the opengl.e routine glNormal3 does too, despite bearing a superficial similarity 
            to the C function glNormal3dv, however of course there is a significant difference between a sequence of length 3 and the raw address of the first 
            double/float/int. See Technicalia for details.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="glBegin.htm">glBegin</a>,
          <a href="xor_bits.htm">xor_bits</a>,
          <a href="glBegin.htm">glEnd</a>,
          <a href="int_to_bits.htm">int_to_bits</a>,
          <a href="int_to_bits.htm">int_to_bits</a>,
          <a href="glVertex.htm">glVertex</a>
<br>DEV
See also
//glBegin
glColor
//glEnd
glIndex
glTexCoord
//glVertex
         </td>
        </tr>
        <tr id="Technicalia" style="display:none;">
         <td valign=top>
          <a href="glossary.htm#technicalia">
           <b>Technicalia</b>
          </a>
         </td>
         <td>
          In light of the fact that I found no examples where they were actually used, and to simplify the wrapper, and this documentation, 
          I have removed (commented out) glNormal3b, glNormal3i, and glNormal3s. It would of course be trivial to ressurect them should
          they ever be needed. The original documentation said:<br>
          Byte, short, or integer arguments are converted to floating-point format by using a linear mapping that maps the most positive 
          representable integer value to 1.0, and the most negative representable integer value to -1.0.<br>
          Since such values would not work with glNormal, which is a wrapper for glNormal3d, they are syntax coloured "Incompatible".
          <br>
          <br>
          Typically you would replace C glNormal3d and glNormal3f calls with glNormal, rather than glNormal3.
          <br>
          <br>
          The C functions glNormal3bv, glNormal3dv, glNormal3fv, glNormal3iv, and glNormal3sv are not currently wrapped, and are also coloured
          Incompatible. They would only be useful if there was some good reason why you already had your byte/double/float/integer/short triplet 
          poked into some previously allocated memory.
         </td>
        </tr>
       </table>
       <img src="images/sprites/tech.open.png" title="Expand/Shrink" style="display:block;clear:both;" onload="setStartT(this);" onclick="changeImageT(this);" />
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
