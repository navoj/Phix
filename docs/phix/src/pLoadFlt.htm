<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">pLoadFlt</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Syntax:</b>
         </td>
         <td>
       <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
        <div class="codeSnippetContainerCodeContainer">
         <div class="codeSnippetToolBar">
          <div class="codeSnippetToolBarText">
           <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_12a675d6-abc7-4178-936c-8d2196d81946');">Copy</a>
          </div>
         </div>
         <div id="CodeSnippetContainerCode_12a675d6-abc7-4178-936c-8d2196d81946" class="codeSnippetContainerCode" dir="ltr">
          <div style="color:Black;">
<!--eucode>
#ilASM{ 
    [32]
        lea esi,[a]
        call :%pLoadFlt     -- st0:=[esi]
    [64]
        lea rsi,[a]
        call :%pLoadFlt     -- st0:=[rsi]
    []
      }
</eucode-->
<pre>
<font color="#000000">#</font><font color="#008080">ilASM</font><font color="#0000FF">{ 
</font><font color="#800000">    [</font><font color="#000000">32</font><font color="#800000">]
</font><font color="#000000">        lea esi</font><font color="#0000FF">,</font><font color="#800000">[</font><font color="#000000">a</font><font color="#800000">]
</font><font color="#7060A8">        call</font><font color="#0000FF"> :</font><font color="#000000">%pLoadFlt    </font><font color="#000080"><i> -- st0:=[esi]
</i></font><font color="#800000">    [</font><font color="#000000">64</font><font color="#800000">]
</font><font color="#000000">        lea rsi</font><font color="#0000FF">,</font><font color="#800000">[</font><font color="#000000">a</font><font color="#800000">]
</font><font color="#7060A8">        call</font><font color="#0000FF"> :</font><font color="#000000">%pLoadFlt    </font><font color="#000080"><i> -- st0:=[rsi]
</i></font><font color="#800000">    []
</font><font color="#0000FF">      }</font>
</pre>
          </div>
         </div>
        </div>
       </div>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>
            Load [e|rsi] into st0, whether it is an integer or floating-point.
            <br>
            <br>
            <b>NB</b> no checks are made to verify [e|rsi] is actually/definitely an atom. While this is untested, it would probably work fine
            if e|rsi was set to the address of a string that happened to contain the right binary representation of an appropriately-sized
            floating point value, but all other string/sequence values will just result in random garbage being loaded into st0. Most uses of
            this are either carefully manually tested first, or sufficiently localised that any additional internal testing is not justified.
            <br>
            <br>
            <small>Aside: Just after documenting this, a search revealed it is not [yet] used anywhere at all..</small>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>On return:</b>
         </td>
         <td>
          [32] eax is damaged, all other registers are preserved.
          <br>
          [64] rax is damaged, r15 is set to h4, all other registers are preserved.
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Defined in:</b>
         </td>
         <td>builtins\VM\pHeap.e
         </td>
        </tr>
       </table>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
