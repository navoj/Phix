<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">curl_easy_recv</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
          include builtins\libcurl.e
          <br>
          <br>
          {<a href="CURLcode.htm">CURLcode</a> res, 
           <a href="integer.htm">integer</a> len} = curl_easy_recv(<a href="atom.htm">atom</a> curl, 
                                                                   <a href="atom.htm">atom</a> buffer, 
                                                                   <a href="integer.htm">integer</a> buflen)
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>
            Receives raw data on an "easy" connection.
            <br>
            <br>
            This function receives raw data from the established connection. <br>
            You may use it together with curl_easy_send to implement custom protocols using libcurl. <br>
            This functionality can be particularly useful if you use proxies and/or SSL encryption: libcurl will take care of proxy negotiation and connection set-up.
            <br>
            <br>
            buffer is a pointer to your buffer that will get the received data. <br>
            buflen is the maximum amount of data you can get in that buffer.
            <br>
            <br>
            To establish the connection, set <a href="CURLoption.htm#CURLOPT_CONNECT_ONLY">CURLOPT_CONNECT_ONLY</a> option before calling 
            <a href="curl_easy_perform.htm">curl_easy_perform</a> or <a href="curl_multi_perform.htm">curl_multi_perform</a>. <br>
            Note that curl_easy_recv does not work on connections that were created without this option.
            <br>
            <br>
            The call will return CURLE_AGAIN if there is no data to read - the socket is used in non-blocking mode internally. <br>
            When CURLE_AGAIN is returned, use your operating system facilities like select(2) to wait for data. <br>
            The socket may be obtained using curl_easy_getinfo with <a href="curl_easy_getinfo.htm#CURLINFO_ACTIVESOCKET">CURLINFO_ACTIVESOCKET</a>.
            <br>
            <br>
            Wait on the socket only if curl_easy_recv returns CURLE_AGAIN. <br>
            The reason for this is libcurl or the SSL library may internally cache some data, therefore you should call curl_easy_recv until 
            all data is read which would include any cached data.
            <br>
            <br>
            Furthermore if you wait on the socket and it tells you there is data to read, curl_easy_recv may return CURLE_AGAIN 
            if the only data that was read was for internal SSL processing, and no other data is available.
            <br>
            <br>
            Availability: Added in 7.18.2.
            <br>
            <br>
            Return value: On success, returns CURLE_OK, the data buffer, and the number of bytes it actually read.<br>
            On failure, returns the appropriate error code as the first element of the result.
            <br>
            <br>
            The function may return CURLE_AGAIN. In this case, use your operating system facilities to wait until data can be read, and retry.
            <br>
            <br>
            Reading exactly 0 bytes indicates a closed connection.
            <br>
            <br>
            If there is no socket available to use from the previous transfer, this function returns 
            <a href="CURLcode.htm#CURLE_UNSUPPORTED_PROTOCOL">CURLE_UNSUPPORTED_PROTOCOL</a>.
         </td>
        </tr>
<!--
        <tr>
         <td valign=top>
          <b>Example:</b>
         </td>
         <td>
<!x--eucode>
include builtins\libcurl.e

curl_global_init()
atom curl = curl_easy_init()
curl_easy_setopt(curl, CURLOPT_URL, "http://example.com")
atom res = curl_easy_perform(curl)
curl_easy_cleanup(curl)
curl_global_cleanup()
</eucode--x>
<pre>
<font color="#000000"></font><font color="#008080">include</font><font color="#000000"> builtins\libcurl.e

</font><font color="#5E005E">curl_global_init</font><font color="#0000FF">()
</font><font color="#004080">atom</font><font color="#000000"> curl</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_init</font><font color="#0000FF">()
</font><font color="#5E005E">curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_URL</font><font color="#0000FF">,</font><font color="#008000"> "http://example.com"</font><font color="#0000FF">)
</font><font color="#004080">atom</font><font color="#000000"> res</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_easy_perform</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)
</font><font color="#5E005E">curl_easy_cleanup</font><font color="#0000FF">(</font><font color="#000000">curl</font><font color="#0000FF">)
</font><font color="#5E005E">curl_global_cleanup</font><font color="#0000FF">()</font>
</pre>
         </td>
        </tr>
-->
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="curl_easy_setopt.htm">curl_easy_setopt</a>,
          <a href="curl_easy_perform.htm">curl_easy_perform</a>,
          <a href="curl_easy_getinfo.htm">curl_easy_getinfo</a>,
          <a href="curl_easy_send.htm">curl_easy_send</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
