<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">glBegin</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
          include pGUI.e
          <br>
          include opengl.e
          <br>
          <br>
          glBegin(<a href="integer.htm">integer</a> mode)
          <br>
          <br>
          ...
          <br>
          <br>
          glEnd()
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>
            The glBegin and glEnd functions delimit the vertices that define a primitive or a group of like primitives. <br>
            The glBegin function accepts a single argument that specifies which of ten primitives the vertices compose. <br>
            Taking n as an integer count starting at one, and N as the total number of vertices specified, the interpretations are as follows:
            <br>
            <br>
            mode: The primitive or primitives that will be created from vertices presented between glBegin and the subsequent glEnd. <br>
            The following are accepted symbolic constants and their meanings, as defined in opengl.e:
<!--eucode>
global constant GL_POINTS         = 0,  -- Treats each vertex as a single point. 
                                        -- Vertex n defines point n. N points are drawn.
                GL_LINES          = 1,  -- Treats each pair of vertices as an independent line segment. 
                                        -- Vertices 2n - 1 and 2n define line n. N/2 lines are drawn.
                GL_LINE_LOOP      = 2,  -- Draws a connected group of line segments from the first vertex 
                                        -- to the last, then back to the first. 
                                        -- Vertices n and n + 1 define line n. 
                                        -- The last line, however, is defined by vertices N and 1. 
                                        -- N lines are drawn.
                GL_LINE_STRIP     = 3,  -- Draws a connected group of line segments from the first vertex 
                                        -- to the last. 
                                        -- Vertices n and n+1 define line n. N - 1 lines are drawn.
                GL_TRIANGLES      = 4,  -- Treats each triplet of vertices as an independent triangle. 
                                        -- Vertices 3n - 2, 3n - 1, and 3n define triangle n. 
                                        -- N/3 triangles are drawn.
                GL_TRIANGLE_STRIP = 5,  -- Draws a connected group of triangles. 
                                        -- One triangle is defined for each vertex presented after the 
                                        -- first two vertices. 
                                        -- For odd n, vertices n, n + 1, and n + 2 define triangle n. 
                                        -- For even n, vertices n + 1, n, and n + 2 define triangle n. 
                                        -- N - 2 triangles are drawn.
                GL_TRIANGLE_FAN   = 6,  -- Draws a connected group of triangles. 
                                        -- One triangle is defined for each vertex presented after the 
                                        -- first two vertices. 
                                        -- Vertices 1, n + 1, n + 2 define triangle n. 
                                        -- N - 2 triangles are drawn.
                GL_QUADS          = 7,  -- Treats each group of four vertices as an independent quadrilateral. 
                                        -- Vertices 4n - 3, 4n - 2, 4n - 1, and 4n define quadrilateral n. 
                                        -- N/4 quadrilaterals are drawn.
                GL_QUAD_STRIP     = 8,  -- Draws a connected group of quadrilaterals. 
                                        -- One quadrilateral is defined for each pair of vertices presented 
                                        -- after the first pair. 
                                        -- Vertices 2n - 1, 2n, 2n + 2, and 2n + 1 define quadrilateral n. 
                                        -- N/2 - 1 quadrilaterals are drawn. 
                                        -- Note that the order in which vertices are used to construct a 
                                        -- quadrilateral from strip data is different from independent data.
                GL_POLYGON        = 9   -- Draws a single, convex polygon. 
                                        -- Vertices 1 through N define this polygon.
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">global constant</font><font color="#004600"> GL_POINTS        </font><font color="#0000FF"> =</font><font color="#000000"> 0</font><font color="#0000FF">, </font><font color="#000080"><i> -- Treats each vertex as a single point. 
                                        -- Vertex n defines point n. N points are drawn.
</i></font><font color="#004600">                GL_LINES         </font><font color="#0000FF"> =</font><font color="#000000"> 1</font><font color="#0000FF">, </font><font color="#000080"><i> -- Treats each pair of vertices as an independent line segment. 
                                        -- Vertices 2n - 1 and 2n define line n. N/2 lines are drawn.
</i></font><font color="#004600">                GL_LINE_LOOP     </font><font color="#0000FF"> =</font><font color="#000000"> 2</font><font color="#0000FF">, </font><font color="#000080"><i> -- Draws a connected group of line segments from the first vertex 
                                        -- to the last, then back to the first. 
                                        -- Vertices n and n + 1 define line n. 
                                        -- The last line, however, is defined by vertices N and 1. 
                                        -- N lines are drawn.
</i></font><font color="#004600">                GL_LINE_STRIP    </font><font color="#0000FF"> =</font><font color="#000000"> 3</font><font color="#0000FF">, </font><font color="#000080"><i> -- Draws a connected group of line segments from the first vertex 
                                        -- to the last. 
                                        -- Vertices n and n+1 define line n. N - 1 lines are drawn.
</i></font><font color="#004600">                GL_TRIANGLES     </font><font color="#0000FF"> =</font><font color="#000000"> 4</font><font color="#0000FF">, </font><font color="#000080"><i> -- Treats each triplet of vertices as an independent triangle. 
                                        -- Vertices 3n - 2, 3n - 1, and 3n define triangle n. 
                                        -- N/3 triangles are drawn.
</i></font><font color="#004600">                GL_TRIANGLE_STRIP</font><font color="#0000FF"> =</font><font color="#000000"> 5</font><font color="#0000FF">, </font><font color="#000080"><i> -- Draws a connected group of triangles. 
                                        -- One triangle is defined for each vertex presented after the 
                                        -- first two vertices. 
                                        -- For odd n, vertices n, n + 1, and n + 2 define triangle n. 
                                        -- For even n, vertices n + 1, n, and n + 2 define triangle n. 
                                        -- N - 2 triangles are drawn.
</i></font><font color="#004600">                GL_TRIANGLE_FAN  </font><font color="#0000FF"> =</font><font color="#000000"> 6</font><font color="#0000FF">, </font><font color="#000080"><i> -- Draws a connected group of triangles. 
                                        -- One triangle is defined for each vertex presented after the 
                                        -- first two vertices. 
                                        -- Vertices 1, n + 1, n + 2 define triangle n. 
                                        -- N - 2 triangles are drawn.
</i></font><font color="#004600">                GL_QUADS         </font><font color="#0000FF"> =</font><font color="#000000"> 7</font><font color="#0000FF">, </font><font color="#000080"><i> -- Treats each group of four vertices as an independent quadrilateral. 
                                        -- Vertices 4n - 3, 4n - 2, 4n - 1, and 4n define quadrilateral n. 
                                        -- N/4 quadrilaterals are drawn.
</i></font><font color="#004600">                GL_QUAD_STRIP    </font><font color="#0000FF"> =</font><font color="#000000"> 8</font><font color="#0000FF">, </font><font color="#000080"><i> -- Draws a connected group of quadrilaterals. 
                                        -- One quadrilateral is defined for each pair of vertices presented 
                                        -- after the first pair. 
                                        -- Vertices 2n - 1, 2n, 2n + 2, and 2n + 1 define quadrilateral n. 
                                        -- N/2 - 1 quadrilaterals are drawn. 
                                        -- Note that the order in which vertices are used to construct a 
                                        -- quadrilateral from strip data is different from independent data.
</i></font><font color="#004600">                GL_POLYGON       </font><font color="#0000FF"> =</font><font color="#000000"> 9  </font><font color="#000080"><i> -- Draws a single, convex polygon. 
                                        -- Vertices 1 through N define this polygon.</i></font>
</pre>
            <br>
            If mode is not one of the above values, <a href="glGetError.htm">glGetError</a>() will return GL_INVALID_ENUM.
            <br>
            <br>
            You can use only a subset of OpenGL functions between glBegin and glEnd. The functions you can use are:
            <br>
            <br>
            glColor, glEdgeFlag, glEvalCoord, glEvalPoint, glIndex, glMaterial, <a href="glNormal.htm">glNormal</a>, glTexCoord, glVertex 
            <br>
            You can also use glCallList or glCallLists to execute display lists that include only the preceding functions. <br>
            If any other OpenGL function is called between glBegin and glEnd, the error flag GL_INVALID_OPERATION is set and the function is ignored.<br>
            Regardless of the value chosen for mode in glBegin, there is no limit to the number of vertices you can define between glBegin and glEnd. <br>
            Lines, triangles, quadrilaterals, and polygons that are incompletely specified are not drawn. <br>
            Incomplete specification results when either too few vertices are provided to specify even a single primitive or when an incorrect multiple of vertices is specified. <br>
            The incomplete primitive is ignored; the complete primitives are drawn.
            <br>
            <br>
            The minimum specification of vertices for each primitive is:
            <br>
            <br>
            <div id="images" class="images" align="center">
            <table>
             <tr><th bgcolor="#C0C0C0">Type of primitive</th>   <th bgcolor="#C0C0C0">Minimum number of vertices</th></tr>
             <tr><td align="center">point</td>                  <td align="center">1</td>                            </tr>
             <tr><td align="center">line</td>                   <td align="center">2</td>                            </tr>
             <tr><td align="center">triangle</td>               <td align="center">3</td>                            </tr>
             <tr><td align="center">quadrilateral</td>          <td align="center">4</td>                            </tr>
             <tr><td align="center">polygon</td>                <td align="center">3</td>                            </tr>
            </table>
            </div>
            <hr style="visibility:hidden; clear:both">
            Modes that require a certain multiple of vertices are GL_LINES (2), GL_TRIANGLES (3), GL_QUADS (4), and GL_QUAD_STRIP (2).
            <br>
            <br>
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>
          <a href="glGetError.htm">glGetError</a>,
          <a href="glNormal.htm">glNormal</a>,
          <a href="glVertex.htm">glVertex</a>,
          <a href="int_to_bits.htm">int_to_bits</a>
glCallList
glCallLists
glColor
glEdgeFlag
glEvalCoord
glEvalPoint
glIndex
glMaterial
glTexCoord
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
