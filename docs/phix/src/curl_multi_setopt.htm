<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">curl_multi_setopt</h1>
      <div id="mainSection">
       <table>
        <col style="width: 5%"/>
        <tr>
         <td valign=top>
          <b>Definition:</b>
         </td>
         <td>
          include builtins\libcurl.e
          <br>
          <br>
          <a href="CURLcode.htm#CURLMcode">CURLMcode</a> res = curl_multi_setopt(<a href="atom.htm">atom</a> multi_handle,
                                                                                 <a href="#CURLMoption">CURLMoption</a> option,
                                                                                 <a href="object.htm">object</a> param)
         </td>
        </tr>
        <tr>
         <td valign=top>
          <b>Description:</b>
         </td>
         <td>
            Set options for a curl multi handle.
            <br>
            <br>
            curl_multi_setopt is used to tell a libcurl multi handle how to behave. <br>
            By using the appropriate options to curl_multi_setopt, you can change libcurl&rqsuo;s behaviour when using that multi handle. <br>
            All options are set with the option followed by the parameter param. <br>
            That parameter can be a long, a function pointer, an object pointer or a curl_off_t type, depending on what the specific option expects. <br>
            Read this manual carefully as bad input values may cause libcurl to behave badly! <br>
            You can only set one option in each function call.
            <br>
            <br>
            Returns: The standard <a href="CURLcode.htm#CURLMcode">CURLMcode</a> for multi interface error codes. <br>
            Note that it returns a <a href="CURLcode.htm#CURLM_UNKNOWN_OPTION">CURLM_UNKNOWN_OPTION</a> if you try setting an option that 
            this version of libcurl does not know of.
            <br>
            <br>
            Availability: This function was added in libcurl 7.15.4.
          <small><br><a name="CURLMoption"></a></small>
         </td>
        </tr>

        <tr>
         <td valign=top>
          <b>CURLMoption</b>
         </td>
         <td>
            CURLMoption is one of the following:
          <small><br><a name="CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE"></a></small>
         </td>
        </tr>
        <tr>
         <td valign=top>
          CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE
         </td>
         <td>
            Chunk length threshold for pipelining.
            <br>
            <br>
            Synopsis: <a href="CURLcode.htm#CURLMcode">CURLMcode</a> res = curl_multi_setopt(<a href="atom.htm">atom</a> multi_handle,
                                                                                             CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE,
                                                                                             <a href="integer.htm">integer</a> nsize)
            <br>
            <br>
            Specify nsize in bytes. If a pipelined connection is currently processing a chunked (Transfer-encoding: chunked) request with 
            a current chunk length larger than CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE, that pipeline will not be considered for additional requests, 
            even if it is shorter than CURLMOPT_MAX_PIPELINE_LENGTH.
            <br>
            <br>
            Default: The default value is 0, which means that the penalization is inactive.
            <br>
            <br>
            Protocols: HTTP(S)
            <br>
            <br>
            Example
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-G537-4273-937k-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-G537-4273-937k-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
include builtins\libcurl.e
atom m = curl_multi_init()
curl_multi_setopt(m, CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE, 10000)
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">include</font><font color="#000000"> builtins\libcurl.e
</font><font color="#004080">atom</font><font color="#000000"> m</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_multi_init</font><font color="#0000FF">()
</font><font color="#5E005E">curl_multi_setopt</font><font color="#0000FF">(</font><font color="#000000">m</font><font color="#0000FF">,</font><font color="#000000"> CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE</font><font color="#0000FF">,</font><font color="#000000"> 10000</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div>
            <br>
            Availability: Added in 7.30.0
            <br>
            <br>
            Return value: Returns <a href="CURLcode.htm#CURLM_OK">CURLM_OK</a> if the option is supported, and 
            <a href="CURLcode.htm#CURLM_UNKNOWN_OPTION">CURLM_UNKNOWN_OPTION</a> if not.
            <br>
            <br>
            See also: CURLMOPT_PIPELINING, CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE, CURLMOPT_MAX_PIPELINE_LENGTH
          <small><br><a name="CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE"></a></small>
         </td>
        </tr>
        <tr>
         <td valign=top>
          CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE
         </td>
         <td>
            Size threshold for pipelining penalty.
            <br>
            <br>
            Synopsis: <a href="CURLcode.htm#CURLMcode">CURLMcode</a> res = curl_multi_setopt(<a href="atom.htm">atom</a> multi_handle,
                                                                                             CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE,
                                                                                             <a href="integer.htm">integer</a> nsize)
            <br>
            <br>
            Specify nsize in bytes. If a pipelined connection is currently processing a request with a Content-Length larger than this 
            CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE, that pipeline will then not be considered for additional requests, even if it is 
            shorter than CURLMOPT_MAX_PIPELINE_LENGTH.
            <br>
            <br>
            Default: The default value is 0, which means that the size penalization is inactive.
            <br>
            <br>
            Protocols: HTTP(S)
            <br>
            <br>
            Example
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-G537-4273-937k-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-G537-4273-937k-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
include builtins\libcurl.e
atom m = curl_multi_init()
curl_multi_setopt(m, CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE, 10000)
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">include</font><font color="#000000"> builtins\libcurl.e
</font><font color="#004080">atom</font><font color="#000000"> m</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_multi_init</font><font color="#0000FF">()
</font><font color="#5E005E">curl_multi_setopt</font><font color="#0000FF">(</font><font color="#000000">m</font><font color="#0000FF">,</font><font color="#000000"> CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE</font><font color="#0000FF">,</font><font color="#000000"> 10000</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div>
            <br>
            Availability: Added in 7.30.0
            <br>
            <br>
            Return value: Returns <a href="CURLcode.htm#CURLM_OK">CURLM_OK</a> if the option is supported, and 
            <a href="CURLcode.htm#CURLM_UNKNOWN_OPTION">CURLM_UNKNOWN_OPTION</a> if not.
            <br>
            <br>
            See also: CURLMOPT_PIPELINING, CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE
          <small><br><a name="CURLMOPT_MAX_HOST_CONNECTIONS"></a></small>
         </td>
        </tr>
        <tr>
         <td valign=top>
          CURLMOPT_MAX_HOST_CONNECTIONS
         </td>
         <td>
            Set max number of connections to a single host.
            <br>
            <br>
            Synopsis: <a href="CURLcode.htm#CURLMcode">CURLMcode</a> res = curl_multi_setopt(<a href="atom.htm">atom</a> multi_handle,
                                                                                             CURLMOPT_MAX_HOST_CONNECTIONS,
                                                                                             <a href="integer.htm">integer</a> max)
            <br>
            <br>
            The specified number will be used as the maximum amount of simultaneously open connections to a single host 
            (a host being the same as a host name + port number pair). <br>
            For each new session to a host, libcurl will open a new connection up to the limit set by 
            CURLMOPT_MAX_HOST_CONNECTIONS. <br>
            When the limit is reached, the sessions will be pending until a connection becomes available. <br>
            If CURLMOPT_PIPELINING is enabled, libcurl will try to pipeline if the host is capable of it.
            <br>
            <br>
            The default max value is 0, unlimited. <br>
            However, for backwards compatibility, setting it to 0 when CURLMOPT_PIPELINING is 1 will not be treated as unlimited. <br>
            Instead it will open only 1 connection and try to pipeline on it.
            <br>
            <br>
            This set limit is also used for proxy connections, and then the proxy is considered to be the host for which this limit counts.
            <br>
            <br>
            Default: 0
            <br>
            <br>
            Protocols: HTTP(S)
            <br>
            <br>
            Example
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-G537-4273-937k-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-G537-4273-937k-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
include builtins\libcurl.e
atom m = curl_multi_init()
/* do no more than 2 connections per host */
curl_multi_setopt(m, CURLMOPT_MAX_HOST_CONNECTIONS, 2)
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">include</font><font color="#000000"> builtins\libcurl.e
</font><font color="#004080">atom</font><font color="#000000"> m</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_multi_init</font><font color="#0000FF">()
</font><font color="#000080"><i>/* do no more than 2 connections per host */
</i></font><font color="#5E005E">curl_multi_setopt</font><font color="#0000FF">(</font><font color="#000000">m</font><font color="#0000FF">,</font><font color="#000000"> CURLMOPT_MAX_HOST_CONNECTIONS</font><font color="#0000FF">,</font><font color="#000000"> 2</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div>
            <br>
            Availability: Added in 7.30.0
            <br>
            <br>
            Return value: Returns <a href="CURLcode.htm#CURLM_OK">CURLM_OK</a> if the option is supported, and 
            <a href="CURLcode.htm#CURLM_UNKNOWN_OPTION">CURLM_UNKNOWN_OPTION</a> if not.
            <br>
            <br>
            See also: CURLMOPT_MAXCONNECTS, CURLMOPT_MAX_TOTAL_CONNECTIONS
          <small><br><a name="CURLMOPT_MAX_PIPELINE_LENGTH"></a></small>
         </td>
        </tr>
        <tr>
         <td valign=top>
          CURLMOPT_MAX_PIPELINE_LENGTH
         </td>
         <td>
            Maximum number of requests in a pipeline.
            <br>
            <br>
            Synopsis: <a href="CURLcode.htm#CURLMcode">CURLMcode</a> res = curl_multi_setopt(<a href="atom.htm">atom</a> multi_handle,
                                                                                             CURLMOPT_MAX_PIPELINE_LENGTH,
                                                                                             <a href="integer.htm">integer</a> max)
            <br>
            <br>
            The specified max number will be used as the maximum amount of outstanding requests in an HTTP/1.1 pipelined connection. <br>
            This option is only used for HTTP/1.1 pipelining, not for HTTP/2 multiplexing.
            <br>
            <br>
            When this limit is reached, libcurl will use another connection to the same host (see CURLMOPT_MAX_HOST_CONNECTIONS), 
            or queue the request until one of the pipelines to the host is ready to accept a request. <br>
            Thus, the total number of requests in-flight is CURLMOPT_MAX_HOST_CONNECTIONS * CURLMOPT_MAX_PIPELINE_LENGTH.
            <br>
            <br>
            Default: 5
            <br>
            <br>
            Protocols: HTTP(S)
            <br>
            <br>
            Example
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-G537-4273-937k-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-G537-4273-937k-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
include builtins\libcurl.e
atom m = curl_multi_init()
/* set a more conservative pipe length */
curl_multi_setopt(m, CURLMOPT_MAX_PIPELINE_LENGTH, 3)
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">include</font><font color="#000000"> builtins\libcurl.e
</font><font color="#004080">atom</font><font color="#000000"> m</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_multi_init</font><font color="#0000FF">()
</font><font color="#000080"><i>/* set a more conservative pipe length */
</i></font><font color="#5E005E">curl_multi_setopt</font><font color="#0000FF">(</font><font color="#000000">m</font><font color="#0000FF">,</font><font color="#000000"> CURLMOPT_MAX_PIPELINE_LENGTH</font><font color="#0000FF">,</font><font color="#000000"> 3</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div>
            <br>
            Availability: Added in 7.30.0
            <br>
            <br>
            Return value: Returns <a href="CURLcode.htm#CURLM_OK">CURLM_OK</a> if the option is supported, and 
            <a href="CURLcode.htm#CURLM_UNKNOWN_OPTION">CURLM_UNKNOWN_OPTION</a> if not.
            <br>
            <br>
            See also: CURLMOPT_PIPELINING, CURLMOPT_MAX_HOST_CONNECTIONS
          <small><br><a name="CURLMOPT_MAX_TOTAL_CONNECTIONS"></a></small>
         </td>
        </tr>
        <tr>
         <td valign=top>
          CURLMOPT_MAX_TOTAL_CONNECTIONS
         </td>
         <td>
            Max simultaneously open connections.
            <br>
            <br>
            Synopsis: <a href="CURLcode.htm#CURLMcode">CURLMcode</a> res = curl_multi_setopt(<a href="atom.htm">atom</a> multi_handle,
                                                                                             CURLMOPT_MAX_TOTAL_CONNECTIONS,
                                                                                             <a href="integer.htm">integer</a> max)
            <br>
            <br>
            The set number will be used as the maximum number of simultaneously open connections in total using this multi handle. <br>
            For each new session, libcurl will open a new connection up to the limit set by CURLMOPT_MAX_TOTAL_CONNECTIONS. <br>
            When the limit is reached, the sessions will be pending until there are available connections. <br>
            If CURLMOPT_PIPELINING is enabled, libcurl will try to pipeline or use multiplexing if the host is capable of it.
            <br>
            <br>
            Default: The default value is 0, which means that there is no limit. <br>
            It is then simply controlled by the number of easy handles added.
            <br>
            <br>
            Protocols: All
            <br>
            <br>
            Example
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-G537-4273-937k-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-G537-4273-937k-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
include builtins\libcurl.e
atom m = curl_multi_init()
/* never do more than 15 connections */
curl_multi_setopt(m, CURLMOPT_MAX_TOTAL_CONNECTIONS, 15)
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">include</font><font color="#000000"> builtins\libcurl.e
</font><font color="#004080">atom</font><font color="#000000"> m</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_multi_init</font><font color="#0000FF">()
</font><font color="#000080"><i>/* never do more than 15 connections */
</i></font><font color="#5E005E">curl_multi_setopt</font><font color="#0000FF">(</font><font color="#000000">m</font><font color="#0000FF">,</font><font color="#000000"> CURLMOPT_MAX_TOTAL_CONNECTIONS</font><font color="#0000FF">,</font><font color="#000000"> 15</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div>
            <br>
            Availability: Added in 7.30.0
            <br>
            <br>
            Return value: Returns <a href="CURLcode.htm#CURLM_OK">CURLM_OK</a> if the option is supported, and 
            <a href="CURLcode.htm#CURLM_UNKNOWN_OPTION">CURLM_UNKNOWN_OPTION</a> if not.
            <br>
            <br>
            See also: CURLMOPT_MAXCONNECTS, CURLMOPT_MAX_HOST_CONNECTIONS
          <small><br><a name="CURLMOPT_MAXCONNECTS"></a></small>
         </td>
        </tr>
        <tr>
         <td valign=top>
          CURLMOPT_MAXCONNECTS
         </td>
         <td>
            Set size of connection cache.
            <br>
            <br>
            Synopsis: <a href="CURLcode.htm#CURLMcode">CURLMcode</a> res = curl_multi_setopt(<a href="atom.htm">atom</a> multi_handle,
                                                                                             CURLMOPT_MAXCONNECTS,
                                                                                             <a href="integer.htm">integer</a> max)
            <br>
            <br>
            Set the maximum number of simultaneously open connections that libcurl may keep in its connection cache after completed use. <br>
            By default libcurl will enlarge the size for each added easy handle to make it fit 4 times the number of added easy handles.
            <br>
            <br>
            By setting this option, you can prevent the cache size from growing beyond the limit set by you.
            <br>
            <br>
            When the cache is full, curl closes the oldest one in the cache to prevent the number of open connections from increasing.
            <br>
            <br>
            This option is for the multi handle&rsquo;s use only, when using the easy interface you should instead use the CURLOPT_MAXCONNECTS option.
            <br>
            <br>
            See CURLMOPT_MAX_TOTAL_CONNECTIONS for limiting the number of active connections.
            <br>
            <br>
            Protocols: All
            <br>
            <br>
            Example
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-G537-4273-937k-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-G537-4273-937k-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
include builtins\libcurl.e
atom m = curl_multi_init()
/* only keep 10 connections in the cache */
curl_multi_setopt(m, CURLMOPT_MAXCONNECTS, 10)
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">include</font><font color="#000000"> builtins\libcurl.e
</font><font color="#004080">atom</font><font color="#000000"> m</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_multi_init</font><font color="#0000FF">()
</font><font color="#000080"><i>/* only keep 10 connections in the cache */
</i></font><font color="#5E005E">curl_multi_setopt</font><font color="#0000FF">(</font><font color="#000000">m</font><font color="#0000FF">,</font><font color="#000000"> CURLMOPT_MAXCONNECTS</font><font color="#0000FF">,</font><font color="#000000"> 10</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div>
            <br>
            Availability: Added in 7.16.3
            <br>
            <br>
            Return value: Returns <a href="CURLcode.htm#CURLM_OK">CURLM_OK</a> if the option is supported, and 
            <a href="CURLcode.htm#CURLM_UNKNOWN_OPTION">CURLM_UNKNOWN_OPTION</a> if not.
            <br>
            <br>
            See also: CURLMOPT_MAX_HOST_CONNECTIONS, CURLOPT_MAXCONNECTS
          <small><br><a name="CURLMOPT_PIPELINING"></a></small>
         </td>
        </tr>
        <tr>
         <td valign=top>
          CURLMOPT_PIPELINING
         </td>
         <td>
            Enable HTTP pipelining and multiplexing.
            <br>
            <br>
            Synopsis: <a href="CURLcode.htm#CURLMcode">CURLMcode</a> res = curl_multi_setopt(<a href="atom.htm">atom</a> multi_handle,
                                                                                             CURLMOPT_PIPELINING,
                                                                                             <a href="integer.htm">integer</a> bitmask)
            <br>
            <br>
            Pass in the bitmask parameter to instruct libcurl to enable HTTP pipelining and/or HTTP/2 multiplexing for this multi handle.
            <br>
            <br>
            When enabled, libcurl will attempt to use those protocol features when doing parallel requests to the same hosts.
            <br>
            <br>
            For pipelining, this means that if you add a second request that can use an already existing connection, the second request 
            will be "piped" on the same connection rather than being executed in parallel.
            <br>
            <br>
            For multiplexing, this means that follow-up requests can re-use an existing connection and send the new request multiplexed 
            over that at the same time as other transfers are already using that single connection.
            <br>
            <br>
            There are several other related options that are interesting to tweak and adjust to alter how libcurl spreads out requests 
            on different connections or not etc.
            <br>
            <br>
            Before 7.43.0, this option was set to 1 and 0 to enable and disable HTTP/1.1 pipelining.
            <br>
            <br>
            Starting in 7.43.0, bitmask&rsquo;s second bit also has a meaning, and you can ask for pipelining and multiplexing independently 
            of each other by toggling the correct bits.
            <br>
            <br>
            CURLPIPE_NOTHING (0) Default, which means doing no attempts at pipelining or multiplexing.<br>
            CURLPIPE_HTTP1 (1) If this bit is set, libcurl will try to pipeline HTTP/1.1 requests on connections that are already established and in use to hosts.<br>
            CURLPIPE_MULTIPLEX (2) If this bit is set, libcurl will try to multiplex the new transfer over an existing connection if possible. This requires HTTP/2.
            <br>
            <br>
            Default: 0 (both pipeline and multiplexing are off)
            <br>
            <br>
            Protocols: HTTP(S)
            <br>
            <br>
            Example
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-G537-4273-937k-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-G537-4273-937k-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
include builtins\libcurl.e
atom m = curl_multi_init()
/* try HTTP/1 pipelining and HTTP/2 multiplexing */
curl_multi_setopt(m, CURLMOPT_PIPELINING, or_bits(CURLPIPE_HTTP1,CURLPIPE_MULTIPLEX))
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">include</font><font color="#000000"> builtins\libcurl.e
</font><font color="#004080">atom</font><font color="#000000"> m</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_multi_init</font><font color="#0000FF">()
</font><font color="#000080"><i>/* try HTTP/1 pipelining and HTTP/2 multiplexing */
</i></font><font color="#5E005E">curl_multi_setopt</font><font color="#0000FF">(</font><font color="#000000">m</font><font color="#0000FF">,</font><font color="#000000"> CURLMOPT_PIPELINING</font><font color="#0000FF">,</font><font color="#7060A8"> or_bits</font><font color="#800000">(</font><font color="#000000">CURLPIPE_HTTP1</font><font color="#0000FF">,</font><font color="#000000">CURLPIPE_MULTIPLEX</font><font color="#800000">)</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div>
            <br>
            Availability: Added in 7.16.0. Multiplex support bit added in 7.43.0.
            <br>
            <br>
            Return value: Returns <a href="CURLcode.htm#CURLM_OK">CURLM_OK</a> if the option is supported, and 
            <a href="CURLcode.htm#CURLM_UNKNOWN_OPTION">CURLM_UNKNOWN_OPTION</a> if not.
            <br>
            <br>
            See also: CURLMOPT_MAX_PIPELINE_LENGTH, CURLMOPT_PIPELINING_SITE_BL, CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE, 
            CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE, CURLMOPT_MAX_HOST_CONNECTIONS, CURLMOPT_MAXCONNECTS, CURLMOPT_MAX_HOST_CONNECTIONS
          <small><br><a name="CURLMOPT_PIPELINING_SITE_BL"></a></small>
         </td>
        </tr>
        <tr>
         <td valign=top>
          CURLMOPT_PIPELINING_SITE_BL
         </td>
         <td>
            Pipelining host blacklist.
            <br>
            <br>
            Synopsis: <a href="CURLcode.htm#CURLMcode">CURLMcode</a> res = curl_multi_setopt(<a href="atom.htm">atom</a> multi_handle,
                                                                                             CURLMOPT_PIPELINING_SITE_BL,
                                                                                             <a href="sequence.htm">sequence</a> hosts)
            <br>
            <br>
            Pass a hosts array (/sequence) of strings. It is not necessary to "NULL_terminate" this (unlike C).<br>
            This is a list of sites that are blacklisted from pipelining, i.e sites that are known to not support HTTP pipelining. <br>
            The array is copied by libcurl.
            <br>
            <br>
            Pass a NULL pointer to clear the blacklist.
            <br>
            <br>
            Default: The default value is NULL, which means that there is no blacklist.
            <br>
            <br>
            Protocols: HTTP(S)
            <br>
            <br>
            Example
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-G537-4273-937k-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-G537-4273-937k-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
include builtins\libcurl.e
atom m = curl_multi_init()
sequence site_blacklist = {"www.haxx.se",
                           "www.example.com:1234"}
curl_multi_setopt(m, CURLMOPT_PIPELINING_SITE_BL, site_blacklist)
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">include</font><font color="#000000"> builtins\libcurl.e
</font><font color="#004080">atom</font><font color="#000000"> m</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_multi_init</font><font color="#0000FF">()
</font><font color="#004080">sequence</font><font color="#000000"> site_blacklist</font><font color="#0000FF"> = {</font><font color="#008000">"www.haxx.se"</font><font color="#0000FF">,
</font><font color="#008000">                           "www.example.com:1234"</font><font color="#0000FF">}
</font><font color="#5E005E">curl_multi_setopt</font><font color="#0000FF">(</font><font color="#000000">m</font><font color="#0000FF">,</font><font color="#000000"> CURLMOPT_PIPELINING_SITE_BL</font><font color="#0000FF">,</font><font color="#000000"> site_blacklist</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div>
            <br>
            Availability: Added in 7.30.0
            <br>
            <br>
            Return value: Returns <a href="CURLcode.htm#CURLM_OK">CURLM_OK</a> if the option is supported, and 
            <a href="CURLcode.htm#CURLM_UNKNOWN_OPTION">CURLM_UNKNOWN_OPTION</a> if not.
            <br>
            <br>
            See also: CURLMOPT_PIPELINING, CURLMOPT_PIPELINING_SERVER_BL
          <small><br><a name="CURLMOPT_PIPELINING_SERVER_BL"></a></small>
         </td>
        </tr>
        <tr>
         <td valign=top>
          CURLMOPT_PIPELINING_SERVER_BL
         </td>
         <td>
            Pipelining server blacklist.
            <br>
            <br>
            Synopsis: <a href="CURLcode.htm#CURLMcode">CURLMcode</a> res = curl_multi_setopt(<a href="atom.htm">atom</a> multi_handle,
                                                                                             CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE,
                                                                                             <a href="sequence.htm">sequence</a> servers)
            <br>
            <br>
            Pass a servers array (/sequence) of strings. It is not necessary to "NULL_terminate" this (unlike C).<br>
            This is a list of server types prefixes (in the Server: HTTP header) that are blacklisted from pipelining, 
            i.e server types that are known to not support HTTP pipelining. The array is copied by libcurl.
            <br>
            <br>
            Note that the comparison matches if the Server: header begins with the string in the blacklist, 
            i.e "Server: Ninja 1.2.3" and "Server: Ninja 1.4.0" can both be blacklisted by having "Ninja" in the backlist.
            <br>
            <br>
            Pass a NULL pointer to clear the blacklist.
            <br>
            <br>
            Default: The default value is NULL, which means that there is no blacklist.
            <br>
            <br>
            Example
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-G537-4273-937k-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-G537-4273-937k-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
include builtins\libcurl.e
atom m = curl_multi_init()
constant server_blacklist = {"Microsoft-IIS/6.0",
                             "nginx/0.8.54"}
curl_multi_setopt(m, CURLMOPT_PIPELINING_SERVER_BL, server_blacklist)
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">include</font><font color="#000000"> builtins\libcurl.e
</font><font color="#004080">atom</font><font color="#000000"> m</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_multi_init</font><font color="#0000FF">()
</font><font color="#008080">constant</font><font color="#000000"> server_blacklist</font><font color="#0000FF"> = {</font><font color="#008000">"Microsoft-IIS/6.0"</font><font color="#0000FF">,
</font><font color="#008000">                             "nginx/0.8.54"</font><font color="#0000FF">}
</font><font color="#5E005E">curl_multi_setopt</font><font color="#0000FF">(</font><font color="#000000">m</font><font color="#0000FF">,</font><font color="#000000"> CURLMOPT_PIPELINING_SERVER_BL</font><font color="#0000FF">,</font><font color="#000000"> server_blacklist</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div>
            <br>
            Availability: Added in 7.30.0
            <br>
            <br>
            Return value: Returns <a href="CURLcode.htm#CURLM_OK">CURLM_OK</a> if the option is supported, and 
            <a href="CURLcode.htm#CURLM_UNKNOWN_OPTION">CURLM_UNKNOWN_OPTION</a> if not.
            <br>
            <br>
            See also: CURLMOPT_PIPELINING, CURLMOPT_PIPELINING_SITE_BL
          <small><br><a name="CURLMOPT_PUSHFUNCTION"></a></small>
         </td>
        </tr>
        <tr>
         <td valign=top>
          CURLMOPT_PUSHFUNCTION
         </td>
         <td>
            Callback that approves or denies server pushes
            <br>
            <br>
            Synopsis: <a href="CURLcode.htm#CURLMcode">CURLMcode</a> res = curl_multi_setopt(<a href="atom.htm">atom</a> multi_handle,
                                                                                             CURLMOPT_PUSHFUNCTION,
                                                                                             <a href="atom.htm">atom</a> curl_push_cb)
            <br>
            <br>
            This callback gets called when a new HTTP/2 stream is being pushed by the server (using the PUSH_PROMISE frame). <br>
            If no push callback is set, all offered pushes will be denied automatically.
            <br>
            <br>
            The callback (see example below) gets its arguments like this:
            <br>
            <br>
            parent: the handle of the stream on which this push arrives. <br>
            The new handle has been duphandle()d from the parent, meaning that it has gotten all its options inherited. <br>
            It is then up to the application to alter any options if desired.
            <br>
            <br>
            easy: a newly created handle that represents this upcoming transfer.
            <br>
            <br>
            num_headers: the number of name+value pairs that was received and can be accessed
            <br>
            <br>
            p_curl_pushheaders: a handle used to access push headers using the accessor functions described below. <br>
            This only accesses and provides the PUSH_PROMISE headers, the normal response headers will be provided in the header callback as usual.
            <br>
            <br>
            userp: the pointer set with CURLMOPT_PUSHDATA
            <br>
            <br>
            If the callback returns CURL_PUSH_OK, the 'easy' handle will be added to the multi handle, the callback must not do that by itself.
            <br>
            <br>
            The callback can access PUSH_PROMISE headers with two accessor functions. <br>
            These functions can only be used from within this callback and they can only access the PUSH_PROMISE headers. <br>
            The normal response headers will be passed to the header callback for pushed streams just as for normal streams.
            <br>
            <br>
            atom ptr = curl_pushheader_bynum(atom p_curl_pushheaders, integer num)
            <br>
            <br>
            Returns the header at index 'num' (or NULL). <br>
            The returned pointer points to a "name:value" string that will be freed when this callback returns.
            <br>
            <br>
            atom ptr = curl_pushheader_byname(atom p_curl_pushheaders, string name)
            <br>
            <br>
            Returns the value for the given header name (or NULL). <br>
            This is a shortcut so that the application doesn&rsquo;t have to loop through all headers to find the one it is interested in. <br>
            The data pointed will be freed when this callback returns. <br>
            If more than one header field use the same name, this returns only the first one.
            <br>
            <br>
            Callback return value<br>
            CURL_PUSH_OK (0): The application has accepted the stream and it can now start receiving data, the ownership of the CURL handle has been taken over by the application.<br>
            CURL_PUSH_DENY (1): The callback denies the stream and no data for this will reach the application, the easy handle will be destroyed by libcurl.
            <br>
            <br>
            All other return codes are reserved for future use.
            <br>
            <br>
            Default: NULL, no callback
            <br>
            <br>
            Protocols: HTTP(S) (HTTP/2 only)
            <br>
            <br>
            Example
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-G537-4273-937k-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-G537-4273-937k-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
include builtins\libcurl.e
atom multi = curl_multi_init()

/* only allow pushes for file names starting with "push-" */
function push_callback(atom parent, easy, integer num_headers, atom p_curl_pushheaders, p_counter)
--  FILE *out;
    atom ppath = curl_pushheader_byname(headers, ":path");
    if headp!=NULL then
        string path = peek_string(ppath)
        if length(path)>=6 and path[1..6]="/push-" then
            printf(2,"The PATH is %s\n", {path})
 
            /* save the push here */
--DEV       out = fopen("pushed-stream", "wb")
 
            /* write to this file */
            curl_easy_setopt(easy, CURLOPT_WRITEDATA, out)
 
            integer counter = peekNS(p_counter,machine_word(),true)
            pokeN(p_counter,counter+1,machine_word())   /* one more */
 
            return CURL_PUSH_OK
        end if
    end if
    return CURL_PUSH_DENY
end function
constant push_cb = call_back({'+',routine_id("push_callback")})
 
curl_multi_setopt(multi, CURLMOPT_PUSHFUNCTION, push_cb)
atom p_counter = allocate(machine_word())
pokeN(p_counter,0,machine_word())
curl_multi_setopt(multi, CURLMOPT_PUSHDATA, p_counter)
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">include</font><font color="#000000"> builtins\libcurl.e
</font><font color="#004080">atom</font><font color="#000000"> multi</font><font color="#0000FF"> =</font><font color="#5E005E"> curl_multi_init</font><font color="#0000FF">()

</font><font color="#000080"><i>/* only allow pushes for file names starting with "push-" */
</i></font><font color="#008080">function</font><font color="#000000"> push_callback</font><font color="#0000FF">(</font><font color="#004080">atom</font><font color="#000000"> parent</font><font color="#0000FF">,</font><font color="#000000"> easy</font><font color="#0000FF">,</font><font color="#004080"> integer</font><font color="#000000"> num_headers</font><font color="#0000FF">,</font><font color="#004080"> atom</font><font color="#000000"> p_curl_pushheaders</font><font color="#0000FF">,</font><font color="#000000"> p_counter</font><font color="#0000FF">)
</font><font color="#000080"><i>--  FILE *out;
</i></font><font color="#004080">    atom</font><font color="#000000"> ppath</font><font color="#0000FF"> =</font><font color="#000000"> curl_pushheader_byname</font><font color="#0000FF">(</font><font color="#000000">headers</font><font color="#0000FF">,</font><font color="#008000"> ":path"</font><font color="#0000FF">);
</font><font color="#008080">    if</font><font color="#000000"> headp</font><font color="#0000FF">!=</font><font color="#004600">NULL</font><font color="#008080"> then
</font><font color="#004080">        string</font><font color="#000000"> path</font><font color="#0000FF"> =</font><font color="#5E005E"> peek_string</font><font color="#0000FF">(</font><font color="#000000">ppath</font><font color="#0000FF">)
</font><font color="#008080">        if</font><font color="#7060A8"> length</font><font color="#0000FF">(</font><font color="#000000">path</font><font color="#0000FF">)&gt;=</font><font color="#000000">6</font><font color="#008080"> and</font><font color="#000000"> path</font><font color="#0000FF">[</font><font color="#000000">1</font><font color="#0000FF">..</font><font color="#000000">6</font><font color="#0000FF">]=</font><font color="#008000">"/push-"</font><font color="#008080"> then
</font><font color="#5E005E">            printf</font><font color="#0000FF">(</font><font color="#000000">2</font><font color="#0000FF">,</font><font color="#008000">"The PATH is %s\n"</font><font color="#0000FF">,</font><font color="#800000"> {</font><font color="#000000">path</font><font color="#800000">}</font><font color="#0000FF">)
</font><font color="#C0C0C0"> 
</font><font color="#000080"><i>            /* save the push here */
--DEV       out = fopen("pushed-stream", "wb")
</i></font><font color="#C0C0C0"> 
</font><font color="#000080"><i>            /* write to this file */
</i></font><font color="#5E005E">            curl_easy_setopt</font><font color="#0000FF">(</font><font color="#000000">easy</font><font color="#0000FF">,</font><font color="#004600"> CURLOPT_WRITEDATA</font><font color="#0000FF">,</font><font color="#000000"> out</font><font color="#0000FF">)
</font><font color="#C0C0C0"> 
</font><font color="#004080">            integer</font><font color="#000000"> counter</font><font color="#0000FF"> =</font><font color="#7060A8"> peekNS</font><font color="#0000FF">(</font><font color="#000000">p_counter</font><font color="#0000FF">,</font><font color="#7060A8">machine_word</font><font color="#800000">()</font><font color="#0000FF">,</font><font color="#004600">true</font><font color="#0000FF">)
</font><font color="#7060A8">            pokeN</font><font color="#0000FF">(</font><font color="#000000">p_counter</font><font color="#0000FF">,</font><font color="#000000">counter</font><font color="#0000FF">+</font><font color="#000000">1</font><font color="#0000FF">,</font><font color="#7060A8">machine_word</font><font color="#800000">()</font><font color="#0000FF">)  </font><font color="#000080"><i> /* one more */
</i></font><font color="#C0C0C0"> 
</font><font color="#008080">            return</font><font color="#000000"> CURL_PUSH_OK
</font><font color="#008080">        end if
    end if
    return</font><font color="#000000"> CURL_PUSH_DENY
</font><font color="#008080">end function
constant</font><font color="#000000"> push_cb</font><font color="#0000FF"> =</font><font color="#5E005E"> call_back</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#008000">'+'</font><font color="#0000FF">,</font><font color="#5E005E">routine_id</font><font color="#800080">(</font><font color="#008000">"push_callback"</font><font color="#800080">)</font><font color="#800000">}</font><font color="#0000FF">)
</font><font color="#C0C0C0"> 
</font><font color="#5E005E">curl_multi_setopt</font><font color="#0000FF">(</font><font color="#000000">multi</font><font color="#0000FF">,</font><font color="#000000"> CURLMOPT_PUSHFUNCTION</font><font color="#0000FF">,</font><font color="#000000"> push_cb</font><font color="#0000FF">)
</font><font color="#004080">atom</font><font color="#000000"> p_counter</font><font color="#0000FF"> =</font><font color="#7060A8"> allocate</font><font color="#0000FF">(</font><font color="#7060A8">machine_word</font><font color="#800000">()</font><font color="#0000FF">)
</font><font color="#7060A8">pokeN</font><font color="#0000FF">(</font><font color="#000000">p_counter</font><font color="#0000FF">,</font><font color="#000000">0</font><font color="#0000FF">,</font><font color="#7060A8">machine_word</font><font color="#800000">()</font><font color="#0000FF">)
</font><font color="#5E005E">curl_multi_setopt</font><font color="#0000FF">(</font><font color="#000000">multi</font><font color="#0000FF">,</font><font color="#000000"> CURLMOPT_PUSHDATA</font><font color="#0000FF">,</font><font color="#000000"> p_counter</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div>
            <br>
            Availability: Added in 7.44.0
            <br>
            <br>
            Return value: Returns <a href="CURLcode.htm#CURLM_OK">CURLM_OK</a> if the option is supported, and 
            <a href="CURLcode.htm#CURLM_UNKNOWN_OPTION">CURLM_UNKNOWN_OPTION</a> if not.
            <br>
            <br>
            See also: CURLMOPT_PUSHDATA, CURLMOPT_PIPELINING, CURLOPT_PIPEWAIT, RFC 7540
          <small><br><a name="CURLMOPT_PUSHDATA"></a></small>
         </td>
        </tr>
        <tr>
         <td valign=top>
          CURLMOPT_PUSHDATA
         </td>
         <td>
            Pointer to pass to push callback.
            <br>
            <br>
             Synopsis: <a href="CURLcode.htm#CURLMcode">CURLMcode</a> res = curl_multi_setopt(<a href="atom.htm">atom</a> multi_handle,
                                                                                             CURLMOPT_PUSHDATA,
                                                                                             <a href="atom.htm">atom</a> pointer)
            <br>
            <br>
            Set pointer to pass as the last argument to the CURLMOPT_PUSHFUNCTION callback. <br>
            The pointer will not be touched or used by libcurl itself, only passed on to the callback function.
            <br>
            <br>
            Default: NULL
            <br>
            <br>
            Protocols: HTTP(S)
            <br>
            <br>
            Availability: Added in 7.44.0
            <br>
            <br>
            Return value: Returns <a href="CURLcode.htm#CURLM_OK">CURLM_OK</a> if the option is supported, and 
            <a href="CURLcode.htm#CURLM_UNKNOWN_OPTION">CURLM_UNKNOWN_OPTION</a> if not.
            <br>
            <br>
            See also: CURLMOPT_PUSHFUNCTION, CURLMOPT_PIPELINING, CURLOPT_PIPEWAIT, RFC 7540
          <small><br><a name="CURLMOPT_SOCKETFUNCTION"></a></small>
         </td>
        </tr>
        <tr>
         <td valign=top>
          CURLMOPT_SOCKETFUNCTION
         </td>
         <td>
            Callback informed about what to wait for
            <br>
            <br>
            Synopsis: <a href="CURLcode.htm#CURLMcode">CURLMcode</a> res = curl_multi_setopt(<a href="atom.htm">atom</a> multi_handle,
                                                                                             CURLMOPT_SOCKETFUNCTION,
                                                                                             <a href="atom.htm">atom</a> socket_cb)
            <br> 
            <br> 
            Pass a pointer to your callback function, which should match the prototype shown in the example below.
            <br>
            <br>
            When the curl_multi_socket_action function runs, it informs the application about updates in the socket (file descriptor) status 
            by doing none, one, or multiple calls to the socket_callback. <br>
            The callback gets status updates with changes since the previous time the callback was called. <br>
            If the given callback pointer is NULL, no callback will be called. <br>
            Set the callback&rsquo;s userp argument with CURLMOPT_SOCKETDATA. <br>
            See curl_multi_socket_action for more details on how the callback is used and should work.
            <br>
            <br>
            The what parameter informs the callback on the status of the given socket. It can hold one of these values:
            <br>
            <br>
            CURL_POLL_IN: Wait for incoming data. For the socket to become readable.
            <br>
            <br>
            CURL_POLL_OUT: Wait for outgoing data. For the socket to become writable.
            <br>
            <br>
            CURL_POLL_INOUT: Wait for incoming and outgoing data. For the socket to become readable or writable.
            <br>
            <br>
            CURL_POLL_REMOVE: The specified socket/file descriptor is no longer used by libcurl.
            <br>
            <br>
            Default: NULL (no callback)
            <br>
            <br>
            Protocols: All
            <br>
            <br>
            Example
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-G537-4273-937k-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-G537-4273-937k-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>

-- (This example has not been translated)

--/*
int socket_callback(CURL *easy,      /* easy handle */
                    curl_socket_t s, /* socket */
                    int what,        /* describes the socket */
                    void *userp,     /* private callback pointer */
                    void *socketp);  /* private socket pointer */
 
//CURLMcode curl_multi_setopt(CURLM *handle, CURLMOPT_SOCKETFUNCTION, socket_callback);

include builtins\libcurl.e
atom multi = curl_multi_init()

static int sock_cb(CURL *e, curl_socket_t s, int what, void *cbp, void *sockp)
{
  GlobalInfo *g = (GlobalInfo*) cbp;
  SockInfo *fdp = (SockInfo*) sockp;
 
  if(what == CURL_POLL_REMOVE) {
    remsock(fdp);
  }
  else {
    if(!fdp) {
      addsock(s, e, what, g);
    }
    else {
      setsock(fdp, s, e, what, g);
    }
  }
  return 0;
}
 
main()
{
  GlobalInfo setup;
  /* ... use socket callback and custom pointer */
  curl_multi_setopt(multi, CURLMOPT_SOCKETFUNCTION, sock_cb);
  curl_multi_setopt(multi, CURLMOPT_SOCKETDATA, &setup);
}
--*/
</eucode-->
<pre>
<font color="#000000">
</font><font color="#000080"><i>-- (This example has not been translated)

--/*
int socket_callback(CURL *easy,      /* easy handle */
                    curl_socket_t s, /* socket */
                    int what,        /* describes the socket */
                    void *userp,     /* private callback pointer */
                    void *socketp);  /* private socket pointer */
 
//CURLMcode curl_multi_setopt(CURLM *handle, CURLMOPT_SOCKETFUNCTION, socket_callback);

include builtins\libcurl.e
atom multi = curl_multi_init()

static int sock_cb(CURL *e, curl_socket_t s, int what, void *cbp, void *sockp)
{
  GlobalInfo *g = (GlobalInfo*) cbp;
  SockInfo *fdp = (SockInfo*) sockp;
 
  if(what == CURL_POLL_REMOVE) {
    remsock(fdp);
  }
  else {
    if(!fdp) {
      addsock(s, e, what, g);
    }
    else {
      setsock(fdp, s, e, what, g);
    }
  }
  return 0;
}
 
main()
{
  GlobalInfo setup;
  /* ... use socket callback and custom pointer */
  curl_multi_setopt(multi, CURLMOPT_SOCKETFUNCTION, sock_cb);
  curl_multi_setopt(multi, CURLMOPT_SOCKETDATA, &amp;setup);
}
--*/</i></font>
</pre>
             </div>
            </div>
           </div>
          </div>
            <br>
            Availability: Added in 7.15.4
            <br>
            <br>
            Return value: Returns <a href="CURLcode.htm#CURLM_OK">CURLM_OK</a>.
            <br>
            <br>
            See also: CURLMOPT_SOCKETDATA, curl_multi_socket_action, CURLMOPT_TIMERFUNCTION
          <small><br><a name="CURLMOPT_SOCKETDATA"></a></small>
         </td>
        </tr>
        <tr>
         <td valign=top>
          CURLMOPT_SOCKETDATA
         </td>
         <td>
            Custom pointer passed to the socket callback
            <br>
            <br>
            Synopsis: <a href="CURLcode.htm#CURLMcode">CURLMcode</a> res = curl_multi_setopt(<a href="atom.htm">atom</a> multi_handle,
                                                                                             CURLMOPT_SOCKETDATA,
                                                                                             <a href="atom.htm">atom</a> pointer)
            <br>
            <br>
            A data pointer to pass to the socket callback set with the CURLMOPT_SOCKETFUNCTION option.
            <br>
            <br>
            This pointer will not be touched by libcurl but will only be passed in to the socket callbacks&rsquo;s userp argument.
            <br>
            <br>
            Default: NULL
            <br>
            <br>
            Protocols: All
            <br>
            <br>
            Availability: Added in 7.15.4
            <br>
            <br>
            Return value: Returns <a href="CURLcode.htm#CURLM_OK">CURLM_OK</a>.
            <br>
            <br>
            See also: CURLMOPT_SOCKETFUNCTION, curl_multi_socket_action, CURLMOPT_TIMERFUNCTION
          <small><br><a name="CURLMOPT_TIMERFUNCTION"></a></small>
         </td>
        </tr>
        <tr>
         <td valign=top>
          CURLMOPT_TIMERFUNCTION
         </td>
         <td>
            Set callback to receive timeout values
            <br>
            <br>
            Synopsis/Example:
          <br>
          <br>
          <div id="code-snippet-1" class="codeSnippetContainer" xmlns="">
           <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
             <div class="codeSnippetToolBarText">
              <a id="copytext" href="javascript:CopyToClipboard('CodeSnippetContainerCode_13a75j95-b5aj-4273-937k-8b2483c92846');">Copy</a>
             </div>
            </div>
            <div id="CodeSnippetContainerCode_13a75j95-b5aj-4273-937k-8b2483c92846" class="codeSnippetContainerCode" dir="ltr">
             <div style="color:Black;">
<!--eucode>
include builtins\libcurl.e
 
-- NB this example is incomplete and untested

function timer_callback(atom curlm, integer timeout_ms, atom userp)
    if timeout_ms=-1 then
        -- delete your timer?? [curl_multi_setopt(curlm, CURLMOPT_TIMERDATA, NULL)?]
    end if
    return 0    -- success
end function
constant timer_cb = call_back({'+',routine_id("timer_callback")})

curl_multi_setopt(curlm, CURLMOPT_TIMERFUNCTION, timer_cb)
</eucode-->
<pre>
<font color="#000000"></font><font color="#008080">include</font><font color="#000000"> builtins\libcurl.e
</font><font color="#C0C0C0"> 
</font><font color="#000080"><i>-- NB this example is incomplete and untested

</i></font><font color="#008080">function</font><font color="#000000"> timer_callback</font><font color="#0000FF">(</font><font color="#004080">atom</font><font color="#000000"> curlm</font><font color="#0000FF">,</font><font color="#004080"> integer</font><font color="#000000"> timeout_ms</font><font color="#0000FF">,</font><font color="#004080"> atom</font><font color="#000000"> userp</font><font color="#0000FF">)
</font><font color="#008080">    if</font><font color="#000000"> timeout_ms</font><font color="#0000FF">=-</font><font color="#000000">1</font><font color="#008080"> then
</font><font color="#000080"><i>        -- delete your timer?? [curl_multi_setopt(curlm, CURLMOPT_TIMERDATA, NULL)?]
</i></font><font color="#008080">    end if
    return</font><font color="#000000"> 0   </font><font color="#000080"><i> -- success
</i></font><font color="#008080">end function
constant</font><font color="#000000"> timer_cb</font><font color="#0000FF"> =</font><font color="#5E005E"> call_back</font><font color="#0000FF">(</font><font color="#800000">{</font><font color="#008000">'+'</font><font color="#0000FF">,</font><font color="#5E005E">routine_id</font><font color="#800080">(</font><font color="#008000">"timer_callback"</font><font color="#800080">)</font><font color="#800000">}</font><font color="#0000FF">)

</font><font color="#5E005E">curl_multi_setopt</font><font color="#0000FF">(</font><font color="#000000">curlm</font><font color="#0000FF">,</font><font color="#004600"> CURLMOPT_TIMERFUNCTION</font><font color="#0000FF">,</font><font color="#000000"> timer_cb</font><font color="#0000FF">)</font>
</pre>
             </div>
            </div>
           </div>
          </div>
            Pass a pointer to your callback function, which should match the prototype shown above.
            <br>
            <br>
            Certain features, such as timeouts and retries, require you to call libcurl even when there is no activity on the file descriptors.
            <br>
            <br>
            Your callback function timer_callback should install a non-repeating timer with an interval of timeout_ms. <br>
            Each time that timer fires, call either curl_multi_socket_action or <a href="curl_multi_perform.htm">curl_multi_perform</a>, 
            depending on which interface you use.
            <br>
            <br>
            A timeout_ms value of -1 means you should delete your timer.
            <br>
            <br>
            A timeout_ms value of 0 means you should call curl_multi_socket_action or 
            <a href="curl_multi_perform.htm">curl_multi_perform</a> (once) as soon as possible.
            <br>
            <br>
            timer_callback will only be called when the timeout_ms changes.
            <br>
            <br>
            The userp pointer is set with <a href="#CURLMOPT_TIMERDATA">CURLMOPT_TIMERDATA</a>.
            <br>
            <br>
            The timer callback should return 0 on success, and -1 on error. <br>
            This callback can be used instead of, or in addition to, curl_multi_timeout.
            <br>
            <br>
            Default: NULL
            <br>
            <br>
            Protocols: All
<!--
I can't follow this...
            <br>
            <br>
            EXAMPLE
static gboolean timeout_cb(gpointer user_data)
{
  int running;
  if(user_data) {
    g_free(user_data);
    curl_multi_setopt(curl_handle, CURLMOPT_TIMERDATA, NULL);
  }
  curl_multi_socket_action(multi, CURL_SOCKET_TIMEOUT, 0, &running);
  return G_SOURCE_REMOVE;
}
 
static int timerfunc(CURLM *multi, long timeout_ms, void *userp)
{
  guint *id = userp;
 
  if(id)
    g_source_remove(*id);
 
  /* -1 means we should just delete our timer. */
  if(timeout_ms == -1) {
    g_free(id);
    id = NULL;
  }
  else {
    if(!id)
      id = g_new(guint, 1);
    *id = g_timeout_add(timeout_ms, timeout_cb, id);
  }
  curl_multi_setopt(multi, CURLMOPT_TIMERDATA, id);
  return 0;
}
 
curl_multi_setopt(multi, CURLMOPT_TIMERFUNCTION, timerfunc);
-->
            <br>
            <br>
            Availability: Added in 7.16.0
            <br>
            <br>
            Return value: Returns <a href="CURLcode.htm#CURLM_OK">CURLM_OK</a> if the option is supported, and 
            <a href="CURLcode.htm#CURLM_UNKNOWN_OPTION">CURLM_UNKNOWN_OPTION</a> if not.
            <br>
            <br>
            See also: <a href="#CURLMOPT_TIMERDATA">CURLMOPT_TIMERDATA</a>, CURLMOPT_SOCKETFUNCTION
          <small><br><a name="CURLMOPT_TIMERDATA"></a></small>
         </td>
        </tr>
        <tr>
         <td valign=top>
          CURLMOPT_TIMERDATA
         </td>
         <td>
            Custom pointer to pass to timer callback
            <br>
            <br>
            Synopsis: <a href="CURLcode.htm#CURLMcode">CURLMcode</a> res = curl_multi_setopt(<a href="atom.htm">atom</a> multi_handle,
                                                                                             CURLMOPT_TIMERDATA, 
                                                                                             <a href="atom.htm">atom</a> pointer)
            <br>
            <br>
            A data pointer to pass to the timer callback set with the <a href="#CURLMOPT_TIMERFUNCTION">CURLMOPT_TIMERFUNCTION</a> option.
            <br>
            <br>
            This pointer will not be touched by libcurl but will only be passed in to the timer callbacks&rsquo;s userp argument.
            <br>
            <br>
            Default: NULL
            <br>
            <br>
            Protocols: All
            <br>
            <br>
            Availability: Added in 7.16.0
            <br>            
            <br>
            Return value: Returns <a href="CURLcode.htm#CURLM_OK">CURLM_OK</a> if the option is supported, and 
            <a href="CURLcode.htm#CURLM_UNKNOWN_OPTION">CURLM_UNKNOWN_OPTION</a> if not.
            <br>
            <br>
            See also: <a href="#CURLMOPT_TIMERFUNCTION">CURLMOPT_TIMERFUNCTION</a>, CURLMOPT_SOCKETFUNCTION
         </td>
        </tr>

        <tr>
         <td valign=top>
          <b>See Also:</b>
         </td>
         <td>

SEE ALSO
, , curl_multi_socket, 
          <a href="curl_multi_init.htm">curl_multi_init</a>,
          <a href="curl_multi_cleanup.htm">curl_multi_cleanup</a>,

          <a href="curl_multi_info_read.htm">curl_multi_info_read</a>
         </td>
        </tr>
       </table>
       <br>
       <br>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
