<head>
 <body>
  <toc>
   <these>
    <get>
     <stripped>
      <h1 class="title">Arwen Win32 Library</h1>
      <div id="mainSection">
       <p align="left">
        <br>
        <br>
        <b>NOTE</b>: This is windows 32-bit only. For a 32/64bit, cross-platform library see pGUI
        <br>
        <br>
        <a href="arwen.Introduction.htm">Introduction</a>
        <br>
        <a href="arwen.Events.htm">Event Handling</a>
        <br>
        <a href="arwen.Create.htm">Creating Controls</a>
        <br>
        &nbsp;&nbsp;&nbsp;&nbsp;<a href="arwen.Windows.htm">Windows</a>
        <br>
        &nbsp;&nbsp;&nbsp;&nbsp;<a href="arwen.Buttons.htm">Buttons</a>
        <br>
        &nbsp;&nbsp;&nbsp;&nbsp;<a href="arwen.Markboxes.htm">MarkBoxes</a>
        <br>
        &nbsp;&nbsp;&nbsp;&nbsp;<a href="arwen.Groups.htm">Group boxes</a>
        <br>
        &nbsp;&nbsp;&nbsp;&nbsp;<a href="arwen.Editable.htm">Editable controls</a>
        <br>
        &nbsp;&nbsp;&nbsp;&nbsp;<a href="arwen.Labels.htm">Labels</a>
        <br>
        &nbsp;&nbsp;&nbsp;&nbsp;<a href="arwen.Toolbars.htm">Tool bars</a>
        <br>
        &nbsp;&nbsp;&nbsp;&nbsp;<a href="arwen.Statusbars.htm">Status bars</a>
        <br>
        &nbsp;&nbsp;&nbsp;&nbsp;<a href="arwen.Scrollbars.htm">Scroll bars</a>
        <br>
        &nbsp;&nbsp;&nbsp;&nbsp;<a href="arwen.Trackbars.htm">Track bars</a>
        <br>
        &nbsp;&nbsp;&nbsp;&nbsp;<a href="arwen.Progressbars.htm">Progress bars</a>
        <br>
        &nbsp;&nbsp;&nbsp;&nbsp;<a href="arwen.Menus.htm">Menus</a>
        <br>
        &nbsp;&nbsp;&nbsp;&nbsp;<a href="arwen.Listcontrols.htm">List boxes</a>
        <br>
        &nbsp;&nbsp;&nbsp;&nbsp;<a href="arwen.Tabcontrols.htm">Tab controls</a>
        <br>
        &nbsp;&nbsp;&nbsp;&nbsp;<a href="arwen.Hypertext.htm">HyperText controls</a>
        <br>
        <a href="arwen.Destroy.htm">Destroying Controls</a>
        <br>
        <a href="arwen.Tabbing.htm">Moving between Controls (using TAB)</a>
        <br>
        <a href="arwen.Accelerator.htm">Accelerator Keys</a>
        <br>
        <a href="arwen.Mouse.htm">Mouse Routines</a>
        <br>
        <a href="arwen.Clipboard.htm">Clipboard functions</a>
        <br>
        <a href="arwen.Dib_bitmap.htm">Dib sections &amp; Bitmaps</a>
        <br>
        &nbsp;&nbsp;&nbsp;&nbsp;<a href="arwen.DibSections.htm">DibSection Library for Arwen</a>
        <br>
        <a href="arwen.Icon_cursor.htm">Icons &amp; Cursors</a>
        <br>
        <a href="arwen.Timers.htm">Timers</a>
        <br>
        <a href="arwen.Comm_dlg.htm">Common Dialogs</a>
        <br>
        <a href="arwen.Window_msg.htm">Windows messages</a>
        <br>
        <a href="arwen.Structures.htm">Structures</a>
        <br>
        <a href="#TO_DO">To do list..</a>
        <br>
        <a href="#BUGS">Bugs</a>
        <br>
       </p>
       <p>
        <font color="#000080" face="Verdana"><strong>GLOBAL ATOMS</strong></font>
        <br>
            Several groups of global atoms are visible to the application program:
        <br>
            1) All the Win32 constants that have been defined in the include files
        <br>
            2) Constant names of all the linked Win32 functions - perhaps you
            may wish to directly call a Win32 function, who knows?
        <br>
            <a name="void"></a>
            3)
        <code>void</code> - Strictly speaking void is not
            an atom; it is declared as a global object. Many library routines
            will return some value but most of these can be ignored.
        <code>void</code>
            is a convenient variable to
            assign the return value. It will save having to create yet
            another scratch variable. Just be careful that you are not
            tempted to read the value assigned to void since it is being
            constantly overwritten.
        <br>
            <a name="UNDEFINED"></a>
            4) UNDEFINED - This a flag used to represent an undefined state
            for some of the vasriables used in the library. You would use it 
            to dis-associate controls from their handlers.
        <br>
            <a name="IDLE"></a>
            5) IDLE - Used to enable a routine to run continuously (looping).
        <br>
            <a name="True"></a>
            <a name="False"></a>
            6) True &amp; False - Boolean values as expected. Please note
            that Win32 functions do not always represent failure as 0 or
            success as 1, however, many functions in arwen do return boolean
            values to indicate the outcome. Please consult the documentation
            for specific details.
        <br>
            <a name="CLIPBOARD"></a>
            7) CLIPBOARD - Used to access the clipboard text functions when
            invoking getText() or setText().
        <br>
       </p>
       <p>
        <font color="#000080" face="Verdana"><strong>THINGS THAT STILL NEED TO BE DONE..</strong>
        </font>
        <a name="TO_DO"></a>
        <br>
Flat tool bar support
        <br>
finish Menu support (bitmaps..other?)
        <br>
emulate modality *fully*
        <br>
icons/bitmap support
        <br>
setting fonts
        <br>
some graphic primitives
        <br>
improve documentation
        <br>
improve intuitiveness for activating a TabItem and retrieving the open tab
        <br>
must invalidate the rect that covers the main window when another
window is closed. Could use MapWindowPoints() then RedrawWindow()
        <br>
tidy up DC arrangement - does it need it?
        <br>
purge the memory allocation code (in arwen.ew) so that buffer
overflows can be prevented
        <br>
finish adding image lists - make separate include file make
icon/bitmap references as indexes rather than handles in control
creation but bitmaps can be handles otherwise. Ensure the
imagelists are destroyed as appropriate Perhaps have some default
icons in the base imagelists....
        <br>
destroy() should properly deal with all parent controls and their
children - in particular Windows &amp; toolbars
        <br>
       </p>
       <p>
        <font color="#000080" face="Verdana"><strong>BUGS</strong></font>
        <a name="BUGS"></a>
        <br>
            1) If a handler routine for a Status Bar invokes setText() to
            draw some text on itself and the call is &quot;inlined&quot; (ie,
            not part of a message trap) then a fatal error occurs. This
            does not happen with other controls I tested. I think the reason
            is that when setText() is invoked it sends a message to the
            Status bar handler which means the handler indirectly calls
            itself in this situation.
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
       </p>
      </div>
     </stripped>
    </get>
   </these>
  </toc>
 </body>
</head>
